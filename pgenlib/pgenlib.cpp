/* Generated by Cython 0.23.3 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/usr/lib/python2.7/dist-packages/numpy/core/include/numpy/arrayobject.h", 
            "/usr/lib/python2.7/dist-packages/numpy/core/include/numpy/ufuncobject.h", 
            "pgenlib_python_support.h"
        ], 
        "extra_compile_args": [
            "-std=c++98", 
            "-Wno-unused-function"
        ], 
        "extra_link_args": [
            "-std=c++98"
        ], 
        "include_dirs": [
            "/usr/lib/python2.7/dist-packages/numpy/core/include"
        ], 
        "language": "c++"
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_3"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) (void_result, Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pgenlib
#define __PYX_HAVE_API__pgenlib
#include "stdint.h"
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "pgenlib_python_support.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "pgenlib.pyx",
  "__init__.pxd",
  "type.pxd",
};
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":725
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":726
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":727
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":728
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":732
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":733
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":734
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":735
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":739
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":740
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":749
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":750
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":754
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":757
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":761
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_7pgenlib_PgenReader;
struct __pyx_obj_7pgenlib_PgenWriter;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":765
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_7pgenlib_10PgenReader_read;
struct __pyx_opt_args_7pgenlib_10PgenReader_read_dosages;
struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal8;
struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal32;
struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal64;
struct __pyx_opt_args_7pgenlib_10PgenReader_read_range;
struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal8;
struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal32;
struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal64;
struct __pyx_opt_args_7pgenlib_10PgenReader_read_list;
struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_range;
struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_list;
struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_and_phasepresent_range;
struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_and_phasepresent_list;
struct __pyx_opt_args_7pgenlib_10PgenReader_count;
struct __pyx_opt_args_7pgenlib_10PgenReader_change_sample_subset;
struct __pyx_opt_args_7pgenlib_10PgenWriter_append_alleles;
struct __pyx_opt_args_7pgenlib_10PgenWriter_append_alleles_batch;

/* "pgenlib.pyx":337
 * 
 * 
 *     cpdef read(self, uint32_t variant_idx, np.ndarray geno_int_out, uint32_t allele_idx = 1):             # <<<<<<<<<<<<<<
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:
 *             # could have an unsafe mode which doesn't perform this check, but
 */
struct __pyx_opt_args_7pgenlib_10PgenReader_read {
  int __pyx_n;
  uint32_t allele_idx;
};

/* "pgenlib.pyx":366
 * 
 * 
 *     cpdef read_dosages(self, uint32_t variant_idx, np.ndarray floatarr_out, uint32_t allele_idx = 1):             # <<<<<<<<<<<<<<
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_dosages() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 */
struct __pyx_opt_args_7pgenlib_10PgenReader_read_dosages {
  int __pyx_n;
  uint32_t allele_idx;
};

/* "pgenlib.pyx":426
 * 
 * 
 *     cdef read_range_internal8(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int8_t,mode="c",ndim=2] geno_int8_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 */
struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal8 {
  int __pyx_n;
  uint32_t allele_idx;
  int sample_maj;
};

/* "pgenlib.pyx":494
 *         return
 * 
 *     cdef read_range_internal32(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int32_t,mode="c",ndim=2] geno_int32_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 */
struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal32 {
  int __pyx_n;
  uint32_t allele_idx;
  int sample_maj;
};

/* "pgenlib.pyx":562
 *         return
 * 
 *     cdef read_range_internal64(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int64_t,mode="c",ndim=2] geno_int64_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 */
struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal64 {
  int __pyx_n;
  uint32_t allele_idx;
  int sample_maj;
};

/* "pgenlib.pyx":630
 *         return
 * 
 *     cpdef read_range(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray geno_int_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         # C-contiguity checked by read_range_internal8(), etc.
 *         if geno_int_out.dtype == np.int8:
 */
struct __pyx_opt_args_7pgenlib_10PgenReader_read_range {
  int __pyx_n;
  uint32_t allele_idx;
  int sample_maj;
};

/* "pgenlib.pyx":643
 * 
 * 
 *     cdef read_list_internal8(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int8_t,mode="c",ndim=2] geno_int8_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */
struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal8 {
  int __pyx_n;
  uint32_t allele_idx;
  int sample_maj;
};

/* "pgenlib.pyx":715
 *         return
 * 
 *     cdef read_list_internal32(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int32_t,mode="c",ndim=2] geno_int32_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */
struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal32 {
  int __pyx_n;
  uint32_t allele_idx;
  int sample_maj;
};

/* "pgenlib.pyx":787
 *         return
 * 
 *     cdef read_list_internal64(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int64_t,mode="c",ndim=2] geno_int64_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */
struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal64 {
  int __pyx_n;
  uint32_t allele_idx;
  int sample_maj;
};

/* "pgenlib.pyx":859
 *         return
 * 
 *     cpdef read_list(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray geno_int_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         if geno_int_out.dtype == np.int8:
 *             self.read_list_internal8(variant_idxs, geno_int_out, allele_idx, sample_maj)
 */
struct __pyx_opt_args_7pgenlib_10PgenReader_read_list {
  int __pyx_n;
  uint32_t allele_idx;
  int sample_maj;
};

/* "pgenlib.pyx":871
 * 
 * 
 *     cpdef read_alleles_range(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_out, bint hap_maj = 0):             # <<<<<<<<<<<<<<
 *         # if hap_maj == False, allele_int32_out must have at least
 *         #   variant_idx_ct rows, 2 * sample_ct columns
 */
struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_range {
  int __pyx_n;
  int hap_maj;
};

/* "pgenlib.pyx":970
 * 
 * 
 *     cpdef read_alleles_list(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_out, bint hap_maj = 0):             # <<<<<<<<<<<<<<
 *         # if hap_maj == False, allele_int32_out must have at least
 *         #   variant_idx_ct rows, 2 * sample_ct columns
 */
struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_list {
  int __pyx_n;
  int hap_maj;
};

/* "pgenlib.pyx":1071
 * 
 * 
 *     cpdef read_alleles_and_phasepresent_range(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_out, np.ndarray[np.uint8_t,mode="c",cast=True,ndim=2] phasepresent_out, bint hap_maj = 0):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_and_phasepresent_range {
  int __pyx_n;
  int hap_maj;
};

/* "pgenlib.pyx":1075
 * 
 * 
 *     cpdef read_alleles_and_phasepresent_list(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_out, np.ndarray[np.uint8_t,cast=True,mode="c",ndim=2] phasepresent_out, bint hap_maj = 0):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_and_phasepresent_list {
  int __pyx_n;
  int hap_maj;
};

/* "pgenlib.pyx":1079
 * 
 * 
 *     cpdef count(self, uint32_t variant_idx, np.ndarray[np.uint32_t,mode="c"] genocount_uint32_out, object allele_idx = 1):             # <<<<<<<<<<<<<<
 *         # todo: multiallelic variants
 *         if allele_idx is None:
 */
struct __pyx_opt_args_7pgenlib_10PgenReader_count {
  int __pyx_n;
  PyObject *allele_idx;
};

/* "pgenlib.pyx":1095
 * 
 * 
 *     cpdef change_sample_subset(self, object sample_subset = None):             # <<<<<<<<<<<<<<
 *         if sample_subset is not None:
 *             self.set_sample_subset_internal(sample_subset)
 */
struct __pyx_opt_args_7pgenlib_10PgenReader_change_sample_subset {
  int __pyx_n;
  PyObject *sample_subset;
};

/* "pgenlib.pyx":1223
 * 
 * 
 *     cpdef append_alleles(self, np.ndarray[np.int32_t,mode="c"] allele_int32, bint all_phased = False):             # <<<<<<<<<<<<<<
 *         cdef int32_t* allele_codes = <int32_t*>(&(allele_int32[0]))
 *         cdef uintptr_t* genovec = self._genovec
 */
struct __pyx_opt_args_7pgenlib_10PgenWriter_append_alleles {
  int __pyx_n;
  int all_phased;
};

/* "pgenlib.pyx":1297
 * 
 * 
 *     cpdef append_alleles_batch(self, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_batch, bint all_phased = False):             # <<<<<<<<<<<<<<
 *         cdef uint32_t batch_size = <uint32_t>allele_int32_batch.shape[0]
 *         cdef uintptr_t* genovec = self._genovec
 */
struct __pyx_opt_args_7pgenlib_10PgenWriter_append_alleles_batch {
  int __pyx_n;
  int all_phased;
};

/* "pgenlib.pyx":164
 * 
 * 
 * cdef class PgenReader:             # <<<<<<<<<<<<<<
 *     # todo: nonref_flags, multiallelic variant support
 *     cdef pgen_file_info_t* _info_ptr
 */
struct __pyx_obj_7pgenlib_PgenReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pgenlib_PgenReader *__pyx_vtab;
  plink2::pgen_file_info_t *_info_ptr;
  plink2::pgen_reader_t *_state_ptr;
  uintptr_t *_subset_include_vec;
  uintptr_t *_subset_include_interleaved_vec;
  uint32_t *_subset_cumulative_popcounts;
  uint32_t _subset_size;
  uintptr_t *_genovec;
  uintptr_t *_phasepresent;
  uintptr_t *_phaseinfo;
  uintptr_t *_dosage_present;
  uint16_t *_dosage_vals;
  plink2::vul_t *_transpose_batch_buf;
  uintptr_t *_multivar_vmaj_geno_buf;
  uintptr_t *_multivar_vmaj_phasepresent_buf;
  uintptr_t *_multivar_vmaj_phaseinfo_buf;
  uintptr_t *_multivar_smaj_geno_batch_buf;
  uintptr_t *_multivar_smaj_phaseinfo_batch_buf;
  uintptr_t *_multivar_smaj_phasepresent_batch_buf;
};


/* "pgenlib.pyx":1143
 *     bytes_to_bits_unsafe(boolbytes, sample_ct, bitarr)
 * 
 * cdef class PgenWriter:             # <<<<<<<<<<<<<<
 *     cdef st_pgen_writer_t* _state_ptr
 *     cdef uintptr_t* _nonref_flags
 */
struct __pyx_obj_7pgenlib_PgenWriter {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pgenlib_PgenWriter *__pyx_vtab;
  plink2::st_pgen_writer_t *_state_ptr;
  uintptr_t *_nonref_flags;
  uintptr_t *_genovec;
  uintptr_t *_phasepresent;
  uintptr_t *_phaseinfo;
  uintptr_t *_dosage_present;
  uint16_t *_dosage_vals;
};



/* "pgenlib.pyx":164
 * 
 * 
 * cdef class PgenReader:             # <<<<<<<<<<<<<<
 *     # todo: nonref_flags, multiallelic variant support
 *     cdef pgen_file_info_t* _info_ptr
 */

struct __pyx_vtabstruct_7pgenlib_PgenReader {
  PyObject *(*set_sample_subset_internal)(struct __pyx_obj_7pgenlib_PgenReader *, PyArrayObject *);
  PyObject *(*__pyx___enter__)(struct __pyx_obj_7pgenlib_PgenReader *, int __pyx_skip_dispatch);
  PyObject *(*get_raw_sample_ct)(struct __pyx_obj_7pgenlib_PgenReader *, int __pyx_skip_dispatch);
  PyObject *(*get_variant_ct)(struct __pyx_obj_7pgenlib_PgenReader *, int __pyx_skip_dispatch);
  PyObject *(*hardcall_phase_present)(struct __pyx_obj_7pgenlib_PgenReader *, int __pyx_skip_dispatch);
  PyObject *(*read)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read *__pyx_optional_args);
  PyObject *(*read_dosages)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_dosages *__pyx_optional_args);
  PyObject *(*read_alleles)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*read_alleles_and_phasepresent)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, PyArrayObject *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*read_range_internal8)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, uint32_t, PyArrayObject *, struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal8 *__pyx_optional_args);
  PyObject *(*read_range_internal32)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, uint32_t, PyArrayObject *, struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal32 *__pyx_optional_args);
  PyObject *(*read_range_internal64)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, uint32_t, PyArrayObject *, struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal64 *__pyx_optional_args);
  PyObject *(*read_range)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, uint32_t, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_range *__pyx_optional_args);
  PyObject *(*read_list_internal8)(struct __pyx_obj_7pgenlib_PgenReader *, PyArrayObject *, PyArrayObject *, struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal8 *__pyx_optional_args);
  PyObject *(*read_list_internal32)(struct __pyx_obj_7pgenlib_PgenReader *, PyArrayObject *, PyArrayObject *, struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal32 *__pyx_optional_args);
  PyObject *(*read_list_internal64)(struct __pyx_obj_7pgenlib_PgenReader *, PyArrayObject *, PyArrayObject *, struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal64 *__pyx_optional_args);
  PyObject *(*read_list)(struct __pyx_obj_7pgenlib_PgenReader *, PyArrayObject *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_list *__pyx_optional_args);
  PyObject *(*read_alleles_range)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, uint32_t, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_range *__pyx_optional_args);
  PyObject *(*read_alleles_list)(struct __pyx_obj_7pgenlib_PgenReader *, PyArrayObject *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_list *__pyx_optional_args);
  PyObject *(*read_alleles_and_phasepresent_range)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, uint32_t, PyArrayObject *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_and_phasepresent_range *__pyx_optional_args);
  PyObject *(*read_alleles_and_phasepresent_list)(struct __pyx_obj_7pgenlib_PgenReader *, PyArrayObject *, PyArrayObject *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_and_phasepresent_list *__pyx_optional_args);
  PyObject *(*count)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_count *__pyx_optional_args);
  PyObject *(*change_sample_subset)(struct __pyx_obj_7pgenlib_PgenReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_change_sample_subset *__pyx_optional_args);
  PyObject *(*close)(struct __pyx_obj_7pgenlib_PgenReader *, int __pyx_skip_dispatch);
  PyObject *(*__pyx___exit__)(struct __pyx_obj_7pgenlib_PgenReader *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7pgenlib_PgenReader *__pyx_vtabptr_7pgenlib_PgenReader;


/* "pgenlib.pyx":1143
 *     bytes_to_bits_unsafe(boolbytes, sample_ct, bitarr)
 * 
 * cdef class PgenWriter:             # <<<<<<<<<<<<<<
 *     cdef st_pgen_writer_t* _state_ptr
 *     cdef uintptr_t* _nonref_flags
 */

struct __pyx_vtabstruct_7pgenlib_PgenWriter {
  PyObject *(*__pyx___enter__)(struct __pyx_obj_7pgenlib_PgenWriter *, int __pyx_skip_dispatch);
  PyObject *(*append_biallelic)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*append_alleles)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenWriter_append_alleles *__pyx_optional_args);
  PyObject *(*append_partially_phased)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*append_dosages_internal32)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *);
  PyObject *(*append_dosages_internal64)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *);
  PyObject *(*append_dosages)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*append_biallelic_batch)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*append_alleles_batch)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenWriter_append_alleles_batch *__pyx_optional_args);
  PyObject *(*append_partially_phased_batch)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*append_dosages_batch_internal32)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *);
  PyObject *(*append_dosages_batch_internal64)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *);
  PyObject *(*append_dosages_batch)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*close)(struct __pyx_obj_7pgenlib_PgenWriter *, int __pyx_skip_dispatch);
  PyObject *(*__pyx___exit__)(struct __pyx_obj_7pgenlib_PgenWriter *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7pgenlib_PgenWriter *__pyx_vtabptr_7pgenlib_PgenWriter;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrCContig1d(type, buf, i0, s0) ((type)buf + i0)
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static CYTHON_INLINE long __Pyx_div_long(long, long);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#define __Pyx_BufPtrCContig2d(type, buf, i0, s0, i1, s1) ((type)((char*)buf + i0 * s0) + i1)
static CYTHON_INLINE long __Pyx_mod_long(long, long);

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_uint32(npy_uint32 value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(plink2::pglerr_t value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_7pgenlib_10PgenReader_set_sample_subset_internal(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_sample_subset); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader___enter__(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_get_raw_sample_ct(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_get_variant_ct(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_hardcall_phase_present(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_geno_int_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_dosages(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_floatarr_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_dosages *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_alleles(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_allele_int32_out, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_alleles_and_phasepresent(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_allele_int32_out, PyArrayObject *__pyx_v_phasepresent_out, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_range_internal8(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx_start, uint32_t __pyx_v_variant_idx_end, PyArrayObject *__pyx_v_geno_int8_out, struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal8 *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_range_internal32(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx_start, uint32_t __pyx_v_variant_idx_end, PyArrayObject *__pyx_v_geno_int32_out, struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal32 *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_range_internal64(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx_start, uint32_t __pyx_v_variant_idx_end, PyArrayObject *__pyx_v_geno_int64_out, struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal64 *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_range(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx_start, uint32_t __pyx_v_variant_idx_end, PyArrayObject *__pyx_v_geno_int_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_range *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_list_internal8(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_variant_idxs, PyArrayObject *__pyx_v_geno_int8_out, struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal8 *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_list_internal32(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_variant_idxs, PyArrayObject *__pyx_v_geno_int32_out, struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal32 *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_list_internal64(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_variant_idxs, PyArrayObject *__pyx_v_geno_int64_out, struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal64 *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_list(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_variant_idxs, PyArrayObject *__pyx_v_geno_int_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_list *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_alleles_range(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx_start, uint32_t __pyx_v_variant_idx_end, PyArrayObject *__pyx_v_allele_int32_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_range *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_alleles_list(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_variant_idxs, PyArrayObject *__pyx_v_allele_int32_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_list *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_alleles_and_phasepresent_range(CYTHON_UNUSED struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, CYTHON_UNUSED uint32_t __pyx_v_variant_idx_start, CYTHON_UNUSED uint32_t __pyx_v_variant_idx_end, CYTHON_UNUSED PyArrayObject *__pyx_v_allele_int32_out, CYTHON_UNUSED PyArrayObject *__pyx_v_phasepresent_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_and_phasepresent_range *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_alleles_and_phasepresent_list(CYTHON_UNUSED struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, CYTHON_UNUSED PyArrayObject *__pyx_v_variant_idxs, CYTHON_UNUSED PyArrayObject *__pyx_v_allele_int32_out, CYTHON_UNUSED PyArrayObject *__pyx_v_phasepresent_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_and_phasepresent_list *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_count(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_genocount_uint32_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_count *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_change_sample_subset(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_change_sample_subset *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_close(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader___exit__(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter___enter__(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_biallelic(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_geno_int8, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_alleles(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_allele_int32, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenWriter_append_alleles *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_partially_phased(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_allele_int32, PyArrayObject *__pyx_v_phasepresent, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_dosages_internal32(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_floatarr); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_dosages_internal64(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_doublearr); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_dosages(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_floatarr, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_biallelic_batch(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_geno_int8_batch, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_alleles_batch(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_allele_int32_batch, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenWriter_append_alleles_batch *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_partially_phased_batch(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_allele_int32_batch, PyArrayObject *__pyx_v_phasepresent_batch, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_dosages_batch_internal32(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_floatarr_batch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_dosages_batch_internal64(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_doublearr_batch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_dosages_batch(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_floatarr_batch, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_close(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter___exit__(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'pgenlib' */
static PyTypeObject *__pyx_ptype_7pgenlib_PgenReader = 0;
static PyTypeObject *__pyx_ptype_7pgenlib_PgenWriter = 0;
static PyObject *__pyx_f_7pgenlib_bytes_to_bits_internal(PyArrayObject *, uint32_t, uintptr_t *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t = { "uint32_t", NULL, sizeof(__pyx_t_5numpy_uint32_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_uint32_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_uint32_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t = { "int32_t", NULL, sizeof(__pyx_t_5numpy_int32_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int32_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int32_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t = { "uint8_t", NULL, sizeof(__pyx_t_5numpy_uint8_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_uint8_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_uint8_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t = { "int8_t", NULL, sizeof(__pyx_t_5numpy_int8_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int8_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int8_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t = { "int64_t", NULL, sizeof(__pyx_t_5numpy_int64_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int64_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int64_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t = { "float32_t", NULL, sizeof(__pyx_t_5numpy_float32_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t = { "float64_t", NULL, sizeof(__pyx_t_5numpy_float64_t), { 0 }, 0, 'R', 0, 0 };
#define __Pyx_MODULE_NAME "pgenlib"
int __pyx_module_is_main_pgenlib = 0;

/* Implementation of 'pgenlib' */
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static char __pyx_k_B[] = "B";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_L[] = "L";
static char __pyx_k_O[] = "O";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_b[] = "b";
static char __pyx_k_d[] = "d";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_l[] = "l";
static char __pyx_k_q[] = "q";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k__7[] = ")";
static char __pyx_k__8[] = ", ";
static char __pyx_k_np[] = "np";
static char __pyx_k__15[] = ").";
static char __pyx_k_sys[] = "sys";
static char __pyx_k_exit[] = "__exit__";
static char __pyx_k_int8[] = "int8";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_only[] = "; only ";
static char __pyx_k_read[] = "read";
static char __pyx_k_size[] = "size";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_close[] = "close";
static char __pyx_k_count[] = "count";
static char __pyx_k_dtype[] = "dtype";
static char __pyx_k_enter[] = "__enter__";
static char __pyx_k_flags[] = "flags";
static char __pyx_k_int32[] = "int32";
static char __pyx_k_int64[] = "int64";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_range[] = "range";
static char __pyx_k_exc_tb[] = "exc_tb";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_exc_val[] = "exc_val";
static char __pyx_k_float32[] = "float32";
static char __pyx_k_float64[] = "float64";
static char __pyx_k_hap_maj[] = "hap_maj";
static char __pyx_k_in_file[] = " in file).";
static char __pyx_k_exc_type[] = "exc_type";
static char __pyx_k_filename[] = "filename";
static char __pyx_k_in_file_2[] = " in file)";
static char __pyx_k_read_list[] = "read_list";
static char __pyx_k_sample_ct[] = "sample_ct";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_all_phased[] = "all_phased";
static char __pyx_k_allele_idx[] = "allele_idx";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_read_error[] = "read() error ";
static char __pyx_k_read_range[] = "read_range";
static char __pyx_k_sample_maj[] = "sample_maj";
static char __pyx_k_variant_ct[] = "variant_ct";
static char __pyx_k_MemoryError[] = "MemoryError";
static char __pyx_k_count_error[] = "count() error ";
static char __pyx_k_variant_idx[] = "variant_idx";
static char __pyx_k_C_CONTIGUOUS[] = "C_CONTIGUOUS";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_allele_int32[] = "allele_int32";
static char __pyx_k_floatarr_out[] = "floatarr_out";
static char __pyx_k_geno_int_out[] = "geno_int_out";
static char __pyx_k_nonref_flags[] = "nonref_flags";
static char __pyx_k_phasepresent[] = "phasepresent";
static char __pyx_k_read_alleles[] = "read_alleles";
static char __pyx_k_read_dosages[] = "read_dosages";
static char __pyx_k_variant_idxs[] = "variant_idxs";
static char __pyx_k_raw_sample_ct[] = "raw_sample_ct";
static char __pyx_k_sample_subset[] = "sample_subset";
static char __pyx_k_append_alleles[] = "append_alleles";
static char __pyx_k_append_dosages[] = "append_dosages";
static char __pyx_k_dosage_present[] = "dosage_present";
static char __pyx_k_get_variant_ct[] = "get_variant_ct";
static char __pyx_k_pgl_init_error[] = "pgl_init() error ";
static char __pyx_k_read_list_error[] = "read_list() error ";
static char __pyx_k_variant_idx_end[] = "variant_idx_end";
static char __pyx_k_allele_int32_out[] = "allele_int32_out";
static char __pyx_k_append_biallelic[] = "append_biallelic";
static char __pyx_k_phasepresent_out[] = "phasepresent_out";
static char __pyx_k_read_range_error[] = "read_range() error ";
static char __pyx_k_get_raw_sample_ct[] = "get_raw_sample_ct";
static char __pyx_k_read_alleles_list[] = "read_alleles_list";
static char __pyx_k_variant_idx_start[] = "variant_idx_start";
static char __pyx_k_allele_idx_offsets[] = "allele_idx_offsets";
static char __pyx_k_allele_int32_batch[] = "allele_int32_batch";
static char __pyx_k_phasepresent_batch[] = "phasepresent_batch";
static char __pyx_k_read_alleles_error[] = "read_alleles() error ";
static char __pyx_k_read_alleles_range[] = "read_alleles_range";
static char __pyx_k_read_dosages_error[] = "read_dosages() error ";
static char __pyx_k_append_alleles_batch[] = "append_alleles_batch";
static char __pyx_k_append_alleles_error[] = "append_alleles() error ";
static char __pyx_k_append_dosages_batch[] = "append_dosages_batch";
static char __pyx_k_append_dosages_error[] = "append_dosages() error ";
static char __pyx_k_change_sample_subset[] = "change_sample_subset";
static char __pyx_k_dosage_phase_present[] = "dosage_phase_present";
static char __pyx_k_genocount_uint32_out[] = "genocount_uint32_out";
static char __pyx_k_append_biallelic_batch[] = "append_biallelic_batch";
static char __pyx_k_append_biallelic_error[] = "append_biallelic() error ";
static char __pyx_k_hardcall_phase_present[] = "hardcall_phase_present";
static char __pyx_k_spgw_init_phase1_error[] = "spgw_init_phase1() error ";
static char __pyx_k_variant_idxs_length_is[] = "; variant_idxs length is ";
static char __pyx_k_append_partially_phased[] = "append_partially_phased";
static char __pyx_k_read_alleles_list_error[] = "read_alleles_list() error ";
static char __pyx_k_read_alleles_range_error[] = "read_alleles_range() error ";
static char __pyx_k_append_alleles_batch_error[] = "append_alleles_batch() error ";
static char __pyx_k_append_dosages_batch_error[] = "append_dosages_batch() error ";
static char __pyx_k_read_variant_idx_too_large[] = "read() variant_idx too large (";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_0_based_sample_idx_too_large[] = "0-based sample idx too large (";
static char __pyx_k_append_biallelic_batch_error[] = "append_biallelic_batch() error ";
static char __pyx_k_append_partially_phased_batch[] = "append_partially_phased_batch";
static char __pyx_k_append_partially_phased_error[] = "append_partially_phased() error ";
static char __pyx_k_read_alleles_and_phasepresent[] = "read_alleles_and_phasepresent";
static char __pyx_k_current_sample_subset_has_size[] = "; current sample subset has size ";
static char __pyx_k_Invalid_read_geno_int_out_array[] = "Invalid read() geno_int_out array element type (int8, int32, or int64 expected).";
static char __pyx_k_Invalid_read_range_geno_int_out[] = "Invalid read_range() geno_int_out array element type (int8, int32, or int64 expected).";
static char __pyx_k_Sample_major_read_list_geno_int[] = "Sample-major read_list() geno_int_out buffer has too few rows (";
static char __pyx_k_Variant_major_read_alleles_list[] = "Variant-major read_alleles_list() allele_int32_out buffer has too few rows (";
static char __pyx_k_and_column_count_should_be_twic[] = ", and column count should be twice that)";
static char __pyx_k_and_row_count_should_be_twice_t[] = ", and row count should be twice that)";
static char __pyx_k_read_alleles_list_variant_index[] = "read_alleles_list() variant index too large (";
static char __pyx_k_unequal_to_initially_declared_v[] = ") unequal to initially declared value (";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_variant_idx_end_variant_idx_sta[] = "; (variant_idx_end - variant_idx_start) is ";
static char __pyx_k_Empty_sample_subset_is_not_curre[] = "Empty sample_subset is not currently permitted.";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_Haplotype_major_read_alleles_lis[] = "Haplotype-major read_alleles_list() allele_int32_out buffer has too few rows (";
static char __pyx_k_Haplotype_major_read_alleles_ran[] = "Haplotype-major read_alleles_range() allele_int32_out buffer has too few rows (";
static char __pyx_k_Invalid_append_dosages_batch_dos[] = "Invalid append_dosages_batch() dosage array element type (float32 or float64 expected).";
static char __pyx_k_Invalid_append_dosages_dosage_ar[] = "Invalid append_dosages() dosage array element type (float32 or float64 expected).";
static char __pyx_k_Invalid_arguments_for_PgenWriter[] = "Invalid arguments for PgenWriter constructor (dosage_phase_present true but dosage_present false).";
static char __pyx_k_Invalid_read_dosages_floatarr_ou[] = "Invalid read_dosages() floatarr_out array element type (float32 or float64 expected).";
static char __pyx_k_Invalid_read_list_geno_int_out_a[] = "Invalid read_list() geno_int_out array element type (int8, int32, or int64 expected).";
static char __pyx_k_Multiallelic_variants_aren_t_sup[] = "Multiallelic variants aren't supported by PgenWriter yet.";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_PgenWriter_close_called_when_num[] = "PgenWriter.close() called when number of written variants (";
static char __pyx_k_Sample_major_read_range_geno_int[] = "Sample-major read_range() geno_int_out buffer has too few rows (";
static char __pyx_k_Variant_major_read_alleles_range[] = "Variant-major read_alleles_range() allele_int32_out buffer has too few rows (";
static char __pyx_k_Variant_major_read_list_geno_int[] = "Variant-major read_list() geno_int_out buffer has too few rows (";
static char __pyx_k_Variant_major_read_range_geno_in[] = "Variant-major read_range() geno_int_out buffer has too few rows (";
static char __pyx_k_append_partially_phased_batch_er[] = "append_partially_phased_batch() error ";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_read_alleles_and_phasepresent_er[] = "read_alleles_and_phasepresent() error ";
static char __pyx_k_read_alleles_and_phasepresent_li[] = "read_alleles_and_phasepresent_list";
static char __pyx_k_read_alleles_and_phasepresent_ra[] = "read_alleles_and_phasepresent_range";
static char __pyx_k_read_alleles_and_phasepresent_va[] = "read_alleles_and_phasepresent() variant_idx too large (";
static char __pyx_k_read_alleles_range_variant_idx_e[] = "read_alleles_range() variant_idx_end too large (";
static char __pyx_k_read_alleles_range_variant_idx_s[] = "read_alleles_range() variant_idx_start >= variant_idx_end (";
static char __pyx_k_read_alleles_variant_idx_too_lar[] = "read_alleles() variant_idx too large (";
static char __pyx_k_read_dosages_requires_floatarr_o[] = "read_dosages() requires floatarr_out to be C-contiguous.";
static char __pyx_k_read_dosages_variant_idx_too_lar[] = "read_dosages() variant_idx too large (";
static char __pyx_k_read_list_variant_index_too_larg[] = "read_list() variant index too large (";
static char __pyx_k_read_range_variant_idx_end_too_l[] = "read_range() variant_idx_end too large (";
static char __pyx_k_read_range_variant_idx_start_var[] = "read_range() variant_idx_start >= variant_idx_end (";
static char __pyx_k_read_requires_geno_int_out_to_be[] = "read() requires geno_int_out to be C-contiguous.";
static char __pyx_k_sample_subset_is_not_in_strictly[] = "sample_subset is not in strictly increasing order.";
static char __pyx_k_Sample_major_read_list_geno_int_2[] = "Sample-major read_list() geno_int_out buffer has too few columns (";
static char __pyx_k_Variant_major_read_alleles_list_2[] = "Variant-major read_alleles_list() allele_int32_out buffer has too few columns (";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static char __pyx_k_Haplotype_major_read_alleles_lis_2[] = "Haplotype-major read_alleles_list() allele_int32_out buffer has too few columns (";
static char __pyx_k_Haplotype_major_read_alleles_ran_2[] = "Haplotype-major read_alleles_range() allele_int32_out buffer has too few columns (";
static char __pyx_k_Sample_major_read_range_geno_int_2[] = "Sample-major read_range() geno_int_out buffer has too few columns (";
static char __pyx_k_Variant_major_read_alleles_range_2[] = "Variant-major read_alleles_range() allele_int32_out buffer has too few columns (";
static char __pyx_k_Variant_major_read_list_geno_int_2[] = "Variant-major read_list() geno_int_out buffer has too few columns (";
static char __pyx_k_Variant_major_read_range_geno_in_2[] = "Variant-major read_range() geno_int_out buffer has too few columns (";
static PyObject *__pyx_kp_s_0_based_sample_idx_too_large;
static PyObject *__pyx_n_s_C_CONTIGUOUS;
static PyObject *__pyx_kp_s_Empty_sample_subset_is_not_curre;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_kp_s_Haplotype_major_read_alleles_lis;
static PyObject *__pyx_kp_s_Haplotype_major_read_alleles_lis_2;
static PyObject *__pyx_kp_s_Haplotype_major_read_alleles_ran;
static PyObject *__pyx_kp_s_Haplotype_major_read_alleles_ran_2;
static PyObject *__pyx_kp_s_Invalid_append_dosages_batch_dos;
static PyObject *__pyx_kp_s_Invalid_append_dosages_dosage_ar;
static PyObject *__pyx_kp_s_Invalid_arguments_for_PgenWriter;
static PyObject *__pyx_kp_s_Invalid_read_dosages_floatarr_ou;
static PyObject *__pyx_kp_s_Invalid_read_geno_int_out_array;
static PyObject *__pyx_kp_s_Invalid_read_list_geno_int_out_a;
static PyObject *__pyx_kp_s_Invalid_read_range_geno_int_out;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_Multiallelic_variants_aren_t_sup;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_kp_s_PgenWriter_close_called_when_num;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_s_Sample_major_read_list_geno_int;
static PyObject *__pyx_kp_s_Sample_major_read_list_geno_int_2;
static PyObject *__pyx_kp_s_Sample_major_read_range_geno_int;
static PyObject *__pyx_kp_s_Sample_major_read_range_geno_int_2;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s_Variant_major_read_alleles_list;
static PyObject *__pyx_kp_s_Variant_major_read_alleles_list_2;
static PyObject *__pyx_kp_s_Variant_major_read_alleles_range;
static PyObject *__pyx_kp_s_Variant_major_read_alleles_range_2;
static PyObject *__pyx_kp_s_Variant_major_read_list_geno_int;
static PyObject *__pyx_kp_s_Variant_major_read_list_geno_int_2;
static PyObject *__pyx_kp_s_Variant_major_read_range_geno_in;
static PyObject *__pyx_kp_s_Variant_major_read_range_geno_in_2;
static PyObject *__pyx_kp_s__15;
static PyObject *__pyx_kp_s__7;
static PyObject *__pyx_kp_s__8;
static PyObject *__pyx_n_s_all_phased;
static PyObject *__pyx_n_s_allele_idx;
static PyObject *__pyx_n_s_allele_idx_offsets;
static PyObject *__pyx_n_s_allele_int32;
static PyObject *__pyx_n_s_allele_int32_batch;
static PyObject *__pyx_n_s_allele_int32_out;
static PyObject *__pyx_kp_s_and_column_count_should_be_twic;
static PyObject *__pyx_kp_s_and_row_count_should_be_twice_t;
static PyObject *__pyx_n_s_append_alleles;
static PyObject *__pyx_n_s_append_alleles_batch;
static PyObject *__pyx_kp_s_append_alleles_batch_error;
static PyObject *__pyx_kp_s_append_alleles_error;
static PyObject *__pyx_n_s_append_biallelic;
static PyObject *__pyx_n_s_append_biallelic_batch;
static PyObject *__pyx_kp_s_append_biallelic_batch_error;
static PyObject *__pyx_kp_s_append_biallelic_error;
static PyObject *__pyx_n_s_append_dosages;
static PyObject *__pyx_n_s_append_dosages_batch;
static PyObject *__pyx_kp_s_append_dosages_batch_error;
static PyObject *__pyx_kp_s_append_dosages_error;
static PyObject *__pyx_n_s_append_partially_phased;
static PyObject *__pyx_n_s_append_partially_phased_batch;
static PyObject *__pyx_kp_s_append_partially_phased_batch_er;
static PyObject *__pyx_kp_s_append_partially_phased_error;
static PyObject *__pyx_n_s_change_sample_subset;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_kp_s_count_error;
static PyObject *__pyx_kp_s_current_sample_subset_has_size;
static PyObject *__pyx_n_s_dosage_phase_present;
static PyObject *__pyx_n_s_dosage_present;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_exc_tb;
static PyObject *__pyx_n_s_exc_type;
static PyObject *__pyx_n_s_exc_val;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_float32;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_floatarr_out;
static PyObject *__pyx_n_s_geno_int_out;
static PyObject *__pyx_n_s_genocount_uint32_out;
static PyObject *__pyx_n_s_get_raw_sample_ct;
static PyObject *__pyx_n_s_get_variant_ct;
static PyObject *__pyx_n_s_hap_maj;
static PyObject *__pyx_n_s_hardcall_phase_present;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_kp_s_in_file;
static PyObject *__pyx_kp_s_in_file_2;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_int64;
static PyObject *__pyx_n_s_int8;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_nonref_flags;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_only;
static PyObject *__pyx_kp_s_pgl_init_error;
static PyObject *__pyx_n_s_phasepresent;
static PyObject *__pyx_n_s_phasepresent_batch;
static PyObject *__pyx_n_s_phasepresent_out;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_raw_sample_ct;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_read_alleles;
static PyObject *__pyx_n_s_read_alleles_and_phasepresent;
static PyObject *__pyx_kp_s_read_alleles_and_phasepresent_er;
static PyObject *__pyx_n_s_read_alleles_and_phasepresent_li;
static PyObject *__pyx_n_s_read_alleles_and_phasepresent_ra;
static PyObject *__pyx_kp_s_read_alleles_and_phasepresent_va;
static PyObject *__pyx_kp_s_read_alleles_error;
static PyObject *__pyx_n_s_read_alleles_list;
static PyObject *__pyx_kp_s_read_alleles_list_error;
static PyObject *__pyx_kp_s_read_alleles_list_variant_index;
static PyObject *__pyx_n_s_read_alleles_range;
static PyObject *__pyx_kp_s_read_alleles_range_error;
static PyObject *__pyx_kp_s_read_alleles_range_variant_idx_e;
static PyObject *__pyx_kp_s_read_alleles_range_variant_idx_s;
static PyObject *__pyx_kp_s_read_alleles_variant_idx_too_lar;
static PyObject *__pyx_n_s_read_dosages;
static PyObject *__pyx_kp_s_read_dosages_error;
static PyObject *__pyx_kp_s_read_dosages_requires_floatarr_o;
static PyObject *__pyx_kp_s_read_dosages_variant_idx_too_lar;
static PyObject *__pyx_kp_s_read_error;
static PyObject *__pyx_n_s_read_list;
static PyObject *__pyx_kp_s_read_list_error;
static PyObject *__pyx_kp_s_read_list_variant_index_too_larg;
static PyObject *__pyx_n_s_read_range;
static PyObject *__pyx_kp_s_read_range_error;
static PyObject *__pyx_kp_s_read_range_variant_idx_end_too_l;
static PyObject *__pyx_kp_s_read_range_variant_idx_start_var;
static PyObject *__pyx_kp_s_read_requires_geno_int_out_to_be;
static PyObject *__pyx_kp_s_read_variant_idx_too_large;
static PyObject *__pyx_n_s_sample_ct;
static PyObject *__pyx_n_s_sample_maj;
static PyObject *__pyx_n_s_sample_subset;
static PyObject *__pyx_kp_s_sample_subset_is_not_in_strictly;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_kp_s_spgw_init_phase1_error;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_unequal_to_initially_declared_v;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_variant_ct;
static PyObject *__pyx_n_s_variant_idx;
static PyObject *__pyx_n_s_variant_idx_end;
static PyObject *__pyx_kp_s_variant_idx_end_variant_idx_sta;
static PyObject *__pyx_n_s_variant_idx_start;
static PyObject *__pyx_n_s_variant_idxs;
static PyObject *__pyx_kp_s_variant_idxs_length_is;
static int __pyx_pf_7pgenlib_10PgenReader___cinit__(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_raw_sample_ct, PyObject *__pyx_v_variant_ct, PyObject *__pyx_v_sample_subset); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_2__enter__(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_4get_raw_sample_ct(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_6get_variant_ct(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_8hardcall_phase_present(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_10read(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_geno_int_out, uint32_t __pyx_v_allele_idx); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_12read_dosages(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_floatarr_out, uint32_t __pyx_v_allele_idx); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_14read_alleles(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_allele_int32_out); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_16read_alleles_and_phasepresent(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_allele_int32_out, PyArrayObject *__pyx_v_phasepresent_out); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_18read_range(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx_start, uint32_t __pyx_v_variant_idx_end, PyArrayObject *__pyx_v_geno_int_out, uint32_t __pyx_v_allele_idx, int __pyx_v_sample_maj); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_20read_list(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_variant_idxs, PyArrayObject *__pyx_v_geno_int_out, uint32_t __pyx_v_allele_idx, int __pyx_v_sample_maj); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_22read_alleles_range(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx_start, uint32_t __pyx_v_variant_idx_end, PyArrayObject *__pyx_v_allele_int32_out, int __pyx_v_hap_maj); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_24read_alleles_list(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_variant_idxs, PyArrayObject *__pyx_v_allele_int32_out, int __pyx_v_hap_maj); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_26read_alleles_and_phasepresent_range(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx_start, uint32_t __pyx_v_variant_idx_end, PyArrayObject *__pyx_v_allele_int32_out, PyArrayObject *__pyx_v_phasepresent_out, int __pyx_v_hap_maj); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_28read_alleles_and_phasepresent_list(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_variant_idxs, PyArrayObject *__pyx_v_allele_int32_out, PyArrayObject *__pyx_v_phasepresent_out, int __pyx_v_hap_maj); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_30count(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_genocount_uint32_out, PyObject *__pyx_v_allele_idx); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_32change_sample_subset(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyObject *__pyx_v_sample_subset); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_34close(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenReader_36__exit__(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyObject *__pyx_v_exc_type, PyObject *__pyx_v_exc_val, PyObject *__pyx_v_exc_tb); /* proto */
static void __pyx_pf_7pgenlib_10PgenReader_38__dealloc__(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self); /* proto */
static int __pyx_pf_7pgenlib_10PgenWriter___cinit__(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyObject *__pyx_v_filename, uint32_t __pyx_v_sample_ct, uint32_t __pyx_v_variant_ct, PyObject *__pyx_v_nonref_flags, PyObject *__pyx_v_allele_idx_offsets, int __pyx_v_hardcall_phase_present, int __pyx_v_dosage_present, int __pyx_v_dosage_phase_present); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenWriter_2__enter__(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenWriter_4append_biallelic(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_geno_int8); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenWriter_6append_alleles(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_allele_int32, int __pyx_v_all_phased); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenWriter_8append_partially_phased(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_allele_int32, PyArrayObject *__pyx_v_phasepresent); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenWriter_10append_dosages(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_floatarr); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenWriter_12append_biallelic_batch(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_geno_int8_batch); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenWriter_14append_alleles_batch(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_allele_int32_batch, int __pyx_v_all_phased); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenWriter_16append_partially_phased_batch(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_allele_int32_batch, PyArrayObject *__pyx_v_phasepresent_batch); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenWriter_18append_dosages_batch(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_floatarr_batch); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenWriter_20close(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pgenlib_10PgenWriter_22__exit__(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyObject *__pyx_v_exc_type, PyObject *__pyx_v_exc_val, PyObject *__pyx_v_exc_tb); /* proto */
static void __pyx_pf_7pgenlib_10PgenWriter_24__dealloc__(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_7pgenlib_PgenReader(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7pgenlib_PgenWriter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;

/* "pgenlib.pyx":188
 *     cdef uintptr_t* _multivar_smaj_phasepresent_batch_buf
 * 
 *     cdef set_sample_subset_internal(self, np.ndarray[np.uint32_t,mode="c",ndim=1] sample_subset):             # <<<<<<<<<<<<<<
 *         cdef uint32_t raw_sample_ct = self._info_ptr[0].raw_sample_ct
 *         cdef uint32_t raw_sample_ctv = DIV_UP(raw_sample_ct, kBitsPerVec)
 */

static PyObject *__pyx_f_7pgenlib_10PgenReader_set_sample_subset_internal(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_sample_subset) {
  uint32_t __pyx_v_raw_sample_ct;
  uint32_t __pyx_v_raw_sample_ctv;
  uint32_t __pyx_v_raw_sample_ctaw;
  uintptr_t *__pyx_v_sample_include;
  uint32_t __pyx_v_subset_size;
  PyObject *__pyx_v_sample_uidx = 0;
  uint32_t __pyx_v_idx;
  PyObject *__pyx_v_next_uidx = 0;
  uint32_t __pyx_v_raw_sample_ctl;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sample_subset;
  __Pyx_Buffer __pyx_pybuffer_sample_subset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uintptr_t *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  uintptr_t __pyx_t_11;
  size_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_sample_subset_internal", 0);
  __pyx_pybuffer_sample_subset.pybuffer.buf = NULL;
  __pyx_pybuffer_sample_subset.refcount = 0;
  __pyx_pybuffernd_sample_subset.data = NULL;
  __pyx_pybuffernd_sample_subset.rcbuffer = &__pyx_pybuffer_sample_subset;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sample_subset.rcbuffer->pybuffer, (PyObject*)__pyx_v_sample_subset, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_sample_subset.diminfo[0].strides = __pyx_pybuffernd_sample_subset.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sample_subset.diminfo[0].shape = __pyx_pybuffernd_sample_subset.rcbuffer->pybuffer.shape[0];

  /* "pgenlib.pyx":189
 * 
 *     cdef set_sample_subset_internal(self, np.ndarray[np.uint32_t,mode="c",ndim=1] sample_subset):
 *         cdef uint32_t raw_sample_ct = self._info_ptr[0].raw_sample_ct             # <<<<<<<<<<<<<<
 *         cdef uint32_t raw_sample_ctv = DIV_UP(raw_sample_ct, kBitsPerVec)
 *         cdef uint32_t raw_sample_ctaw = raw_sample_ctv * kWordsPerVec
 */
  __pyx_t_1 = (__pyx_v_self->_info_ptr[0]).raw_sample_ct;
  __pyx_v_raw_sample_ct = __pyx_t_1;

  /* "pgenlib.pyx":190
 *     cdef set_sample_subset_internal(self, np.ndarray[np.uint32_t,mode="c",ndim=1] sample_subset):
 *         cdef uint32_t raw_sample_ct = self._info_ptr[0].raw_sample_ct
 *         cdef uint32_t raw_sample_ctv = DIV_UP(raw_sample_ct, kBitsPerVec)             # <<<<<<<<<<<<<<
 *         cdef uint32_t raw_sample_ctaw = raw_sample_ctv * kWordsPerVec
 *         cdef uintptr_t* sample_include = self._subset_include_vec
 */
  __pyx_v_raw_sample_ctv = DIV_UP(__pyx_v_raw_sample_ct, plink2::kBitsPerVec);

  /* "pgenlib.pyx":191
 *         cdef uint32_t raw_sample_ct = self._info_ptr[0].raw_sample_ct
 *         cdef uint32_t raw_sample_ctv = DIV_UP(raw_sample_ct, kBitsPerVec)
 *         cdef uint32_t raw_sample_ctaw = raw_sample_ctv * kWordsPerVec             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* sample_include = self._subset_include_vec
 *         fill_ulong_zero(raw_sample_ctaw, sample_include)
 */
  __pyx_v_raw_sample_ctaw = (__pyx_v_raw_sample_ctv * plink2::kWordsPerVec);

  /* "pgenlib.pyx":192
 *         cdef uint32_t raw_sample_ctv = DIV_UP(raw_sample_ct, kBitsPerVec)
 *         cdef uint32_t raw_sample_ctaw = raw_sample_ctv * kWordsPerVec
 *         cdef uintptr_t* sample_include = self._subset_include_vec             # <<<<<<<<<<<<<<
 *         fill_ulong_zero(raw_sample_ctaw, sample_include)
 *         cdef uint32_t subset_size = sample_subset.size
 */
  __pyx_t_2 = __pyx_v_self->_subset_include_vec;
  __pyx_v_sample_include = __pyx_t_2;

  /* "pgenlib.pyx":193
 *         cdef uint32_t raw_sample_ctaw = raw_sample_ctv * kWordsPerVec
 *         cdef uintptr_t* sample_include = self._subset_include_vec
 *         fill_ulong_zero(raw_sample_ctaw, sample_include)             # <<<<<<<<<<<<<<
 *         cdef uint32_t subset_size = sample_subset.size
 *         if subset_size == 0:
 */
  plink2::fill_ulong_zero(__pyx_v_raw_sample_ctaw, __pyx_v_sample_include);

  /* "pgenlib.pyx":194
 *         cdef uintptr_t* sample_include = self._subset_include_vec
 *         fill_ulong_zero(raw_sample_ctaw, sample_include)
 *         cdef uint32_t subset_size = sample_subset.size             # <<<<<<<<<<<<<<
 *         if subset_size == 0:
 *             raise RuntimeError("Empty sample_subset is not currently permitted.")
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_sample_subset), __pyx_n_s_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_t_3); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_subset_size = __pyx_t_1;

  /* "pgenlib.pyx":195
 *         fill_ulong_zero(raw_sample_ctaw, sample_include)
 *         cdef uint32_t subset_size = sample_subset.size
 *         if subset_size == 0:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Empty sample_subset is not currently permitted.")
 *         cdef sample_uidx = sample_subset[0]
 */
  __pyx_t_4 = ((__pyx_v_subset_size == 0) != 0);
  if (__pyx_t_4) {

    /* "pgenlib.pyx":196
 *         cdef uint32_t subset_size = sample_subset.size
 *         if subset_size == 0:
 *             raise RuntimeError("Empty sample_subset is not currently permitted.")             # <<<<<<<<<<<<<<
 *         cdef sample_uidx = sample_subset[0]
 *         cdef uint32_t idx = 0
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":195
 *         fill_ulong_zero(raw_sample_ctaw, sample_include)
 *         cdef uint32_t subset_size = sample_subset.size
 *         if subset_size == 0:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Empty sample_subset is not currently permitted.")
 *         cdef sample_uidx = sample_subset[0]
 */
  }

  /* "pgenlib.pyx":197
 *         if subset_size == 0:
 *             raise RuntimeError("Empty sample_subset is not currently permitted.")
 *         cdef sample_uidx = sample_subset[0]             # <<<<<<<<<<<<<<
 *         cdef uint32_t idx = 0
 *         cdef next_uidx
 */
  __pyx_t_5 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_5 < 0) {
    __pyx_t_5 += __pyx_pybuffernd_sample_subset.diminfo[0].shape;
    if (unlikely(__pyx_t_5 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_5 >= __pyx_pybuffernd_sample_subset.diminfo[0].shape)) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_3 = __Pyx_PyInt_From_npy_uint32((*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_sample_subset.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_sample_subset.diminfo[0].strides))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_sample_uidx = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pgenlib.pyx":198
 *             raise RuntimeError("Empty sample_subset is not currently permitted.")
 *         cdef sample_uidx = sample_subset[0]
 *         cdef uint32_t idx = 0             # <<<<<<<<<<<<<<
 *         cdef next_uidx
 *         while True:
 */
  __pyx_v_idx = 0;

  /* "pgenlib.pyx":200
 *         cdef uint32_t idx = 0
 *         cdef next_uidx
 *         while True:             # <<<<<<<<<<<<<<
 *             if sample_uidx >= raw_sample_ct:
 *                 raise RuntimeError("0-based sample idx too large (" + str(sample_uidx) + "; only " + str(raw_sample_ct) + " in file).")
 */
  while (1) {

    /* "pgenlib.pyx":201
 *         cdef next_uidx
 *         while True:
 *             if sample_uidx >= raw_sample_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("0-based sample idx too large (" + str(sample_uidx) + "; only " + str(raw_sample_ct) + " in file).")
 *             sample_include[sample_uidx / kBitsPerWord] |= k1LU << (sample_uidx % kBitsPerWord)
 */
    __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_raw_sample_ct); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_sample_uidx, __pyx_t_3, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_4) {

      /* "pgenlib.pyx":202
 *         while True:
 *             if sample_uidx >= raw_sample_ct:
 *                 raise RuntimeError("0-based sample idx too large (" + str(sample_uidx) + "; only " + str(raw_sample_ct) + " in file).")             # <<<<<<<<<<<<<<
 *             sample_include[sample_uidx / kBitsPerWord] |= k1LU << (sample_uidx % kBitsPerWord)
 *             idx += 1
 */
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_sample_uidx);
      __Pyx_GIVEREF(__pyx_v_sample_uidx);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_sample_uidx);
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s_0_based_sample_idx_too_large, __pyx_t_3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_7, __pyx_kp_s_only); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyInt_From_uint32_t(__pyx_v_raw_sample_ct); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Add(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_t_8, __pyx_kp_s_in_file); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":201
 *         cdef next_uidx
 *         while True:
 *             if sample_uidx >= raw_sample_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("0-based sample idx too large (" + str(sample_uidx) + "; only " + str(raw_sample_ct) + " in file).")
 *             sample_include[sample_uidx / kBitsPerWord] |= k1LU << (sample_uidx % kBitsPerWord)
 */
    }

    /* "pgenlib.pyx":203
 *             if sample_uidx >= raw_sample_ct:
 *                 raise RuntimeError("0-based sample idx too large (" + str(sample_uidx) + "; only " + str(raw_sample_ct) + " in file).")
 *             sample_include[sample_uidx / kBitsPerWord] |= k1LU << (sample_uidx % kBitsPerWord)             # <<<<<<<<<<<<<<
 *             idx += 1
 *             if idx == subset_size:
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(plink2::kBitsPerWord); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_v_sample_uidx, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_8); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyInt_FromSize_t((__pyx_v_sample_include[__pyx_t_9])); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyInt_From_int(plink2::k1LU); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyInt_From_int(plink2::kBitsPerWord); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = PyNumber_Remainder(__pyx_v_sample_uidx, __pyx_t_3); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Lshift(__pyx_t_7, __pyx_t_10); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = PyNumber_InPlaceOr(__pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_11 = __Pyx_PyInt_As_size_t(__pyx_t_10); if (unlikely((__pyx_t_11 == (uintptr_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_v_sample_include[__pyx_t_9]) = __pyx_t_11;

    /* "pgenlib.pyx":204
 *                 raise RuntimeError("0-based sample idx too large (" + str(sample_uidx) + "; only " + str(raw_sample_ct) + " in file).")
 *             sample_include[sample_uidx / kBitsPerWord] |= k1LU << (sample_uidx % kBitsPerWord)
 *             idx += 1             # <<<<<<<<<<<<<<
 *             if idx == subset_size:
 *                 break
 */
    __pyx_v_idx = (__pyx_v_idx + 1);

    /* "pgenlib.pyx":205
 *             sample_include[sample_uidx / kBitsPerWord] |= k1LU << (sample_uidx % kBitsPerWord)
 *             idx += 1
 *             if idx == subset_size:             # <<<<<<<<<<<<<<
 *                 break
 *             next_uidx = sample_subset[idx]
 */
    __pyx_t_4 = ((__pyx_v_idx == __pyx_v_subset_size) != 0);
    if (__pyx_t_4) {

      /* "pgenlib.pyx":206
 *             idx += 1
 *             if idx == subset_size:
 *                 break             # <<<<<<<<<<<<<<
 *             next_uidx = sample_subset[idx]
 * 
 */
      goto __pyx_L5_break;

      /* "pgenlib.pyx":205
 *             sample_include[sample_uidx / kBitsPerWord] |= k1LU << (sample_uidx % kBitsPerWord)
 *             idx += 1
 *             if idx == subset_size:             # <<<<<<<<<<<<<<
 *                 break
 *             next_uidx = sample_subset[idx]
 */
    }

    /* "pgenlib.pyx":207
 *             if idx == subset_size:
 *                 break
 *             next_uidx = sample_subset[idx]             # <<<<<<<<<<<<<<
 * 
 *             # prohibit this since it implies that the caller expects genotypes
 */
    __pyx_t_12 = __pyx_v_idx;
    __pyx_t_6 = -1;
    if (unlikely(__pyx_t_12 >= (size_t)__pyx_pybuffernd_sample_subset.diminfo[0].shape)) __pyx_t_6 = 0;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_10 = __Pyx_PyInt_From_npy_uint32((*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_sample_subset.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_sample_subset.diminfo[0].strides))); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_XDECREF_SET(__pyx_v_next_uidx, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "pgenlib.pyx":211
 *             # prohibit this since it implies that the caller expects genotypes
 *             # to be returned in a different order
 *             if next_uidx <= sample_uidx:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("sample_subset is not in strictly increasing order.")
 * 
 */
    __pyx_t_10 = PyObject_RichCompare(__pyx_v_next_uidx, __pyx_v_sample_uidx, Py_LE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (__pyx_t_4) {

      /* "pgenlib.pyx":212
 *             # to be returned in a different order
 *             if next_uidx <= sample_uidx:
 *                 raise RuntimeError("sample_subset is not in strictly increasing order.")             # <<<<<<<<<<<<<<
 * 
 *             sample_uidx = next_uidx
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":211
 *             # prohibit this since it implies that the caller expects genotypes
 *             # to be returned in a different order
 *             if next_uidx <= sample_uidx:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("sample_subset is not in strictly increasing order.")
 * 
 */
    }

    /* "pgenlib.pyx":214
 *                 raise RuntimeError("sample_subset is not in strictly increasing order.")
 * 
 *             sample_uidx = next_uidx             # <<<<<<<<<<<<<<
 * 
 *         fill_interleaved_mask_vec(sample_include, raw_sample_ctv, self._subset_include_interleaved_vec)
 */
    __Pyx_INCREF(__pyx_v_next_uidx);
    __Pyx_DECREF_SET(__pyx_v_sample_uidx, __pyx_v_next_uidx);
  }
  __pyx_L5_break:;

  /* "pgenlib.pyx":216
 *             sample_uidx = next_uidx
 * 
 *         fill_interleaved_mask_vec(sample_include, raw_sample_ctv, self._subset_include_interleaved_vec)             # <<<<<<<<<<<<<<
 * 
 *         cdef uint32_t raw_sample_ctl = DIV_UP(raw_sample_ct, kBitsPerWord)
 */
  plink2::fill_interleaved_mask_vec(__pyx_v_sample_include, __pyx_v_raw_sample_ctv, __pyx_v_self->_subset_include_interleaved_vec);

  /* "pgenlib.pyx":218
 *         fill_interleaved_mask_vec(sample_include, raw_sample_ctv, self._subset_include_interleaved_vec)
 * 
 *         cdef uint32_t raw_sample_ctl = DIV_UP(raw_sample_ct, kBitsPerWord)             # <<<<<<<<<<<<<<
 *         fill_cumulative_popcounts(sample_include, raw_sample_ctl, self._subset_cumulative_popcounts)
 * 
 */
  __pyx_v_raw_sample_ctl = DIV_UP(__pyx_v_raw_sample_ct, plink2::kBitsPerWord);

  /* "pgenlib.pyx":219
 * 
 *         cdef uint32_t raw_sample_ctl = DIV_UP(raw_sample_ct, kBitsPerWord)
 *         fill_cumulative_popcounts(sample_include, raw_sample_ctl, self._subset_cumulative_popcounts)             # <<<<<<<<<<<<<<
 * 
 *         self._subset_size = subset_size
 */
  plink2::fill_cumulative_popcounts(__pyx_v_sample_include, __pyx_v_raw_sample_ctl, __pyx_v_self->_subset_cumulative_popcounts);

  /* "pgenlib.pyx":221
 *         fill_cumulative_popcounts(sample_include, raw_sample_ctl, self._subset_cumulative_popcounts)
 * 
 *         self._subset_size = subset_size             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->_subset_size = __pyx_v_subset_size;

  /* "pgenlib.pyx":222
 * 
 *         self._subset_size = subset_size
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":188
 *     cdef uintptr_t* _multivar_smaj_phasepresent_batch_buf
 * 
 *     cdef set_sample_subset_internal(self, np.ndarray[np.uint32_t,mode="c",ndim=1] sample_subset):             # <<<<<<<<<<<<<<
 *         cdef uint32_t raw_sample_ct = self._info_ptr[0].raw_sample_ct
 *         cdef uint32_t raw_sample_ctv = DIV_UP(raw_sample_ct, kBitsPerVec)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sample_subset.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.set_sample_subset_internal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sample_subset.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_sample_uidx);
  __Pyx_XDECREF(__pyx_v_next_uidx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":225
 * 
 * 
 *     def __cinit__(self, bytes filename, object raw_sample_ct = None,             # <<<<<<<<<<<<<<
 *                   object variant_ct = None, object sample_subset = None):
 *         self._info_ptr = <pgen_file_info_t*>PyMem_Malloc(sizeof(pgen_file_info_t))
 */

/* Python wrapper */
static int __pyx_pw_7pgenlib_10PgenReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pgenlib_10PgenReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_raw_sample_ct = 0;
  PyObject *__pyx_v_variant_ct = 0;
  PyObject *__pyx_v_sample_subset = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_raw_sample_ct,&__pyx_n_s_variant_ct,&__pyx_n_s_sample_subset,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)Py_None);

    /* "pgenlib.pyx":226
 * 
 *     def __cinit__(self, bytes filename, object raw_sample_ct = None,
 *                   object variant_ct = None, object sample_subset = None):             # <<<<<<<<<<<<<<
 *         self._info_ptr = <pgen_file_info_t*>PyMem_Malloc(sizeof(pgen_file_info_t))
 *         if not self._info_ptr:
 */
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_raw_sample_ct);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variant_ct);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sample_subset);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = ((PyObject*)values[0]);
    __pyx_v_raw_sample_ct = values[1];
    __pyx_v_variant_ct = values[2];
    __pyx_v_sample_subset = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenReader.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyBytes_Type), 1, "filename", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader___cinit__(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self), __pyx_v_filename, __pyx_v_raw_sample_ct, __pyx_v_variant_ct, __pyx_v_sample_subset);

  /* "pgenlib.pyx":225
 * 
 * 
 *     def __cinit__(self, bytes filename, object raw_sample_ct = None,             # <<<<<<<<<<<<<<
 *                   object variant_ct = None, object sample_subset = None):
 *         self._info_ptr = <pgen_file_info_t*>PyMem_Malloc(sizeof(pgen_file_info_t))
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pgenlib_10PgenReader___cinit__(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_raw_sample_ct, PyObject *__pyx_v_variant_ct, PyObject *__pyx_v_sample_subset) {
  uint32_t __pyx_v_cur_sample_ct;
  uint32_t __pyx_v_cur_variant_ct;
  char const *__pyx_v_fname;
  plink2::pgen_header_ctrl_t __pyx_v_header_ctrl;
  uintptr_t __pyx_v_pgfi_alloc_cacheline_ct;
  char __pyx_v_errstr_buf[plink2::kPglErrstrBufBlen];
  uint32_t __pyx_v_file_sample_ct;
  unsigned char *__pyx_v_pgfi_alloc;
  uint32_t __pyx_v_max_vrec_width;
  uintptr_t __pyx_v_pgr_alloc_cacheline_ct;
  uintptr_t __pyx_v_pgr_alloc_main_byte_ct;
  uintptr_t __pyx_v_sample_subset_byte_ct;
  uintptr_t __pyx_v_cumulative_popcounts_byte_ct;
  uintptr_t __pyx_v_genovec_byte_ct;
  uintptr_t __pyx_v_dosage_vals_byte_ct;
  unsigned char *__pyx_v_pgr_alloc;
  plink2::pglerr_t __pyx_v_reterr;
  unsigned char *__pyx_v_pgr_alloc_iter;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  uint32_t __pyx_t_3;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  plink2::pglerr_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pgenlib.pyx":227
 *     def __cinit__(self, bytes filename, object raw_sample_ct = None,
 *                   object variant_ct = None, object sample_subset = None):
 *         self._info_ptr = <pgen_file_info_t*>PyMem_Malloc(sizeof(pgen_file_info_t))             # <<<<<<<<<<<<<<
 *         if not self._info_ptr:
 *             raise MemoryError()
 */
  __pyx_v_self->_info_ptr = ((plink2::pgen_file_info_t *)PyMem_Malloc((sizeof(plink2::pgen_file_info_t))));

  /* "pgenlib.pyx":228
 *                   object variant_ct = None, object sample_subset = None):
 *         self._info_ptr = <pgen_file_info_t*>PyMem_Malloc(sizeof(pgen_file_info_t))
 *         if not self._info_ptr:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         pgfi_preinit(self._info_ptr)
 */
  __pyx_t_1 = ((!(__pyx_v_self->_info_ptr != 0)) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":229
 *         self._info_ptr = <pgen_file_info_t*>PyMem_Malloc(sizeof(pgen_file_info_t))
 *         if not self._info_ptr:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         pgfi_preinit(self._info_ptr)
 *         # this depends on pgenlib_internal implementation.  could save
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":228
 *                   object variant_ct = None, object sample_subset = None):
 *         self._info_ptr = <pgen_file_info_t*>PyMem_Malloc(sizeof(pgen_file_info_t))
 *         if not self._info_ptr:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         pgfi_preinit(self._info_ptr)
 */
  }

  /* "pgenlib.pyx":230
 *         if not self._info_ptr:
 *             raise MemoryError()
 *         pgfi_preinit(self._info_ptr)             # <<<<<<<<<<<<<<
 *         # this depends on pgenlib_internal implementation.  could save
 *         # pgfi_alloc and pgr_alloc instead.
 */
  plink2::pgfi_preinit(__pyx_v_self->_info_ptr);

  /* "pgenlib.pyx":233
 *         # this depends on pgenlib_internal implementation.  could save
 *         # pgfi_alloc and pgr_alloc instead.
 *         self._info_ptr[0].vrtypes = NULL             # <<<<<<<<<<<<<<
 *         cdef uint32_t cur_sample_ct = 0xffffffffU
 *         if raw_sample_ct is not None:
 */
  (__pyx_v_self->_info_ptr[0]).vrtypes = NULL;

  /* "pgenlib.pyx":234
 *         # pgfi_alloc and pgr_alloc instead.
 *         self._info_ptr[0].vrtypes = NULL
 *         cdef uint32_t cur_sample_ct = 0xffffffffU             # <<<<<<<<<<<<<<
 *         if raw_sample_ct is not None:
 *             cur_sample_ct = raw_sample_ct
 */
  __pyx_v_cur_sample_ct = 0xffffffffU;

  /* "pgenlib.pyx":235
 *         self._info_ptr[0].vrtypes = NULL
 *         cdef uint32_t cur_sample_ct = 0xffffffffU
 *         if raw_sample_ct is not None:             # <<<<<<<<<<<<<<
 *             cur_sample_ct = raw_sample_ct
 *         cdef uint32_t cur_variant_ct = 0xffffffffU
 */
  __pyx_t_1 = (__pyx_v_raw_sample_ct != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pgenlib.pyx":236
 *         cdef uint32_t cur_sample_ct = 0xffffffffU
 *         if raw_sample_ct is not None:
 *             cur_sample_ct = raw_sample_ct             # <<<<<<<<<<<<<<
 *         cdef uint32_t cur_variant_ct = 0xffffffffU
 *         if variant_ct is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_As_uint32_t(__pyx_v_raw_sample_ct); if (unlikely((__pyx_t_3 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_cur_sample_ct = __pyx_t_3;

    /* "pgenlib.pyx":235
 *         self._info_ptr[0].vrtypes = NULL
 *         cdef uint32_t cur_sample_ct = 0xffffffffU
 *         if raw_sample_ct is not None:             # <<<<<<<<<<<<<<
 *             cur_sample_ct = raw_sample_ct
 *         cdef uint32_t cur_variant_ct = 0xffffffffU
 */
  }

  /* "pgenlib.pyx":237
 *         if raw_sample_ct is not None:
 *             cur_sample_ct = raw_sample_ct
 *         cdef uint32_t cur_variant_ct = 0xffffffffU             # <<<<<<<<<<<<<<
 *         if variant_ct is not None:
 *             cur_variant_ct = variant_ct
 */
  __pyx_v_cur_variant_ct = 0xffffffffU;

  /* "pgenlib.pyx":238
 *             cur_sample_ct = raw_sample_ct
 *         cdef uint32_t cur_variant_ct = 0xffffffffU
 *         if variant_ct is not None:             # <<<<<<<<<<<<<<
 *             cur_variant_ct = variant_ct
 *         cdef const char* fname = <const char*>filename
 */
  __pyx_t_2 = (__pyx_v_variant_ct != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":239
 *         cdef uint32_t cur_variant_ct = 0xffffffffU
 *         if variant_ct is not None:
 *             cur_variant_ct = variant_ct             # <<<<<<<<<<<<<<
 *         cdef const char* fname = <const char*>filename
 *         cdef pgen_header_ctrl_t header_ctrl
 */
    __pyx_t_3 = __Pyx_PyInt_As_uint32_t(__pyx_v_variant_ct); if (unlikely((__pyx_t_3 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_cur_variant_ct = __pyx_t_3;

    /* "pgenlib.pyx":238
 *             cur_sample_ct = raw_sample_ct
 *         cdef uint32_t cur_variant_ct = 0xffffffffU
 *         if variant_ct is not None:             # <<<<<<<<<<<<<<
 *             cur_variant_ct = variant_ct
 *         cdef const char* fname = <const char*>filename
 */
  }

  /* "pgenlib.pyx":240
 *         if variant_ct is not None:
 *             cur_variant_ct = variant_ct
 *         cdef const char* fname = <const char*>filename             # <<<<<<<<<<<<<<
 *         cdef pgen_header_ctrl_t header_ctrl
 *         cdef uintptr_t pgfi_alloc_cacheline_ct
 */
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_fname = ((char const *)__pyx_t_4);

  /* "pgenlib.pyx":244
 *         cdef uintptr_t pgfi_alloc_cacheline_ct
 *         cdef char errstr_buf[kPglErrstrBufBlen]
 *         if pgfi_init_phase1(fname, cur_variant_ct, cur_sample_ct, 0, &header_ctrl, self._info_ptr, &pgfi_alloc_cacheline_ct, errstr_buf) != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(errstr_buf[7:])
 *         assert (header_ctrl & 0x30) == 0 # no alt allele counts
 */
  __pyx_t_1 = ((plink2::pgfi_init_phase1(__pyx_v_fname, __pyx_v_cur_variant_ct, __pyx_v_cur_sample_ct, 0, (&__pyx_v_header_ctrl), __pyx_v_self->_info_ptr, (&__pyx_v_pgfi_alloc_cacheline_ct), __pyx_v_errstr_buf) != plink2::kPglRetSuccess) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":245
 *         cdef char errstr_buf[kPglErrstrBufBlen]
 *         if pgfi_init_phase1(fname, cur_variant_ct, cur_sample_ct, 0, &header_ctrl, self._info_ptr, &pgfi_alloc_cacheline_ct, errstr_buf) != kPglRetSuccess:
 *             raise RuntimeError(errstr_buf[7:])             # <<<<<<<<<<<<<<
 *         assert (header_ctrl & 0x30) == 0 # no alt allele counts
 *         assert (header_ctrl & 0xc0) != 0xc0 # no explicit nonref_flags
 */
    __pyx_t_5 = __Pyx_PyBytes_FromString(((const char*)__pyx_v_errstr_buf) + 7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":244
 *         cdef uintptr_t pgfi_alloc_cacheline_ct
 *         cdef char errstr_buf[kPglErrstrBufBlen]
 *         if pgfi_init_phase1(fname, cur_variant_ct, cur_sample_ct, 0, &header_ctrl, self._info_ptr, &pgfi_alloc_cacheline_ct, errstr_buf) != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(errstr_buf[7:])
 *         assert (header_ctrl & 0x30) == 0 # no alt allele counts
 */
  }

  /* "pgenlib.pyx":246
 *         if pgfi_init_phase1(fname, cur_variant_ct, cur_sample_ct, 0, &header_ctrl, self._info_ptr, &pgfi_alloc_cacheline_ct, errstr_buf) != kPglRetSuccess:
 *             raise RuntimeError(errstr_buf[7:])
 *         assert (header_ctrl & 0x30) == 0 # no alt allele counts             # <<<<<<<<<<<<<<
 *         assert (header_ctrl & 0xc0) != 0xc0 # no explicit nonref_flags
 *         cdef uint32_t file_sample_ct = self._info_ptr[0].raw_sample_ct
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_header_ctrl & 0x30) == 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "pgenlib.pyx":247
 *             raise RuntimeError(errstr_buf[7:])
 *         assert (header_ctrl & 0x30) == 0 # no alt allele counts
 *         assert (header_ctrl & 0xc0) != 0xc0 # no explicit nonref_flags             # <<<<<<<<<<<<<<
 *         cdef uint32_t file_sample_ct = self._info_ptr[0].raw_sample_ct
 *         assert file_sample_ct != 0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_header_ctrl & 0xc0) != 0xc0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "pgenlib.pyx":248
 *         assert (header_ctrl & 0x30) == 0 # no alt allele counts
 *         assert (header_ctrl & 0xc0) != 0xc0 # no explicit nonref_flags
 *         cdef uint32_t file_sample_ct = self._info_ptr[0].raw_sample_ct             # <<<<<<<<<<<<<<
 *         assert file_sample_ct != 0
 *         cdef unsigned char* pgfi_alloc = NULL
 */
  __pyx_t_3 = (__pyx_v_self->_info_ptr[0]).raw_sample_ct;
  __pyx_v_file_sample_ct = __pyx_t_3;

  /* "pgenlib.pyx":249
 *         assert (header_ctrl & 0xc0) != 0xc0 # no explicit nonref_flags
 *         cdef uint32_t file_sample_ct = self._info_ptr[0].raw_sample_ct
 *         assert file_sample_ct != 0             # <<<<<<<<<<<<<<
 *         cdef unsigned char* pgfi_alloc = NULL
 *         if pgfi_alloc_cacheline_ct != 0:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_file_sample_ct != 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "pgenlib.pyx":250
 *         cdef uint32_t file_sample_ct = self._info_ptr[0].raw_sample_ct
 *         assert file_sample_ct != 0
 *         cdef unsigned char* pgfi_alloc = NULL             # <<<<<<<<<<<<<<
 *         if pgfi_alloc_cacheline_ct != 0:
 *             if cachealigned_malloc(pgfi_alloc_cacheline_ct * kCacheline, &pgfi_alloc):
 */
  __pyx_v_pgfi_alloc = NULL;

  /* "pgenlib.pyx":251
 *         assert file_sample_ct != 0
 *         cdef unsigned char* pgfi_alloc = NULL
 *         if pgfi_alloc_cacheline_ct != 0:             # <<<<<<<<<<<<<<
 *             if cachealigned_malloc(pgfi_alloc_cacheline_ct * kCacheline, &pgfi_alloc):
 *                 raise MemoryError()
 */
  __pyx_t_1 = ((__pyx_v_pgfi_alloc_cacheline_ct != 0) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":252
 *         cdef unsigned char* pgfi_alloc = NULL
 *         if pgfi_alloc_cacheline_ct != 0:
 *             if cachealigned_malloc(pgfi_alloc_cacheline_ct * kCacheline, &pgfi_alloc):             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *         cdef uint32_t max_vrec_width
 */
    __pyx_t_1 = (plink2::cachealigned_malloc((__pyx_v_pgfi_alloc_cacheline_ct * plink2::kCacheline), (&__pyx_v_pgfi_alloc)) != 0);
    if (__pyx_t_1) {

      /* "pgenlib.pyx":253
 *         if pgfi_alloc_cacheline_ct != 0:
 *             if cachealigned_malloc(pgfi_alloc_cacheline_ct * kCacheline, &pgfi_alloc):
 *                 raise MemoryError()             # <<<<<<<<<<<<<<
 *         cdef uint32_t max_vrec_width
 *         cdef uintptr_t pgr_alloc_cacheline_ct
 */
      PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":252
 *         cdef unsigned char* pgfi_alloc = NULL
 *         if pgfi_alloc_cacheline_ct != 0:
 *             if cachealigned_malloc(pgfi_alloc_cacheline_ct * kCacheline, &pgfi_alloc):             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *         cdef uint32_t max_vrec_width
 */
    }

    /* "pgenlib.pyx":251
 *         assert file_sample_ct != 0
 *         cdef unsigned char* pgfi_alloc = NULL
 *         if pgfi_alloc_cacheline_ct != 0:             # <<<<<<<<<<<<<<
 *             if cachealigned_malloc(pgfi_alloc_cacheline_ct * kCacheline, &pgfi_alloc):
 *                 raise MemoryError()
 */
  }

  /* "pgenlib.pyx":256
 *         cdef uint32_t max_vrec_width
 *         cdef uintptr_t pgr_alloc_cacheline_ct
 *         if pgfi_init_phase2(header_ctrl, 1, 1, 0, 0, self._info_ptr[0].raw_variant_ct, &max_vrec_width, self._info_ptr, pgfi_alloc, &pgr_alloc_cacheline_ct, errstr_buf):             # <<<<<<<<<<<<<<
 *             if pgfi_alloc and not self._info_ptr[0].vrtypes:
 *                 aligned_free(pgfi_alloc)
 */
  __pyx_t_7 = plink2::pgfi_init_phase2(__pyx_v_header_ctrl, 1, 1, 0, 0, (__pyx_v_self->_info_ptr[0]).raw_variant_ct, (&__pyx_v_max_vrec_width), __pyx_v_self->_info_ptr, __pyx_v_pgfi_alloc, (&__pyx_v_pgr_alloc_cacheline_ct), __pyx_v_errstr_buf);
  if (__pyx_t_7) {

    /* "pgenlib.pyx":257
 *         cdef uintptr_t pgr_alloc_cacheline_ct
 *         if pgfi_init_phase2(header_ctrl, 1, 1, 0, 0, self._info_ptr[0].raw_variant_ct, &max_vrec_width, self._info_ptr, pgfi_alloc, &pgr_alloc_cacheline_ct, errstr_buf):
 *             if pgfi_alloc and not self._info_ptr[0].vrtypes:             # <<<<<<<<<<<<<<
 *                 aligned_free(pgfi_alloc)
 *             raise RuntimeError(errstr_buf[7:])
 */
    __pyx_t_2 = (__pyx_v_pgfi_alloc != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = ((!((__pyx_v_self->_info_ptr[0]).vrtypes != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_1) {

      /* "pgenlib.pyx":258
 *         if pgfi_init_phase2(header_ctrl, 1, 1, 0, 0, self._info_ptr[0].raw_variant_ct, &max_vrec_width, self._info_ptr, pgfi_alloc, &pgr_alloc_cacheline_ct, errstr_buf):
 *             if pgfi_alloc and not self._info_ptr[0].vrtypes:
 *                 aligned_free(pgfi_alloc)             # <<<<<<<<<<<<<<
 *             raise RuntimeError(errstr_buf[7:])
 * 
 */
      plink2::aligned_free(__pyx_v_pgfi_alloc);

      /* "pgenlib.pyx":257
 *         cdef uintptr_t pgr_alloc_cacheline_ct
 *         if pgfi_init_phase2(header_ctrl, 1, 1, 0, 0, self._info_ptr[0].raw_variant_ct, &max_vrec_width, self._info_ptr, pgfi_alloc, &pgr_alloc_cacheline_ct, errstr_buf):
 *             if pgfi_alloc and not self._info_ptr[0].vrtypes:             # <<<<<<<<<<<<<<
 *                 aligned_free(pgfi_alloc)
 *             raise RuntimeError(errstr_buf[7:])
 */
    }

    /* "pgenlib.pyx":259
 *             if pgfi_alloc and not self._info_ptr[0].vrtypes:
 *                 aligned_free(pgfi_alloc)
 *             raise RuntimeError(errstr_buf[7:])             # <<<<<<<<<<<<<<
 * 
 *         self._state_ptr = <pgen_reader_t*>PyMem_Malloc(sizeof(pgen_reader_t))
 */
    __pyx_t_5 = __Pyx_PyBytes_FromString(((const char*)__pyx_v_errstr_buf) + 7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":256
 *         cdef uint32_t max_vrec_width
 *         cdef uintptr_t pgr_alloc_cacheline_ct
 *         if pgfi_init_phase2(header_ctrl, 1, 1, 0, 0, self._info_ptr[0].raw_variant_ct, &max_vrec_width, self._info_ptr, pgfi_alloc, &pgr_alloc_cacheline_ct, errstr_buf):             # <<<<<<<<<<<<<<
 *             if pgfi_alloc and not self._info_ptr[0].vrtypes:
 *                 aligned_free(pgfi_alloc)
 */
  }

  /* "pgenlib.pyx":261
 *             raise RuntimeError(errstr_buf[7:])
 * 
 *         self._state_ptr = <pgen_reader_t*>PyMem_Malloc(sizeof(pgen_reader_t))             # <<<<<<<<<<<<<<
 *         if not self._state_ptr:
 *             raise MemoryError()
 */
  __pyx_v_self->_state_ptr = ((plink2::pgen_reader_t *)PyMem_Malloc((sizeof(plink2::pgen_reader_t))));

  /* "pgenlib.pyx":262
 * 
 *         self._state_ptr = <pgen_reader_t*>PyMem_Malloc(sizeof(pgen_reader_t))
 *         if not self._state_ptr:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         pgr_preinit(self._state_ptr)
 */
  __pyx_t_1 = ((!(__pyx_v_self->_state_ptr != 0)) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":263
 *         self._state_ptr = <pgen_reader_t*>PyMem_Malloc(sizeof(pgen_reader_t))
 *         if not self._state_ptr:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         pgr_preinit(self._state_ptr)
 *         self._state_ptr[0].fread_buf = NULL
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":262
 * 
 *         self._state_ptr = <pgen_reader_t*>PyMem_Malloc(sizeof(pgen_reader_t))
 *         if not self._state_ptr:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         pgr_preinit(self._state_ptr)
 */
  }

  /* "pgenlib.pyx":264
 *         if not self._state_ptr:
 *             raise MemoryError()
 *         pgr_preinit(self._state_ptr)             # <<<<<<<<<<<<<<
 *         self._state_ptr[0].fread_buf = NULL
 *         cdef uintptr_t pgr_alloc_main_byte_ct = pgr_alloc_cacheline_ct * kCacheline
 */
  plink2::pgr_preinit(__pyx_v_self->_state_ptr);

  /* "pgenlib.pyx":265
 *             raise MemoryError()
 *         pgr_preinit(self._state_ptr)
 *         self._state_ptr[0].fread_buf = NULL             # <<<<<<<<<<<<<<
 *         cdef uintptr_t pgr_alloc_main_byte_ct = pgr_alloc_cacheline_ct * kCacheline
 *         cdef uintptr_t sample_subset_byte_ct = DIV_UP(file_sample_ct, kBitsPerVec) * kBytesPerVec
 */
  (__pyx_v_self->_state_ptr[0]).fread_buf = NULL;

  /* "pgenlib.pyx":266
 *         pgr_preinit(self._state_ptr)
 *         self._state_ptr[0].fread_buf = NULL
 *         cdef uintptr_t pgr_alloc_main_byte_ct = pgr_alloc_cacheline_ct * kCacheline             # <<<<<<<<<<<<<<
 *         cdef uintptr_t sample_subset_byte_ct = DIV_UP(file_sample_ct, kBitsPerVec) * kBytesPerVec
 *         cdef uintptr_t cumulative_popcounts_byte_ct = DIV_UP(file_sample_ct, kBitsPerWord * kInt32PerVec) * kBytesPerVec
 */
  __pyx_v_pgr_alloc_main_byte_ct = (__pyx_v_pgr_alloc_cacheline_ct * plink2::kCacheline);

  /* "pgenlib.pyx":267
 *         self._state_ptr[0].fread_buf = NULL
 *         cdef uintptr_t pgr_alloc_main_byte_ct = pgr_alloc_cacheline_ct * kCacheline
 *         cdef uintptr_t sample_subset_byte_ct = DIV_UP(file_sample_ct, kBitsPerVec) * kBytesPerVec             # <<<<<<<<<<<<<<
 *         cdef uintptr_t cumulative_popcounts_byte_ct = DIV_UP(file_sample_ct, kBitsPerWord * kInt32PerVec) * kBytesPerVec
 *         cdef uintptr_t genovec_byte_ct = DIV_UP(file_sample_ct, kQuatersPerVec) * kBytesPerVec
 */
  __pyx_v_sample_subset_byte_ct = (DIV_UP(__pyx_v_file_sample_ct, plink2::kBitsPerVec) * plink2::kBytesPerVec);

  /* "pgenlib.pyx":268
 *         cdef uintptr_t pgr_alloc_main_byte_ct = pgr_alloc_cacheline_ct * kCacheline
 *         cdef uintptr_t sample_subset_byte_ct = DIV_UP(file_sample_ct, kBitsPerVec) * kBytesPerVec
 *         cdef uintptr_t cumulative_popcounts_byte_ct = DIV_UP(file_sample_ct, kBitsPerWord * kInt32PerVec) * kBytesPerVec             # <<<<<<<<<<<<<<
 *         cdef uintptr_t genovec_byte_ct = DIV_UP(file_sample_ct, kQuatersPerVec) * kBytesPerVec
 *         cdef uintptr_t dosage_vals_byte_ct = DIV_UP(file_sample_ct, (2 * kInt32PerVec)) * kBytesPerVec
 */
  __pyx_v_cumulative_popcounts_byte_ct = (DIV_UP(__pyx_v_file_sample_ct, (plink2::kBitsPerWord * plink2::kInt32PerVec)) * plink2::kBytesPerVec);

  /* "pgenlib.pyx":269
 *         cdef uintptr_t sample_subset_byte_ct = DIV_UP(file_sample_ct, kBitsPerVec) * kBytesPerVec
 *         cdef uintptr_t cumulative_popcounts_byte_ct = DIV_UP(file_sample_ct, kBitsPerWord * kInt32PerVec) * kBytesPerVec
 *         cdef uintptr_t genovec_byte_ct = DIV_UP(file_sample_ct, kQuatersPerVec) * kBytesPerVec             # <<<<<<<<<<<<<<
 *         cdef uintptr_t dosage_vals_byte_ct = DIV_UP(file_sample_ct, (2 * kInt32PerVec)) * kBytesPerVec
 *         cdef unsigned char* pgr_alloc
 */
  __pyx_v_genovec_byte_ct = (DIV_UP(__pyx_v_file_sample_ct, plink2::kQuatersPerVec) * plink2::kBytesPerVec);

  /* "pgenlib.pyx":270
 *         cdef uintptr_t cumulative_popcounts_byte_ct = DIV_UP(file_sample_ct, kBitsPerWord * kInt32PerVec) * kBytesPerVec
 *         cdef uintptr_t genovec_byte_ct = DIV_UP(file_sample_ct, kQuatersPerVec) * kBytesPerVec
 *         cdef uintptr_t dosage_vals_byte_ct = DIV_UP(file_sample_ct, (2 * kInt32PerVec)) * kBytesPerVec             # <<<<<<<<<<<<<<
 *         cdef unsigned char* pgr_alloc
 *         if cachealigned_malloc(pgr_alloc_main_byte_ct + (2 * kPglQuaterTransposeBatch + 5) * sample_subset_byte_ct + cumulative_popcounts_byte_ct + (1 + kPglQuaterTransposeBatch) * genovec_byte_ct + dosage_vals_byte_ct + kPglBitTransposeBufbytes + 4 * (kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 8), &pgr_alloc):
 */
  __pyx_v_dosage_vals_byte_ct = (DIV_UP(__pyx_v_file_sample_ct, (2 * plink2::kInt32PerVec)) * plink2::kBytesPerVec);

  /* "pgenlib.pyx":272
 *         cdef uintptr_t dosage_vals_byte_ct = DIV_UP(file_sample_ct, (2 * kInt32PerVec)) * kBytesPerVec
 *         cdef unsigned char* pgr_alloc
 *         if cachealigned_malloc(pgr_alloc_main_byte_ct + (2 * kPglQuaterTransposeBatch + 5) * sample_subset_byte_ct + cumulative_popcounts_byte_ct + (1 + kPglQuaterTransposeBatch) * genovec_byte_ct + dosage_vals_byte_ct + kPglBitTransposeBufbytes + 4 * (kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 8), &pgr_alloc):             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         cdef pglerr_t reterr = pgr_init(fname, max_vrec_width, self._info_ptr, self._state_ptr, pgr_alloc)
 */
  __pyx_t_1 = (plink2::cachealigned_malloc(((((((__pyx_v_pgr_alloc_main_byte_ct + (((2 * plink2::kPglQuaterTransposeBatch) + 5) * __pyx_v_sample_subset_byte_ct)) + __pyx_v_cumulative_popcounts_byte_ct) + ((1 + plink2::kPglQuaterTransposeBatch) * __pyx_v_genovec_byte_ct)) + __pyx_v_dosage_vals_byte_ct) + plink2::kPglBitTransposeBufbytes) + (4 * __Pyx_div_long((plink2::kPglQuaterTransposeBatch * plink2::kPglQuaterTransposeBatch), 8))), (&__pyx_v_pgr_alloc)) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":273
 *         cdef unsigned char* pgr_alloc
 *         if cachealigned_malloc(pgr_alloc_main_byte_ct + (2 * kPglQuaterTransposeBatch + 5) * sample_subset_byte_ct + cumulative_popcounts_byte_ct + (1 + kPglQuaterTransposeBatch) * genovec_byte_ct + dosage_vals_byte_ct + kPglBitTransposeBufbytes + 4 * (kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 8), &pgr_alloc):
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         cdef pglerr_t reterr = pgr_init(fname, max_vrec_width, self._info_ptr, self._state_ptr, pgr_alloc)
 *         if reterr != kPglRetSuccess:
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":272
 *         cdef uintptr_t dosage_vals_byte_ct = DIV_UP(file_sample_ct, (2 * kInt32PerVec)) * kBytesPerVec
 *         cdef unsigned char* pgr_alloc
 *         if cachealigned_malloc(pgr_alloc_main_byte_ct + (2 * kPglQuaterTransposeBatch + 5) * sample_subset_byte_ct + cumulative_popcounts_byte_ct + (1 + kPglQuaterTransposeBatch) * genovec_byte_ct + dosage_vals_byte_ct + kPglBitTransposeBufbytes + 4 * (kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 8), &pgr_alloc):             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         cdef pglerr_t reterr = pgr_init(fname, max_vrec_width, self._info_ptr, self._state_ptr, pgr_alloc)
 */
  }

  /* "pgenlib.pyx":274
 *         if cachealigned_malloc(pgr_alloc_main_byte_ct + (2 * kPglQuaterTransposeBatch + 5) * sample_subset_byte_ct + cumulative_popcounts_byte_ct + (1 + kPglQuaterTransposeBatch) * genovec_byte_ct + dosage_vals_byte_ct + kPglBitTransposeBufbytes + 4 * (kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 8), &pgr_alloc):
 *             raise MemoryError()
 *         cdef pglerr_t reterr = pgr_init(fname, max_vrec_width, self._info_ptr, self._state_ptr, pgr_alloc)             # <<<<<<<<<<<<<<
 *         if reterr != kPglRetSuccess:
 *             if not self._state_ptr[0].fread_buf:
 */
  __pyx_v_reterr = plink2::pgr_init(__pyx_v_fname, __pyx_v_max_vrec_width, __pyx_v_self->_info_ptr, __pyx_v_self->_state_ptr, __pyx_v_pgr_alloc);

  /* "pgenlib.pyx":275
 *             raise MemoryError()
 *         cdef pglerr_t reterr = pgr_init(fname, max_vrec_width, self._info_ptr, self._state_ptr, pgr_alloc)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             if not self._state_ptr[0].fread_buf:
 *                 aligned_free(pgr_alloc)
 */
  __pyx_t_1 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":276
 *         cdef pglerr_t reterr = pgr_init(fname, max_vrec_width, self._info_ptr, self._state_ptr, pgr_alloc)
 *         if reterr != kPglRetSuccess:
 *             if not self._state_ptr[0].fread_buf:             # <<<<<<<<<<<<<<
 *                 aligned_free(pgr_alloc)
 *             raise RuntimeError("pgl_init() error " + str(reterr))
 */
    __pyx_t_1 = ((!((__pyx_v_self->_state_ptr[0]).fread_buf != 0)) != 0);
    if (__pyx_t_1) {

      /* "pgenlib.pyx":277
 *         if reterr != kPglRetSuccess:
 *             if not self._state_ptr[0].fread_buf:
 *                 aligned_free(pgr_alloc)             # <<<<<<<<<<<<<<
 *             raise RuntimeError("pgl_init() error " + str(reterr))
 *         cdef unsigned char* pgr_alloc_iter = &(pgr_alloc[pgr_alloc_main_byte_ct])
 */
      plink2::aligned_free(__pyx_v_pgr_alloc);

      /* "pgenlib.pyx":276
 *         cdef pglerr_t reterr = pgr_init(fname, max_vrec_width, self._info_ptr, self._state_ptr, pgr_alloc)
 *         if reterr != kPglRetSuccess:
 *             if not self._state_ptr[0].fread_buf:             # <<<<<<<<<<<<<<
 *                 aligned_free(pgr_alloc)
 *             raise RuntimeError("pgl_init() error " + str(reterr))
 */
    }

    /* "pgenlib.pyx":278
 *             if not self._state_ptr[0].fread_buf:
 *                 aligned_free(pgr_alloc)
 *             raise RuntimeError("pgl_init() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         cdef unsigned char* pgr_alloc_iter = &(pgr_alloc[pgr_alloc_main_byte_ct])
 *         self._subset_include_vec = <uintptr_t*>pgr_alloc_iter
 */
    __pyx_t_5 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_kp_s_pgl_init_error, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":275
 *             raise MemoryError()
 *         cdef pglerr_t reterr = pgr_init(fname, max_vrec_width, self._info_ptr, self._state_ptr, pgr_alloc)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             if not self._state_ptr[0].fread_buf:
 *                 aligned_free(pgr_alloc)
 */
  }

  /* "pgenlib.pyx":279
 *                 aligned_free(pgr_alloc)
 *             raise RuntimeError("pgl_init() error " + str(reterr))
 *         cdef unsigned char* pgr_alloc_iter = &(pgr_alloc[pgr_alloc_main_byte_ct])             # <<<<<<<<<<<<<<
 *         self._subset_include_vec = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 */
  __pyx_v_pgr_alloc_iter = (&(__pyx_v_pgr_alloc[__pyx_v_pgr_alloc_main_byte_ct]));

  /* "pgenlib.pyx":280
 *             raise RuntimeError("pgl_init() error " + str(reterr))
 *         cdef unsigned char* pgr_alloc_iter = &(pgr_alloc[pgr_alloc_main_byte_ct])
 *         self._subset_include_vec = <uintptr_t*>pgr_alloc_iter             # <<<<<<<<<<<<<<
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 *         self._subset_include_interleaved_vec = <uintptr_t*>pgr_alloc_iter
 */
  __pyx_v_self->_subset_include_vec = ((uintptr_t *)__pyx_v_pgr_alloc_iter);

  /* "pgenlib.pyx":281
 *         cdef unsigned char* pgr_alloc_iter = &(pgr_alloc[pgr_alloc_main_byte_ct])
 *         self._subset_include_vec = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])             # <<<<<<<<<<<<<<
 *         self._subset_include_interleaved_vec = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 */
  __pyx_v_pgr_alloc_iter = (&(__pyx_v_pgr_alloc_iter[__pyx_v_sample_subset_byte_ct]));

  /* "pgenlib.pyx":282
 *         self._subset_include_vec = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 *         self._subset_include_interleaved_vec = <uintptr_t*>pgr_alloc_iter             # <<<<<<<<<<<<<<
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 * 
 */
  __pyx_v_self->_subset_include_interleaved_vec = ((uintptr_t *)__pyx_v_pgr_alloc_iter);

  /* "pgenlib.pyx":283
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 *         self._subset_include_interleaved_vec = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])             # <<<<<<<<<<<<<<
 * 
 *         # assumes kWordsPerVec <= 2
 */
  __pyx_v_pgr_alloc_iter = (&(__pyx_v_pgr_alloc_iter[__pyx_v_sample_subset_byte_ct]));

  /* "pgenlib.pyx":286
 * 
 *         # assumes kWordsPerVec <= 2
 *         self._subset_include_interleaved_vec[-1] = 0             # <<<<<<<<<<<<<<
 * 
 *         self._subset_cumulative_popcounts = <uint32_t*>pgr_alloc_iter
 */
  (__pyx_v_self->_subset_include_interleaved_vec[-1L]) = 0;

  /* "pgenlib.pyx":288
 *         self._subset_include_interleaved_vec[-1] = 0
 * 
 *         self._subset_cumulative_popcounts = <uint32_t*>pgr_alloc_iter             # <<<<<<<<<<<<<<
 *         pgr_alloc_iter = &(pgr_alloc_iter[cumulative_popcounts_byte_ct])
 *         self._genovec = <uintptr_t*>pgr_alloc_iter
 */
  __pyx_v_self->_subset_cumulative_popcounts = ((uint32_t *)__pyx_v_pgr_alloc_iter);

  /* "pgenlib.pyx":289
 * 
 *         self._subset_cumulative_popcounts = <uint32_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[cumulative_popcounts_byte_ct])             # <<<<<<<<<<<<<<
 *         self._genovec = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[genovec_byte_ct])
 */
  __pyx_v_pgr_alloc_iter = (&(__pyx_v_pgr_alloc_iter[__pyx_v_cumulative_popcounts_byte_ct]));

  /* "pgenlib.pyx":290
 *         self._subset_cumulative_popcounts = <uint32_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[cumulative_popcounts_byte_ct])
 *         self._genovec = <uintptr_t*>pgr_alloc_iter             # <<<<<<<<<<<<<<
 *         pgr_alloc_iter = &(pgr_alloc_iter[genovec_byte_ct])
 *         self._phasepresent = <uintptr_t*>pgr_alloc_iter
 */
  __pyx_v_self->_genovec = ((uintptr_t *)__pyx_v_pgr_alloc_iter);

  /* "pgenlib.pyx":291
 *         pgr_alloc_iter = &(pgr_alloc_iter[cumulative_popcounts_byte_ct])
 *         self._genovec = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[genovec_byte_ct])             # <<<<<<<<<<<<<<
 *         self._phasepresent = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 */
  __pyx_v_pgr_alloc_iter = (&(__pyx_v_pgr_alloc_iter[__pyx_v_genovec_byte_ct]));

  /* "pgenlib.pyx":292
 *         self._genovec = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[genovec_byte_ct])
 *         self._phasepresent = <uintptr_t*>pgr_alloc_iter             # <<<<<<<<<<<<<<
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 *         self._phaseinfo = <uintptr_t*>pgr_alloc_iter
 */
  __pyx_v_self->_phasepresent = ((uintptr_t *)__pyx_v_pgr_alloc_iter);

  /* "pgenlib.pyx":293
 *         pgr_alloc_iter = &(pgr_alloc_iter[genovec_byte_ct])
 *         self._phasepresent = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])             # <<<<<<<<<<<<<<
 *         self._phaseinfo = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 */
  __pyx_v_pgr_alloc_iter = (&(__pyx_v_pgr_alloc_iter[__pyx_v_sample_subset_byte_ct]));

  /* "pgenlib.pyx":294
 *         self._phasepresent = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 *         self._phaseinfo = <uintptr_t*>pgr_alloc_iter             # <<<<<<<<<<<<<<
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 *         self._dosage_present = <uintptr_t*>pgr_alloc_iter
 */
  __pyx_v_self->_phaseinfo = ((uintptr_t *)__pyx_v_pgr_alloc_iter);

  /* "pgenlib.pyx":295
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 *         self._phaseinfo = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])             # <<<<<<<<<<<<<<
 *         self._dosage_present = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 */
  __pyx_v_pgr_alloc_iter = (&(__pyx_v_pgr_alloc_iter[__pyx_v_sample_subset_byte_ct]));

  /* "pgenlib.pyx":296
 *         self._phaseinfo = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 *         self._dosage_present = <uintptr_t*>pgr_alloc_iter             # <<<<<<<<<<<<<<
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 *         self._dosage_vals = <uint16_t*>pgr_alloc_iter
 */
  __pyx_v_self->_dosage_present = ((uintptr_t *)__pyx_v_pgr_alloc_iter);

  /* "pgenlib.pyx":297
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 *         self._dosage_present = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])             # <<<<<<<<<<<<<<
 *         self._dosage_vals = <uint16_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[dosage_vals_byte_ct])
 */
  __pyx_v_pgr_alloc_iter = (&(__pyx_v_pgr_alloc_iter[__pyx_v_sample_subset_byte_ct]));

  /* "pgenlib.pyx":298
 *         self._dosage_present = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 *         self._dosage_vals = <uint16_t*>pgr_alloc_iter             # <<<<<<<<<<<<<<
 *         pgr_alloc_iter = &(pgr_alloc_iter[dosage_vals_byte_ct])
 *         if sample_subset is not None:
 */
  __pyx_v_self->_dosage_vals = ((uint16_t *)__pyx_v_pgr_alloc_iter);

  /* "pgenlib.pyx":299
 *         pgr_alloc_iter = &(pgr_alloc_iter[sample_subset_byte_ct])
 *         self._dosage_vals = <uint16_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[dosage_vals_byte_ct])             # <<<<<<<<<<<<<<
 *         if sample_subset is not None:
 *             self.set_sample_subset_internal(sample_subset)
 */
  __pyx_v_pgr_alloc_iter = (&(__pyx_v_pgr_alloc_iter[__pyx_v_dosage_vals_byte_ct]));

  /* "pgenlib.pyx":300
 *         self._dosage_vals = <uint16_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[dosage_vals_byte_ct])
 *         if sample_subset is not None:             # <<<<<<<<<<<<<<
 *             self.set_sample_subset_internal(sample_subset)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_sample_subset != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pgenlib.pyx":301
 *         pgr_alloc_iter = &(pgr_alloc_iter[dosage_vals_byte_ct])
 *         if sample_subset is not None:
 *             self.set_sample_subset_internal(sample_subset)             # <<<<<<<<<<<<<<
 *         else:
 *             self._subset_size = file_sample_ct
 */
    if (!(likely(((__pyx_v_sample_subset) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_sample_subset, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = ((struct __pyx_vtabstruct_7pgenlib_PgenReader *)__pyx_v_self->__pyx_vtab)->set_sample_subset_internal(__pyx_v_self, ((PyArrayObject *)__pyx_v_sample_subset)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pgenlib.pyx":300
 *         self._dosage_vals = <uint16_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[dosage_vals_byte_ct])
 *         if sample_subset is not None:             # <<<<<<<<<<<<<<
 *             self.set_sample_subset_internal(sample_subset)
 *         else:
 */
    goto __pyx_L17;
  }

  /* "pgenlib.pyx":303
 *             self.set_sample_subset_internal(sample_subset)
 *         else:
 *             self._subset_size = file_sample_ct             # <<<<<<<<<<<<<<
 *         self._transpose_batch_buf = <vul_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglBitTransposeBufbytes])
 */
  /*else*/ {
    __pyx_v_self->_subset_size = __pyx_v_file_sample_ct;
  }
  __pyx_L17:;

  /* "pgenlib.pyx":304
 *         else:
 *             self._subset_size = file_sample_ct
 *         self._transpose_batch_buf = <vul_t*>pgr_alloc_iter             # <<<<<<<<<<<<<<
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglBitTransposeBufbytes])
 *         self._multivar_vmaj_geno_buf = <uintptr_t*>pgr_alloc_iter
 */
  __pyx_v_self->_transpose_batch_buf = ((plink2::vul_t *)__pyx_v_pgr_alloc_iter);

  /* "pgenlib.pyx":305
 *             self._subset_size = file_sample_ct
 *         self._transpose_batch_buf = <vul_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglBitTransposeBufbytes])             # <<<<<<<<<<<<<<
 *         self._multivar_vmaj_geno_buf = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * genovec_byte_ct])
 */
  __pyx_v_pgr_alloc_iter = (&(__pyx_v_pgr_alloc_iter[plink2::kPglBitTransposeBufbytes]));

  /* "pgenlib.pyx":306
 *         self._transpose_batch_buf = <vul_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglBitTransposeBufbytes])
 *         self._multivar_vmaj_geno_buf = <uintptr_t*>pgr_alloc_iter             # <<<<<<<<<<<<<<
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * genovec_byte_ct])
 *         self._multivar_vmaj_phasepresent_buf = <uintptr_t*>pgr_alloc_iter
 */
  __pyx_v_self->_multivar_vmaj_geno_buf = ((uintptr_t *)__pyx_v_pgr_alloc_iter);

  /* "pgenlib.pyx":307
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglBitTransposeBufbytes])
 *         self._multivar_vmaj_geno_buf = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * genovec_byte_ct])             # <<<<<<<<<<<<<<
 *         self._multivar_vmaj_phasepresent_buf = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * sample_subset_byte_ct])
 */
  __pyx_v_pgr_alloc_iter = (&(__pyx_v_pgr_alloc_iter[(plink2::kPglQuaterTransposeBatch * __pyx_v_genovec_byte_ct)]));

  /* "pgenlib.pyx":308
 *         self._multivar_vmaj_geno_buf = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * genovec_byte_ct])
 *         self._multivar_vmaj_phasepresent_buf = <uintptr_t*>pgr_alloc_iter             # <<<<<<<<<<<<<<
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * sample_subset_byte_ct])
 *         self._multivar_vmaj_phaseinfo_buf = <uintptr_t*>pgr_alloc_iter
 */
  __pyx_v_self->_multivar_vmaj_phasepresent_buf = ((uintptr_t *)__pyx_v_pgr_alloc_iter);

  /* "pgenlib.pyx":309
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * genovec_byte_ct])
 *         self._multivar_vmaj_phasepresent_buf = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * sample_subset_byte_ct])             # <<<<<<<<<<<<<<
 *         self._multivar_vmaj_phaseinfo_buf = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * sample_subset_byte_ct])
 */
  __pyx_v_pgr_alloc_iter = (&(__pyx_v_pgr_alloc_iter[(plink2::kPglQuaterTransposeBatch * __pyx_v_sample_subset_byte_ct)]));

  /* "pgenlib.pyx":310
 *         self._multivar_vmaj_phasepresent_buf = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * sample_subset_byte_ct])
 *         self._multivar_vmaj_phaseinfo_buf = <uintptr_t*>pgr_alloc_iter             # <<<<<<<<<<<<<<
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * sample_subset_byte_ct])
 *         self._multivar_smaj_geno_batch_buf = <uintptr_t*>pgr_alloc_iter
 */
  __pyx_v_self->_multivar_vmaj_phaseinfo_buf = ((uintptr_t *)__pyx_v_pgr_alloc_iter);

  /* "pgenlib.pyx":311
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * sample_subset_byte_ct])
 *         self._multivar_vmaj_phaseinfo_buf = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * sample_subset_byte_ct])             # <<<<<<<<<<<<<<
 *         self._multivar_smaj_geno_batch_buf = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 4])
 */
  __pyx_v_pgr_alloc_iter = (&(__pyx_v_pgr_alloc_iter[(plink2::kPglQuaterTransposeBatch * __pyx_v_sample_subset_byte_ct)]));

  /* "pgenlib.pyx":312
 *         self._multivar_vmaj_phaseinfo_buf = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * sample_subset_byte_ct])
 *         self._multivar_smaj_geno_batch_buf = <uintptr_t*>pgr_alloc_iter             # <<<<<<<<<<<<<<
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 4])
 *         self._multivar_smaj_phaseinfo_batch_buf = <uintptr_t*>pgr_alloc_iter
 */
  __pyx_v_self->_multivar_smaj_geno_batch_buf = ((uintptr_t *)__pyx_v_pgr_alloc_iter);

  /* "pgenlib.pyx":313
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * sample_subset_byte_ct])
 *         self._multivar_smaj_geno_batch_buf = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 4])             # <<<<<<<<<<<<<<
 *         self._multivar_smaj_phaseinfo_batch_buf = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 8])
 */
  __pyx_v_pgr_alloc_iter = (&(__pyx_v_pgr_alloc_iter[__Pyx_div_long((plink2::kPglQuaterTransposeBatch * plink2::kPglQuaterTransposeBatch), 4)]));

  /* "pgenlib.pyx":314
 *         self._multivar_smaj_geno_batch_buf = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 4])
 *         self._multivar_smaj_phaseinfo_batch_buf = <uintptr_t*>pgr_alloc_iter             # <<<<<<<<<<<<<<
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 8])
 *         self._multivar_smaj_phasepresent_batch_buf = <uintptr_t*>pgr_alloc_iter
 */
  __pyx_v_self->_multivar_smaj_phaseinfo_batch_buf = ((uintptr_t *)__pyx_v_pgr_alloc_iter);

  /* "pgenlib.pyx":315
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 4])
 *         self._multivar_smaj_phaseinfo_batch_buf = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 8])             # <<<<<<<<<<<<<<
 *         self._multivar_smaj_phasepresent_batch_buf = <uintptr_t*>pgr_alloc_iter
 *         # pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 8])
 */
  __pyx_v_pgr_alloc_iter = (&(__pyx_v_pgr_alloc_iter[__Pyx_div_long((plink2::kPglQuaterTransposeBatch * plink2::kPglQuaterTransposeBatch), 8)]));

  /* "pgenlib.pyx":316
 *         self._multivar_smaj_phaseinfo_batch_buf = <uintptr_t*>pgr_alloc_iter
 *         pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 8])
 *         self._multivar_smaj_phasepresent_batch_buf = <uintptr_t*>pgr_alloc_iter             # <<<<<<<<<<<<<<
 *         # pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 8])
 *         return
 */
  __pyx_v_self->_multivar_smaj_phasepresent_batch_buf = ((uintptr_t *)__pyx_v_pgr_alloc_iter);

  /* "pgenlib.pyx":318
 *         self._multivar_smaj_phasepresent_batch_buf = <uintptr_t*>pgr_alloc_iter
 *         # pgr_alloc_iter = &(pgr_alloc_iter[kPglQuaterTransposeBatch * kPglQuaterTransposeBatch / 8])
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "pgenlib.pyx":225
 * 
 * 
 *     def __cinit__(self, bytes filename, object raw_sample_ct = None,             # <<<<<<<<<<<<<<
 *                   object variant_ct = None, object sample_subset = None):
 *         self._info_ptr = <pgen_file_info_t*>PyMem_Malloc(sizeof(pgen_file_info_t))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pgenlib.PgenReader.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":321
 * 
 * 
 *     cpdef __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_3__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader___enter__(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__enter__", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_3__enter__)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":322
 * 
 *     cpdef __enter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pgenlib.pyx":321
 * 
 * 
 *     cpdef __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pgenlib.PgenReader.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_3__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_3__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_2__enter__(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_2__enter__(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__enter__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenReader___enter__(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pgenlib.PgenReader.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":325
 * 
 * 
 *     cpdef get_raw_sample_ct(self):             # <<<<<<<<<<<<<<
 *         return self._info_ptr[0].raw_sample_ct
 * 
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_5get_raw_sample_ct(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_get_raw_sample_ct(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_raw_sample_ct", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_raw_sample_ct); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_5get_raw_sample_ct)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":326
 * 
 *     cpdef get_raw_sample_ct(self):
 *         return self._info_ptr[0].raw_sample_ct             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t((__pyx_v_self->_info_ptr[0]).raw_sample_ct); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pgenlib.pyx":325
 * 
 * 
 *     cpdef get_raw_sample_ct(self):             # <<<<<<<<<<<<<<
 *         return self._info_ptr[0].raw_sample_ct
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pgenlib.PgenReader.get_raw_sample_ct", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_5get_raw_sample_ct(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_5get_raw_sample_ct(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_raw_sample_ct (wrapper)", 0);
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_4get_raw_sample_ct(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_4get_raw_sample_ct(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_raw_sample_ct", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenReader_get_raw_sample_ct(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pgenlib.PgenReader.get_raw_sample_ct", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":329
 * 
 * 
 *     cpdef get_variant_ct(self):             # <<<<<<<<<<<<<<
 *         return self._info_ptr[0].raw_variant_ct
 * 
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_7get_variant_ct(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_get_variant_ct(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_variant_ct", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_variant_ct); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_7get_variant_ct)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":330
 * 
 *     cpdef get_variant_ct(self):
 *         return self._info_ptr[0].raw_variant_ct             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t((__pyx_v_self->_info_ptr[0]).raw_variant_ct); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pgenlib.pyx":329
 * 
 * 
 *     cpdef get_variant_ct(self):             # <<<<<<<<<<<<<<
 *         return self._info_ptr[0].raw_variant_ct
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pgenlib.PgenReader.get_variant_ct", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_7get_variant_ct(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_7get_variant_ct(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_variant_ct (wrapper)", 0);
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_6get_variant_ct(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_6get_variant_ct(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_variant_ct", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenReader_get_variant_ct(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pgenlib.PgenReader.get_variant_ct", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":333
 * 
 * 
 *     cpdef hardcall_phase_present(self):             # <<<<<<<<<<<<<<
 *         return ((self._info_ptr[0].gflags & kfPgenGlobalHardcallPhasePresent) != 0)
 * 
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_9hardcall_phase_present(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_hardcall_phase_present(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hardcall_phase_present", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hardcall_phase_present); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_9hardcall_phase_present)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":334
 * 
 *     cpdef hardcall_phase_present(self):
 *         return ((self._info_ptr[0].gflags & kfPgenGlobalHardcallPhasePresent) != 0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((((__pyx_v_self->_info_ptr[0]).gflags & plink2::kfPgenGlobalHardcallPhasePresent) != 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pgenlib.pyx":333
 * 
 * 
 *     cpdef hardcall_phase_present(self):             # <<<<<<<<<<<<<<
 *         return ((self._info_ptr[0].gflags & kfPgenGlobalHardcallPhasePresent) != 0)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pgenlib.PgenReader.hardcall_phase_present", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_9hardcall_phase_present(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_9hardcall_phase_present(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hardcall_phase_present (wrapper)", 0);
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_8hardcall_phase_present(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_8hardcall_phase_present(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hardcall_phase_present", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenReader_hardcall_phase_present(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pgenlib.PgenReader.hardcall_phase_present", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":337
 * 
 * 
 *     cpdef read(self, uint32_t variant_idx, np.ndarray geno_int_out, uint32_t allele_idx = 1):             # <<<<<<<<<<<<<<
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:
 *             # could have an unsafe mode which doesn't perform this check, but
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_11read(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_geno_int_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read *__pyx_optional_args) {
  uint32_t __pyx_v_allele_idx = ((uint32_t)1);
  plink2::pglerr_t __pyx_v_reterr;
  int8_t *__pyx_v_data8_ptr;
  int32_t *__pyx_v_data32_ptr;
  int64_t *__pyx_v_data64_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_allele_idx = __pyx_optional_args->allele_idx;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_11read)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_allele_idx); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
      __Pyx_INCREF(((PyObject *)__pyx_v_geno_int_out));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_geno_int_out));
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, ((PyObject *)__pyx_v_geno_int_out));
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_t_4);
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":338
 * 
 *     cpdef read(self, uint32_t variant_idx, np.ndarray geno_int_out, uint32_t allele_idx = 1):
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:             # <<<<<<<<<<<<<<
 *             # could have an unsafe mode which doesn't perform this check, but
 *             # let's default to at least this much bounds-checking
 */
  __pyx_t_9 = ((__pyx_v_variant_idx >= (__pyx_v_self->_info_ptr[0]).raw_variant_ct) != 0);
  if (__pyx_t_9) {

    /* "pgenlib.pyx":341
 *             # could have an unsafe mode which doesn't perform this check, but
 *             # let's default to at least this much bounds-checking
 *             raise RuntimeError("read() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")             # <<<<<<<<<<<<<<
 *         if not geno_int_out.flags["C_CONTIGUOUS"]:
 *             raise RuntimeError("read() requires geno_int_out to be C-contiguous.")
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_read_variant_idx_too_large, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_only); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_uint32_t((__pyx_v_self->_info_ptr[0]).raw_variant_ct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_kp_s_in_file_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":338
 * 
 *     cpdef read(self, uint32_t variant_idx, np.ndarray geno_int_out, uint32_t allele_idx = 1):
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:             # <<<<<<<<<<<<<<
 *             # could have an unsafe mode which doesn't perform this check, but
 *             # let's default to at least this much bounds-checking
 */
  }

  /* "pgenlib.pyx":342
 *             # let's default to at least this much bounds-checking
 *             raise RuntimeError("read() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         if not geno_int_out.flags["C_CONTIGUOUS"]:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read() requires geno_int_out to be C-contiguous.")
 *         # for full genotype info for multiallelic variants, use read_phased()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_geno_int_out), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyObject_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_10 = ((!__pyx_t_9) != 0);
  if (__pyx_t_10) {

    /* "pgenlib.pyx":343
 *             raise RuntimeError("read() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         if not geno_int_out.flags["C_CONTIGUOUS"]:
 *             raise RuntimeError("read() requires geno_int_out to be C-contiguous.")             # <<<<<<<<<<<<<<
 *         # for full genotype info for multiallelic variants, use read_phased()
 *         # instead
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":342
 *             # let's default to at least this much bounds-checking
 *             raise RuntimeError("read() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         if not geno_int_out.flags["C_CONTIGUOUS"]:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read() requires geno_int_out to be C-contiguous.")
 *         # for full genotype info for multiallelic variants, use read_phased()
 */
  }

  /* "pgenlib.pyx":346
 *         # for full genotype info for multiallelic variants, use read_phased()
 *         # instead
 *         cdef pglerr_t reterr = pgr_read_allele_countvec_subset_unsafe(self._subset_include_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, allele_idx, self._state_ptr, self._genovec)             # <<<<<<<<<<<<<<
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("read() error " + str(reterr))
 */
  __pyx_v_reterr = plink2::pgr_read_allele_countvec_subset_unsafe(__pyx_v_self->_subset_include_vec, __pyx_v_self->_subset_cumulative_popcounts, __pyx_v_self->_subset_size, __pyx_v_variant_idx, __pyx_v_allele_idx, __pyx_v_self->_state_ptr, __pyx_v_self->_genovec);

  /* "pgenlib.pyx":347
 *         # instead
 *         cdef pglerr_t reterr = pgr_read_allele_countvec_subset_unsafe(self._subset_include_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, allele_idx, self._state_ptr, self._genovec)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read() error " + str(reterr))
 *         cdef int8_t* data8_ptr
 */
  __pyx_t_10 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
  if (__pyx_t_10) {

    /* "pgenlib.pyx":348
 *         cdef pglerr_t reterr = pgr_read_allele_countvec_subset_unsafe(self._subset_include_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, allele_idx, self._state_ptr, self._genovec)
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("read() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         cdef int8_t* data8_ptr
 *         cdef int32_t* data32_ptr
 */
    __pyx_t_5 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_read_error, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":347
 *         # instead
 *         cdef pglerr_t reterr = pgr_read_allele_countvec_subset_unsafe(self._subset_include_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, allele_idx, self._state_ptr, self._genovec)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read() error " + str(reterr))
 *         cdef int8_t* data8_ptr
 */
  }

  /* "pgenlib.pyx":352
 *         cdef int32_t* data32_ptr
 *         cdef int64_t* data64_ptr
 *         if geno_int_out.dtype == np.int8:             # <<<<<<<<<<<<<<
 *             data8_ptr = <int8_t*>geno_int_out.data
 *             genoarr_to_bytes_minus9(self._genovec, self._subset_size, data8_ptr)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_geno_int_out), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_10) {

    /* "pgenlib.pyx":353
 *         cdef int64_t* data64_ptr
 *         if geno_int_out.dtype == np.int8:
 *             data8_ptr = <int8_t*>geno_int_out.data             # <<<<<<<<<<<<<<
 *             genoarr_to_bytes_minus9(self._genovec, self._subset_size, data8_ptr)
 *         elif geno_int_out.dtype == np.int32:
 */
    __pyx_v_data8_ptr = ((int8_t *)__pyx_v_geno_int_out->data);

    /* "pgenlib.pyx":354
 *         if geno_int_out.dtype == np.int8:
 *             data8_ptr = <int8_t*>geno_int_out.data
 *             genoarr_to_bytes_minus9(self._genovec, self._subset_size, data8_ptr)             # <<<<<<<<<<<<<<
 *         elif geno_int_out.dtype == np.int32:
 *             data32_ptr = <int32_t*>geno_int_out.data
 */
    plink2::genoarr_to_bytes_minus9(__pyx_v_self->_genovec, __pyx_v_self->_subset_size, __pyx_v_data8_ptr);

    /* "pgenlib.pyx":352
 *         cdef int32_t* data32_ptr
 *         cdef int64_t* data64_ptr
 *         if geno_int_out.dtype == np.int8:             # <<<<<<<<<<<<<<
 *             data8_ptr = <int8_t*>geno_int_out.data
 *             genoarr_to_bytes_minus9(self._genovec, self._subset_size, data8_ptr)
 */
    goto __pyx_L6;
  }

  /* "pgenlib.pyx":355
 *             data8_ptr = <int8_t*>geno_int_out.data
 *             genoarr_to_bytes_minus9(self._genovec, self._subset_size, data8_ptr)
 *         elif geno_int_out.dtype == np.int32:             # <<<<<<<<<<<<<<
 *             data32_ptr = <int32_t*>geno_int_out.data
 *             genoarr_to_int32s_minus9(self._genovec, self._subset_size, data32_ptr)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_geno_int_out), __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int32); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_10) {

    /* "pgenlib.pyx":356
 *             genoarr_to_bytes_minus9(self._genovec, self._subset_size, data8_ptr)
 *         elif geno_int_out.dtype == np.int32:
 *             data32_ptr = <int32_t*>geno_int_out.data             # <<<<<<<<<<<<<<
 *             genoarr_to_int32s_minus9(self._genovec, self._subset_size, data32_ptr)
 *         elif geno_int_out.dtype == np.int64:
 */
    __pyx_v_data32_ptr = ((int32_t *)__pyx_v_geno_int_out->data);

    /* "pgenlib.pyx":357
 *         elif geno_int_out.dtype == np.int32:
 *             data32_ptr = <int32_t*>geno_int_out.data
 *             genoarr_to_int32s_minus9(self._genovec, self._subset_size, data32_ptr)             # <<<<<<<<<<<<<<
 *         elif geno_int_out.dtype == np.int64:
 *             data64_ptr = <int64_t*>geno_int_out.data
 */
    plink2::genoarr_to_int32s_minus9(__pyx_v_self->_genovec, __pyx_v_self->_subset_size, __pyx_v_data32_ptr);

    /* "pgenlib.pyx":355
 *             data8_ptr = <int8_t*>geno_int_out.data
 *             genoarr_to_bytes_minus9(self._genovec, self._subset_size, data8_ptr)
 *         elif geno_int_out.dtype == np.int32:             # <<<<<<<<<<<<<<
 *             data32_ptr = <int32_t*>geno_int_out.data
 *             genoarr_to_int32s_minus9(self._genovec, self._subset_size, data32_ptr)
 */
    goto __pyx_L6;
  }

  /* "pgenlib.pyx":358
 *             data32_ptr = <int32_t*>geno_int_out.data
 *             genoarr_to_int32s_minus9(self._genovec, self._subset_size, data32_ptr)
 *         elif geno_int_out.dtype == np.int64:             # <<<<<<<<<<<<<<
 *             data64_ptr = <int64_t*>geno_int_out.data
 *             genoarr_to_int64s_minus9(self._genovec, self._subset_size, data64_ptr)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_geno_int_out), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_10) {

    /* "pgenlib.pyx":359
 *             genoarr_to_int32s_minus9(self._genovec, self._subset_size, data32_ptr)
 *         elif geno_int_out.dtype == np.int64:
 *             data64_ptr = <int64_t*>geno_int_out.data             # <<<<<<<<<<<<<<
 *             genoarr_to_int64s_minus9(self._genovec, self._subset_size, data64_ptr)
 *         else:
 */
    __pyx_v_data64_ptr = ((int64_t *)__pyx_v_geno_int_out->data);

    /* "pgenlib.pyx":360
 *         elif geno_int_out.dtype == np.int64:
 *             data64_ptr = <int64_t*>geno_int_out.data
 *             genoarr_to_int64s_minus9(self._genovec, self._subset_size, data64_ptr)             # <<<<<<<<<<<<<<
 *         else:
 *             raise RuntimeError("Invalid read() geno_int_out array element type (int8, int32, or int64 expected).")
 */
    plink2::genoarr_to_int64s_minus9(__pyx_v_self->_genovec, __pyx_v_self->_subset_size, __pyx_v_data64_ptr);

    /* "pgenlib.pyx":358
 *             data32_ptr = <int32_t*>geno_int_out.data
 *             genoarr_to_int32s_minus9(self._genovec, self._subset_size, data32_ptr)
 *         elif geno_int_out.dtype == np.int64:             # <<<<<<<<<<<<<<
 *             data64_ptr = <int64_t*>geno_int_out.data
 *             genoarr_to_int64s_minus9(self._genovec, self._subset_size, data64_ptr)
 */
    goto __pyx_L6;
  }

  /* "pgenlib.pyx":362
 *             genoarr_to_int64s_minus9(self._genovec, self._subset_size, data64_ptr)
 *         else:
 *             raise RuntimeError("Invalid read() geno_int_out array element type (int8, int32, or int64 expected).")             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L6:;

  /* "pgenlib.pyx":363
 *         else:
 *             raise RuntimeError("Invalid read() geno_int_out array element type (int8, int32, or int64 expected).")
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":337
 * 
 * 
 *     cpdef read(self, uint32_t variant_idx, np.ndarray geno_int_out, uint32_t allele_idx = 1):             # <<<<<<<<<<<<<<
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:
 *             # could have an unsafe mode which doesn't perform this check, but
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pgenlib.PgenReader.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_11read(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_11read(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint32_t __pyx_v_variant_idx;
  PyArrayObject *__pyx_v_geno_int_out = 0;
  uint32_t __pyx_v_allele_idx;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variant_idx,&__pyx_n_s_geno_int_out,&__pyx_n_s_allele_idx,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variant_idx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_geno_int_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allele_idx);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_variant_idx = __Pyx_PyInt_As_uint32_t(values[0]); if (unlikely((__pyx_v_variant_idx == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_geno_int_out = ((PyArrayObject *)values[1]);
    if (values[2]) {
      __pyx_v_allele_idx = __Pyx_PyInt_As_uint32_t(values[2]); if (unlikely((__pyx_v_allele_idx == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_allele_idx = ((uint32_t)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenReader.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geno_int_out), __pyx_ptype_5numpy_ndarray, 1, "geno_int_out", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_10read(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self), __pyx_v_variant_idx, __pyx_v_geno_int_out, __pyx_v_allele_idx);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_10read(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_geno_int_out, uint32_t __pyx_v_allele_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_7pgenlib_10PgenReader_read __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.allele_idx = __pyx_v_allele_idx;
  __pyx_t_1 = __pyx_vtabptr_7pgenlib_PgenReader->read(__pyx_v_self, __pyx_v_variant_idx, __pyx_v_geno_int_out, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pgenlib.PgenReader.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":366
 * 
 * 
 *     cpdef read_dosages(self, uint32_t variant_idx, np.ndarray floatarr_out, uint32_t allele_idx = 1):             # <<<<<<<<<<<<<<
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_dosages() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_13read_dosages(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_dosages(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_floatarr_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_dosages *__pyx_optional_args) {
  uint32_t __pyx_v_allele_idx = ((uint32_t)1);
  uint32_t __pyx_v_dosage_ct;
  uint32_t __pyx_v_is_explicit_alt1;
  plink2::pglerr_t __pyx_v_reterr;
  float *__pyx_v_data32_ptr;
  double *__pyx_v_data64_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_dosages", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_allele_idx = __pyx_optional_args->allele_idx;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_dosages); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_13read_dosages)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_allele_idx); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
      __Pyx_INCREF(((PyObject *)__pyx_v_floatarr_out));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_floatarr_out));
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, ((PyObject *)__pyx_v_floatarr_out));
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_t_4);
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":367
 * 
 *     cpdef read_dosages(self, uint32_t variant_idx, np.ndarray floatarr_out, uint32_t allele_idx = 1):
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_dosages() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         if not floatarr_out.flags["C_CONTIGUOUS"]:
 */
  __pyx_t_9 = ((__pyx_v_variant_idx >= (__pyx_v_self->_info_ptr[0]).raw_variant_ct) != 0);
  if (__pyx_t_9) {

    /* "pgenlib.pyx":368
 *     cpdef read_dosages(self, uint32_t variant_idx, np.ndarray floatarr_out, uint32_t allele_idx = 1):
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_dosages() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")             # <<<<<<<<<<<<<<
 *         if not floatarr_out.flags["C_CONTIGUOUS"]:
 *             raise RuntimeError("read_dosages() requires floatarr_out to be C-contiguous.")
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_read_dosages_variant_idx_too_lar, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_only); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_uint32_t((__pyx_v_self->_info_ptr[0]).raw_variant_ct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_kp_s_in_file_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":367
 * 
 *     cpdef read_dosages(self, uint32_t variant_idx, np.ndarray floatarr_out, uint32_t allele_idx = 1):
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_dosages() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         if not floatarr_out.flags["C_CONTIGUOUS"]:
 */
  }

  /* "pgenlib.pyx":369
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_dosages() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         if not floatarr_out.flags["C_CONTIGUOUS"]:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_dosages() requires floatarr_out to be C-contiguous.")
 *         # todo: change this when pgenlib_internal supports multiallelic
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_floatarr_out), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyObject_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_10 = ((!__pyx_t_9) != 0);
  if (__pyx_t_10) {

    /* "pgenlib.pyx":370
 *             raise RuntimeError("read_dosages() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         if not floatarr_out.flags["C_CONTIGUOUS"]:
 *             raise RuntimeError("read_dosages() requires floatarr_out to be C-contiguous.")             # <<<<<<<<<<<<<<
 *         # todo: change this when pgenlib_internal supports multiallelic
 *         # variants
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":369
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_dosages() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         if not floatarr_out.flags["C_CONTIGUOUS"]:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_dosages() requires floatarr_out to be C-contiguous.")
 *         # todo: change this when pgenlib_internal supports multiallelic
 */
  }

  /* "pgenlib.pyx":375
 *         cdef uint32_t dosage_ct
 *         cdef uint32_t is_explicit_alt1
 *         cdef pglerr_t reterr = pgr_read_refalt1_genovec_dosage16_subset_unsafe(self._subset_include_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, self._genovec, self._dosage_present, self._dosage_vals, &dosage_ct, &is_explicit_alt1)             # <<<<<<<<<<<<<<
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("read_dosages() error " + str(reterr))
 */
  __pyx_v_reterr = plink2::pgr_read_refalt1_genovec_dosage16_subset_unsafe(__pyx_v_self->_subset_include_vec, __pyx_v_self->_subset_cumulative_popcounts, __pyx_v_self->_subset_size, __pyx_v_variant_idx, __pyx_v_self->_state_ptr, __pyx_v_self->_genovec, __pyx_v_self->_dosage_present, __pyx_v_self->_dosage_vals, (&__pyx_v_dosage_ct), (&__pyx_v_is_explicit_alt1));

  /* "pgenlib.pyx":376
 *         cdef uint32_t is_explicit_alt1
 *         cdef pglerr_t reterr = pgr_read_refalt1_genovec_dosage16_subset_unsafe(self._subset_include_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, self._genovec, self._dosage_present, self._dosage_vals, &dosage_ct, &is_explicit_alt1)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_dosages() error " + str(reterr))
 *         if allele_idx == 0:
 */
  __pyx_t_10 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
  if (__pyx_t_10) {

    /* "pgenlib.pyx":377
 *         cdef pglerr_t reterr = pgr_read_refalt1_genovec_dosage16_subset_unsafe(self._subset_include_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, self._genovec, self._dosage_present, self._dosage_vals, &dosage_ct, &is_explicit_alt1)
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("read_dosages() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         if allele_idx == 0:
 *             genovec_invert_unsafe(self._subset_size, self._genovec)
 */
    __pyx_t_5 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_read_dosages_error, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":376
 *         cdef uint32_t is_explicit_alt1
 *         cdef pglerr_t reterr = pgr_read_refalt1_genovec_dosage16_subset_unsafe(self._subset_include_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, self._genovec, self._dosage_present, self._dosage_vals, &dosage_ct, &is_explicit_alt1)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_dosages() error " + str(reterr))
 *         if allele_idx == 0:
 */
  }

  /* "pgenlib.pyx":378
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("read_dosages() error " + str(reterr))
 *         if allele_idx == 0:             # <<<<<<<<<<<<<<
 *             genovec_invert_unsafe(self._subset_size, self._genovec)
 *             biallelic_dosage16_invert(dosage_ct, self._dosage_vals)
 */
  __pyx_t_10 = ((__pyx_v_allele_idx == 0) != 0);
  if (__pyx_t_10) {

    /* "pgenlib.pyx":379
 *             raise RuntimeError("read_dosages() error " + str(reterr))
 *         if allele_idx == 0:
 *             genovec_invert_unsafe(self._subset_size, self._genovec)             # <<<<<<<<<<<<<<
 *             biallelic_dosage16_invert(dosage_ct, self._dosage_vals)
 *         # todo: flip on allele_idx == 0
 */
    plink2::genovec_invert_unsafe(__pyx_v_self->_subset_size, __pyx_v_self->_genovec);

    /* "pgenlib.pyx":380
 *         if allele_idx == 0:
 *             genovec_invert_unsafe(self._subset_size, self._genovec)
 *             biallelic_dosage16_invert(dosage_ct, self._dosage_vals)             # <<<<<<<<<<<<<<
 *         # todo: flip on allele_idx == 0
 *         cdef float* data32_ptr
 */
    plink2::biallelic_dosage16_invert(__pyx_v_dosage_ct, __pyx_v_self->_dosage_vals);

    /* "pgenlib.pyx":378
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("read_dosages() error " + str(reterr))
 *         if allele_idx == 0:             # <<<<<<<<<<<<<<
 *             genovec_invert_unsafe(self._subset_size, self._genovec)
 *             biallelic_dosage16_invert(dosage_ct, self._dosage_vals)
 */
  }

  /* "pgenlib.pyx":384
 *         cdef float* data32_ptr
 *         cdef double* data64_ptr
 *         if floatarr_out.dtype == np.float32:             # <<<<<<<<<<<<<<
 *             data32_ptr = <float*>floatarr_out.data
 *             dosage16_to_floats_minus9(self._genovec, self._dosage_present, self._dosage_vals, self._subset_size, dosage_ct, data32_ptr)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_floatarr_out), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_10) {

    /* "pgenlib.pyx":385
 *         cdef double* data64_ptr
 *         if floatarr_out.dtype == np.float32:
 *             data32_ptr = <float*>floatarr_out.data             # <<<<<<<<<<<<<<
 *             dosage16_to_floats_minus9(self._genovec, self._dosage_present, self._dosage_vals, self._subset_size, dosage_ct, data32_ptr)
 *         elif floatarr_out.dtype == np.float64:
 */
    __pyx_v_data32_ptr = ((float *)__pyx_v_floatarr_out->data);

    /* "pgenlib.pyx":386
 *         if floatarr_out.dtype == np.float32:
 *             data32_ptr = <float*>floatarr_out.data
 *             dosage16_to_floats_minus9(self._genovec, self._dosage_present, self._dosage_vals, self._subset_size, dosage_ct, data32_ptr)             # <<<<<<<<<<<<<<
 *         elif floatarr_out.dtype == np.float64:
 *             data64_ptr = <double*>floatarr_out.data
 */
    plink2::dosage16_to_floats_minus9(__pyx_v_self->_genovec, __pyx_v_self->_dosage_present, __pyx_v_self->_dosage_vals, __pyx_v_self->_subset_size, __pyx_v_dosage_ct, __pyx_v_data32_ptr);

    /* "pgenlib.pyx":384
 *         cdef float* data32_ptr
 *         cdef double* data64_ptr
 *         if floatarr_out.dtype == np.float32:             # <<<<<<<<<<<<<<
 *             data32_ptr = <float*>floatarr_out.data
 *             dosage16_to_floats_minus9(self._genovec, self._dosage_present, self._dosage_vals, self._subset_size, dosage_ct, data32_ptr)
 */
    goto __pyx_L7;
  }

  /* "pgenlib.pyx":387
 *             data32_ptr = <float*>floatarr_out.data
 *             dosage16_to_floats_minus9(self._genovec, self._dosage_present, self._dosage_vals, self._subset_size, dosage_ct, data32_ptr)
 *         elif floatarr_out.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             data64_ptr = <double*>floatarr_out.data
 *             dosage16_to_doubles_minus9(self._genovec, self._dosage_present, self._dosage_vals, self._subset_size, dosage_ct, data64_ptr)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_floatarr_out), __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_10) {

    /* "pgenlib.pyx":388
 *             dosage16_to_floats_minus9(self._genovec, self._dosage_present, self._dosage_vals, self._subset_size, dosage_ct, data32_ptr)
 *         elif floatarr_out.dtype == np.float64:
 *             data64_ptr = <double*>floatarr_out.data             # <<<<<<<<<<<<<<
 *             dosage16_to_doubles_minus9(self._genovec, self._dosage_present, self._dosage_vals, self._subset_size, dosage_ct, data64_ptr)
 *         else:
 */
    __pyx_v_data64_ptr = ((double *)__pyx_v_floatarr_out->data);

    /* "pgenlib.pyx":389
 *         elif floatarr_out.dtype == np.float64:
 *             data64_ptr = <double*>floatarr_out.data
 *             dosage16_to_doubles_minus9(self._genovec, self._dosage_present, self._dosage_vals, self._subset_size, dosage_ct, data64_ptr)             # <<<<<<<<<<<<<<
 *         else:
 *             raise RuntimeError("Invalid read_dosages() floatarr_out array element type (float32 or float64 expected).")
 */
    plink2::dosage16_to_doubles_minus9(__pyx_v_self->_genovec, __pyx_v_self->_dosage_present, __pyx_v_self->_dosage_vals, __pyx_v_self->_subset_size, __pyx_v_dosage_ct, __pyx_v_data64_ptr);

    /* "pgenlib.pyx":387
 *             data32_ptr = <float*>floatarr_out.data
 *             dosage16_to_floats_minus9(self._genovec, self._dosage_present, self._dosage_vals, self._subset_size, dosage_ct, data32_ptr)
 *         elif floatarr_out.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             data64_ptr = <double*>floatarr_out.data
 *             dosage16_to_doubles_minus9(self._genovec, self._dosage_present, self._dosage_vals, self._subset_size, dosage_ct, data64_ptr)
 */
    goto __pyx_L7;
  }

  /* "pgenlib.pyx":391
 *             dosage16_to_doubles_minus9(self._genovec, self._dosage_present, self._dosage_vals, self._subset_size, dosage_ct, data64_ptr)
 *         else:
 *             raise RuntimeError("Invalid read_dosages() floatarr_out array element type (float32 or float64 expected).")             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L7:;

  /* "pgenlib.pyx":392
 *         else:
 *             raise RuntimeError("Invalid read_dosages() floatarr_out array element type (float32 or float64 expected).")
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":366
 * 
 * 
 *     cpdef read_dosages(self, uint32_t variant_idx, np.ndarray floatarr_out, uint32_t allele_idx = 1):             # <<<<<<<<<<<<<<
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_dosages() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pgenlib.PgenReader.read_dosages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_13read_dosages(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_13read_dosages(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint32_t __pyx_v_variant_idx;
  PyArrayObject *__pyx_v_floatarr_out = 0;
  uint32_t __pyx_v_allele_idx;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_dosages (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variant_idx,&__pyx_n_s_floatarr_out,&__pyx_n_s_allele_idx,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variant_idx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_floatarr_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_dosages", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allele_idx);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_dosages") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_variant_idx = __Pyx_PyInt_As_uint32_t(values[0]); if (unlikely((__pyx_v_variant_idx == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_floatarr_out = ((PyArrayObject *)values[1]);
    if (values[2]) {
      __pyx_v_allele_idx = __Pyx_PyInt_As_uint32_t(values[2]); if (unlikely((__pyx_v_allele_idx == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_allele_idx = ((uint32_t)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_dosages", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenReader.read_dosages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_floatarr_out), __pyx_ptype_5numpy_ndarray, 1, "floatarr_out", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_12read_dosages(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self), __pyx_v_variant_idx, __pyx_v_floatarr_out, __pyx_v_allele_idx);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_12read_dosages(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_floatarr_out, uint32_t __pyx_v_allele_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_7pgenlib_10PgenReader_read_dosages __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_dosages", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.allele_idx = __pyx_v_allele_idx;
  __pyx_t_1 = __pyx_vtabptr_7pgenlib_PgenReader->read_dosages(__pyx_v_self, __pyx_v_variant_idx, __pyx_v_floatarr_out, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pgenlib.PgenReader.read_dosages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":395
 * 
 * 
 *     cpdef read_alleles(self, uint32_t variant_idx, np.ndarray[np.int32_t,mode="c",ndim=1] allele_int32_out):             # <<<<<<<<<<<<<<
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:
 *             # could have an unsafe mode which doesn't perform this check, but
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_15read_alleles(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_alleles(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_allele_int32_out, int __pyx_skip_dispatch) {
  uint32_t __pyx_v_phasepresent_ct;
  plink2::pglerr_t __pyx_v_reterr;
  int32_t *__pyx_v_main_data_ptr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32_out;
  __Pyx_Buffer __pyx_pybuffer_allele_int32_out;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_alleles", 0);
  __pyx_pybuffer_allele_int32_out.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32_out.refcount = 0;
  __pyx_pybuffernd_allele_int32_out.data = NULL;
  __pyx_pybuffernd_allele_int32_out.rcbuffer = &__pyx_pybuffer_allele_int32_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32_out.diminfo[0].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32_out.diminfo[0].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[0];
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_alleles); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_15read_alleles)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
      __Pyx_INCREF(((PyObject *)__pyx_v_allele_int32_out));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_allele_int32_out));
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, ((PyObject *)__pyx_v_allele_int32_out));
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":396
 * 
 *     cpdef read_alleles(self, uint32_t variant_idx, np.ndarray[np.int32_t,mode="c",ndim=1] allele_int32_out):
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:             # <<<<<<<<<<<<<<
 *             # could have an unsafe mode which doesn't perform this check, but
 *             # let's default to at least this much bounds-checking
 */
  __pyx_t_8 = ((__pyx_v_variant_idx >= (__pyx_v_self->_info_ptr[0]).raw_variant_ct) != 0);
  if (__pyx_t_8) {

    /* "pgenlib.pyx":399
 *             # could have an unsafe mode which doesn't perform this check, but
 *             # let's default to at least this much bounds-checking
 *             raise RuntimeError("read_alleles() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")             # <<<<<<<<<<<<<<
 *         cdef uint32_t phasepresent_ct
 *         # upgrade to multiallelic version of this function in the future
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_read_alleles_variant_idx_too_lar, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_only); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_uint32_t((__pyx_v_self->_info_ptr[0]).raw_variant_ct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_in_file_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":396
 * 
 *     cpdef read_alleles(self, uint32_t variant_idx, np.ndarray[np.int32_t,mode="c",ndim=1] allele_int32_out):
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:             # <<<<<<<<<<<<<<
 *             # could have an unsafe mode which doesn't perform this check, but
 *             # let's default to at least this much bounds-checking
 */
  }

  /* "pgenlib.pyx":402
 *         cdef uint32_t phasepresent_ct
 *         # upgrade to multiallelic version of this function in the future
 *         cdef pglerr_t reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(self._subset_include_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, self._genovec, self._phasepresent, self._phaseinfo, &phasepresent_ct)             # <<<<<<<<<<<<<<
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("read_alleles() error " + str(reterr))
 */
  __pyx_v_reterr = plink2::pgr_read_refalt1_genovec_hphase_subset_unsafe(__pyx_v_self->_subset_include_vec, __pyx_v_self->_subset_cumulative_popcounts, __pyx_v_self->_subset_size, __pyx_v_variant_idx, __pyx_v_self->_state_ptr, __pyx_v_self->_genovec, __pyx_v_self->_phasepresent, __pyx_v_self->_phaseinfo, (&__pyx_v_phasepresent_ct));

  /* "pgenlib.pyx":403
 *         # upgrade to multiallelic version of this function in the future
 *         cdef pglerr_t reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(self._subset_include_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, self._genovec, self._phasepresent, self._phaseinfo, &phasepresent_ct)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_alleles() error " + str(reterr))
 *         cdef int32_t* main_data_ptr = <int32_t*>(&(allele_int32_out[0]))
 */
  __pyx_t_8 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
  if (__pyx_t_8) {

    /* "pgenlib.pyx":404
 *         cdef pglerr_t reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(self._subset_include_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, self._genovec, self._phasepresent, self._phaseinfo, &phasepresent_ct)
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("read_alleles() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         cdef int32_t* main_data_ptr = <int32_t*>(&(allele_int32_out[0]))
 *         genoarr_phased_to_allele_codes(self._genovec, self._phasepresent, self._phaseinfo, self._subset_size, phasepresent_ct, NULL, main_data_ptr)
 */
    __pyx_t_2 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_kp_s_read_alleles_error, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":403
 *         # upgrade to multiallelic version of this function in the future
 *         cdef pglerr_t reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(self._subset_include_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, self._genovec, self._phasepresent, self._phaseinfo, &phasepresent_ct)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_alleles() error " + str(reterr))
 *         cdef int32_t* main_data_ptr = <int32_t*>(&(allele_int32_out[0]))
 */
  }

  /* "pgenlib.pyx":405
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("read_alleles() error " + str(reterr))
 *         cdef int32_t* main_data_ptr = <int32_t*>(&(allele_int32_out[0]))             # <<<<<<<<<<<<<<
 *         genoarr_phased_to_allele_codes(self._genovec, self._phasepresent, self._phaseinfo, self._subset_size, phasepresent_ct, NULL, main_data_ptr)
 *         return
 */
  __pyx_t_9 = 0;
  __pyx_t_10 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd_allele_int32_out.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_allele_int32_out.diminfo[0].shape)) __pyx_t_10 = 0;
  if (unlikely(__pyx_t_10 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_10);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_main_data_ptr = ((int32_t *)(&(*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_allele_int32_out.diminfo[0].strides))));

  /* "pgenlib.pyx":406
 *             raise RuntimeError("read_alleles() error " + str(reterr))
 *         cdef int32_t* main_data_ptr = <int32_t*>(&(allele_int32_out[0]))
 *         genoarr_phased_to_allele_codes(self._genovec, self._phasepresent, self._phaseinfo, self._subset_size, phasepresent_ct, NULL, main_data_ptr)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  plink2::genoarr_phased_to_allele_codes(__pyx_v_self->_genovec, __pyx_v_self->_phasepresent, __pyx_v_self->_phaseinfo, __pyx_v_self->_subset_size, __pyx_v_phasepresent_ct, NULL, __pyx_v_main_data_ptr);

  /* "pgenlib.pyx":407
 *         cdef int32_t* main_data_ptr = <int32_t*>(&(allele_int32_out[0]))
 *         genoarr_phased_to_allele_codes(self._genovec, self._phasepresent, self._phaseinfo, self._subset_size, phasepresent_ct, NULL, main_data_ptr)
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":395
 * 
 * 
 *     cpdef read_alleles(self, uint32_t variant_idx, np.ndarray[np.int32_t,mode="c",ndim=1] allele_int32_out):             # <<<<<<<<<<<<<<
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:
 *             # could have an unsafe mode which doesn't perform this check, but
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_15read_alleles(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_15read_alleles(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint32_t __pyx_v_variant_idx;
  PyArrayObject *__pyx_v_allele_int32_out = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_alleles (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variant_idx,&__pyx_n_s_allele_int32_out,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variant_idx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allele_int32_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_alleles", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_alleles") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_variant_idx = __Pyx_PyInt_As_uint32_t(values[0]); if (unlikely((__pyx_v_variant_idx == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_allele_int32_out = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_alleles", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_allele_int32_out), __pyx_ptype_5numpy_ndarray, 1, "allele_int32_out", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_14read_alleles(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self), __pyx_v_variant_idx, __pyx_v_allele_int32_out);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_14read_alleles(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_allele_int32_out) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32_out;
  __Pyx_Buffer __pyx_pybuffer_allele_int32_out;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_alleles", 0);
  __pyx_pybuffer_allele_int32_out.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32_out.refcount = 0;
  __pyx_pybuffernd_allele_int32_out.data = NULL;
  __pyx_pybuffernd_allele_int32_out.rcbuffer = &__pyx_pybuffer_allele_int32_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32_out.diminfo[0].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32_out.diminfo[0].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[0];
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenReader_read_alleles(__pyx_v_self, __pyx_v_variant_idx, __pyx_v_allele_int32_out, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":410
 * 
 * 
 *     cpdef read_alleles_and_phasepresent(self, uint32_t variant_idx, np.ndarray[np.int32_t,mode="c",ndim=1] allele_int32_out, np.ndarray[np.uint8_t,mode="c",cast=True] phasepresent_out):             # <<<<<<<<<<<<<<
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:
 *             # could have an unsafe mode which doesn't perform this check, but
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_17read_alleles_and_phasepresent(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_alleles_and_phasepresent(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_allele_int32_out, PyArrayObject *__pyx_v_phasepresent_out, int __pyx_skip_dispatch) {
  uint32_t __pyx_v_phasepresent_ct;
  plink2::pglerr_t __pyx_v_reterr;
  int32_t *__pyx_v_main_data_ptr;
  unsigned char *__pyx_v_phasepresent_data_ptr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32_out;
  __Pyx_Buffer __pyx_pybuffer_allele_int32_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_phasepresent_out;
  __Pyx_Buffer __pyx_pybuffer_phasepresent_out;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_alleles_and_phasepresent", 0);
  __pyx_pybuffer_allele_int32_out.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32_out.refcount = 0;
  __pyx_pybuffernd_allele_int32_out.data = NULL;
  __pyx_pybuffernd_allele_int32_out.rcbuffer = &__pyx_pybuffer_allele_int32_out;
  __pyx_pybuffer_phasepresent_out.pybuffer.buf = NULL;
  __pyx_pybuffer_phasepresent_out.refcount = 0;
  __pyx_pybuffernd_phasepresent_out.data = NULL;
  __pyx_pybuffernd_phasepresent_out.rcbuffer = &__pyx_pybuffer_phasepresent_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32_out.diminfo[0].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32_out.diminfo[0].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_phasepresent_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 1, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_phasepresent_out.diminfo[0].strides = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_phasepresent_out.diminfo[0].shape = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.shape[0];
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_alleles_and_phasepresent); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_17read_alleles_and_phasepresent)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
      __Pyx_INCREF(((PyObject *)__pyx_v_allele_int32_out));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_allele_int32_out));
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, ((PyObject *)__pyx_v_allele_int32_out));
      __Pyx_INCREF(((PyObject *)__pyx_v_phasepresent_out));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_phasepresent_out));
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, ((PyObject *)__pyx_v_phasepresent_out));
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":411
 * 
 *     cpdef read_alleles_and_phasepresent(self, uint32_t variant_idx, np.ndarray[np.int32_t,mode="c",ndim=1] allele_int32_out, np.ndarray[np.uint8_t,mode="c",cast=True] phasepresent_out):
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:             # <<<<<<<<<<<<<<
 *             # could have an unsafe mode which doesn't perform this check, but
 *             # let's default to at least this much bounds-checking
 */
  __pyx_t_8 = ((__pyx_v_variant_idx >= (__pyx_v_self->_info_ptr[0]).raw_variant_ct) != 0);
  if (__pyx_t_8) {

    /* "pgenlib.pyx":414
 *             # could have an unsafe mode which doesn't perform this check, but
 *             # let's default to at least this much bounds-checking
 *             raise RuntimeError("read_alleles_and_phasepresent() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")             # <<<<<<<<<<<<<<
 *         cdef uint32_t phasepresent_ct
 *         # upgrade to multiallelic version of this function in the future
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_read_alleles_and_phasepresent_va, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_only); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_uint32_t((__pyx_v_self->_info_ptr[0]).raw_variant_ct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_in_file_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":411
 * 
 *     cpdef read_alleles_and_phasepresent(self, uint32_t variant_idx, np.ndarray[np.int32_t,mode="c",ndim=1] allele_int32_out, np.ndarray[np.uint8_t,mode="c",cast=True] phasepresent_out):
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:             # <<<<<<<<<<<<<<
 *             # could have an unsafe mode which doesn't perform this check, but
 *             # let's default to at least this much bounds-checking
 */
  }

  /* "pgenlib.pyx":417
 *         cdef uint32_t phasepresent_ct
 *         # upgrade to multiallelic version of this function in the future
 *         cdef pglerr_t reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(self._subset_include_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, self._genovec, self._phasepresent, self._phaseinfo, &phasepresent_ct)             # <<<<<<<<<<<<<<
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("read_alleles_and_phasepresent() error " + str(reterr))
 */
  __pyx_v_reterr = plink2::pgr_read_refalt1_genovec_hphase_subset_unsafe(__pyx_v_self->_subset_include_vec, __pyx_v_self->_subset_cumulative_popcounts, __pyx_v_self->_subset_size, __pyx_v_variant_idx, __pyx_v_self->_state_ptr, __pyx_v_self->_genovec, __pyx_v_self->_phasepresent, __pyx_v_self->_phaseinfo, (&__pyx_v_phasepresent_ct));

  /* "pgenlib.pyx":418
 *         # upgrade to multiallelic version of this function in the future
 *         cdef pglerr_t reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(self._subset_include_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, self._genovec, self._phasepresent, self._phaseinfo, &phasepresent_ct)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_alleles_and_phasepresent() error " + str(reterr))
 *         cdef int32_t* main_data_ptr = <int32_t*>(&(allele_int32_out[0]))
 */
  __pyx_t_8 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
  if (__pyx_t_8) {

    /* "pgenlib.pyx":419
 *         cdef pglerr_t reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(self._subset_include_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, self._genovec, self._phasepresent, self._phaseinfo, &phasepresent_ct)
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("read_alleles_and_phasepresent() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         cdef int32_t* main_data_ptr = <int32_t*>(&(allele_int32_out[0]))
 *         cdef unsigned char* phasepresent_data_ptr = <unsigned char*>(&(phasepresent_out[0]))
 */
    __pyx_t_2 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_kp_s_read_alleles_and_phasepresent_er, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":418
 *         # upgrade to multiallelic version of this function in the future
 *         cdef pglerr_t reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(self._subset_include_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, self._genovec, self._phasepresent, self._phaseinfo, &phasepresent_ct)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_alleles_and_phasepresent() error " + str(reterr))
 *         cdef int32_t* main_data_ptr = <int32_t*>(&(allele_int32_out[0]))
 */
  }

  /* "pgenlib.pyx":420
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("read_alleles_and_phasepresent() error " + str(reterr))
 *         cdef int32_t* main_data_ptr = <int32_t*>(&(allele_int32_out[0]))             # <<<<<<<<<<<<<<
 *         cdef unsigned char* phasepresent_data_ptr = <unsigned char*>(&(phasepresent_out[0]))
 *         genoarr_phased_to_allele_codes(self._genovec, self._phasepresent, self._phaseinfo, self._subset_size, phasepresent_ct, phasepresent_data_ptr, main_data_ptr)
 */
  __pyx_t_9 = 0;
  __pyx_t_10 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd_allele_int32_out.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_allele_int32_out.diminfo[0].shape)) __pyx_t_10 = 0;
  if (unlikely(__pyx_t_10 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_10);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_main_data_ptr = ((int32_t *)(&(*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_allele_int32_out.diminfo[0].strides))));

  /* "pgenlib.pyx":421
 *             raise RuntimeError("read_alleles_and_phasepresent() error " + str(reterr))
 *         cdef int32_t* main_data_ptr = <int32_t*>(&(allele_int32_out[0]))
 *         cdef unsigned char* phasepresent_data_ptr = <unsigned char*>(&(phasepresent_out[0]))             # <<<<<<<<<<<<<<
 *         genoarr_phased_to_allele_codes(self._genovec, self._phasepresent, self._phaseinfo, self._subset_size, phasepresent_ct, phasepresent_data_ptr, main_data_ptr)
 *         return
 */
  __pyx_t_11 = 0;
  __pyx_t_10 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd_phasepresent_out.diminfo[0].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_10 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_phasepresent_out.diminfo[0].shape)) __pyx_t_10 = 0;
  if (unlikely(__pyx_t_10 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_10);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_phasepresent_data_ptr = ((unsigned char *)(&(*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_phasepresent_out.diminfo[0].strides))));

  /* "pgenlib.pyx":422
 *         cdef int32_t* main_data_ptr = <int32_t*>(&(allele_int32_out[0]))
 *         cdef unsigned char* phasepresent_data_ptr = <unsigned char*>(&(phasepresent_out[0]))
 *         genoarr_phased_to_allele_codes(self._genovec, self._phasepresent, self._phaseinfo, self._subset_size, phasepresent_ct, phasepresent_data_ptr, main_data_ptr)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  plink2::genoarr_phased_to_allele_codes(__pyx_v_self->_genovec, __pyx_v_self->_phasepresent, __pyx_v_self->_phaseinfo, __pyx_v_self->_subset_size, __pyx_v_phasepresent_ct, __pyx_v_phasepresent_data_ptr, __pyx_v_main_data_ptr);

  /* "pgenlib.pyx":423
 *         cdef unsigned char* phasepresent_data_ptr = <unsigned char*>(&(phasepresent_out[0]))
 *         genoarr_phased_to_allele_codes(self._genovec, self._phasepresent, self._phaseinfo, self._subset_size, phasepresent_ct, phasepresent_data_ptr, main_data_ptr)
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":410
 * 
 * 
 *     cpdef read_alleles_and_phasepresent(self, uint32_t variant_idx, np.ndarray[np.int32_t,mode="c",ndim=1] allele_int32_out, np.ndarray[np.uint8_t,mode="c",cast=True] phasepresent_out):             # <<<<<<<<<<<<<<
 *         if variant_idx >= self._info_ptr[0].raw_variant_ct:
 *             # could have an unsafe mode which doesn't perform this check, but
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles_and_phasepresent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_17read_alleles_and_phasepresent(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_17read_alleles_and_phasepresent(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint32_t __pyx_v_variant_idx;
  PyArrayObject *__pyx_v_allele_int32_out = 0;
  PyArrayObject *__pyx_v_phasepresent_out = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_alleles_and_phasepresent (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variant_idx,&__pyx_n_s_allele_int32_out,&__pyx_n_s_phasepresent_out,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variant_idx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allele_int32_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_alleles_and_phasepresent", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phasepresent_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_alleles_and_phasepresent", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_alleles_and_phasepresent") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_variant_idx = __Pyx_PyInt_As_uint32_t(values[0]); if (unlikely((__pyx_v_variant_idx == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_allele_int32_out = ((PyArrayObject *)values[1]);
    __pyx_v_phasepresent_out = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_alleles_and_phasepresent", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles_and_phasepresent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_allele_int32_out), __pyx_ptype_5numpy_ndarray, 1, "allele_int32_out", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phasepresent_out), __pyx_ptype_5numpy_ndarray, 1, "phasepresent_out", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_16read_alleles_and_phasepresent(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self), __pyx_v_variant_idx, __pyx_v_allele_int32_out, __pyx_v_phasepresent_out);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_16read_alleles_and_phasepresent(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_allele_int32_out, PyArrayObject *__pyx_v_phasepresent_out) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32_out;
  __Pyx_Buffer __pyx_pybuffer_allele_int32_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_phasepresent_out;
  __Pyx_Buffer __pyx_pybuffer_phasepresent_out;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_alleles_and_phasepresent", 0);
  __pyx_pybuffer_allele_int32_out.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32_out.refcount = 0;
  __pyx_pybuffernd_allele_int32_out.data = NULL;
  __pyx_pybuffernd_allele_int32_out.rcbuffer = &__pyx_pybuffer_allele_int32_out;
  __pyx_pybuffer_phasepresent_out.pybuffer.buf = NULL;
  __pyx_pybuffer_phasepresent_out.refcount = 0;
  __pyx_pybuffernd_phasepresent_out.data = NULL;
  __pyx_pybuffernd_phasepresent_out.rcbuffer = &__pyx_pybuffer_phasepresent_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32_out.diminfo[0].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32_out.diminfo[0].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_phasepresent_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 1, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_phasepresent_out.diminfo[0].strides = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_phasepresent_out.diminfo[0].shape = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.shape[0];
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenReader_read_alleles_and_phasepresent(__pyx_v_self, __pyx_v_variant_idx, __pyx_v_allele_int32_out, __pyx_v_phasepresent_out, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles_and_phasepresent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":426
 * 
 * 
 *     cdef read_range_internal8(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int8_t,mode="c",ndim=2] geno_int8_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 */

static PyObject *__pyx_f_7pgenlib_10PgenReader_read_range_internal8(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx_start, uint32_t __pyx_v_variant_idx_end, PyArrayObject *__pyx_v_geno_int8_out, struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal8 *__pyx_optional_args) {
  uint32_t __pyx_v_allele_idx = ((uint32_t)1);
  int __pyx_v_sample_maj = ((int)0);
  uintptr_t const *__pyx_v_subset_include_vec;
  uint32_t const *__pyx_v_subset_cumulative_popcounts;
  plink2::pgen_reader_t *__pyx_v_pgrp;
  uintptr_t *__pyx_v_genovec;
  uint32_t __pyx_v_variant_idx_ct;
  uint32_t __pyx_v_subset_size;
  int8_t *__pyx_v_data_ptr;
  uint32_t __pyx_v_variant_idx;
  plink2::pglerr_t __pyx_v_reterr;
  uint32_t __pyx_v_variant_batch_ct;
  uint32_t __pyx_v_variant_batch_size;
  uint32_t __pyx_v_variant_idx_offset;
  uint32_t __pyx_v_sample_ctaw2;
  uint32_t __pyx_v_sample_batch_ct;
  plink2::vul_t *__pyx_v_transpose_batch_buf;
  uintptr_t *__pyx_v_multivar_vmaj_geno_buf;
  uintptr_t *__pyx_v_multivar_smaj_geno_batch_buf;
  uintptr_t *__pyx_v_vmaj_iter;
  uintptr_t *__pyx_v_smaj_iter;
  uint32_t __pyx_v_variant_batch_idx;
  uint32_t __pyx_v_sample_batch_size;
  uint32_t __pyx_v_sample_batch_idx;
  uint32_t __pyx_v_uii;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_geno_int8_out;
  __Pyx_Buffer __pyx_pybuffer_geno_int8_out;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  uintptr_t *__pyx_t_5;
  uint32_t *__pyx_t_6;
  plink2::pgen_reader_t *__pyx_t_7;
  uint32_t __pyx_t_8;
  uint32_t __pyx_t_9;
  size_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  plink2::vul_t *__pyx_t_13;
  long __pyx_t_14;
  uint32_t __pyx_t_15;
  uint32_t __pyx_t_16;
  uint32_t __pyx_t_17;
  uint32_t __pyx_t_18;
  size_t __pyx_t_19;
  size_t __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_range_internal8", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_allele_idx = __pyx_optional_args->allele_idx;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_sample_maj = __pyx_optional_args->sample_maj;
      }
    }
  }
  __pyx_pybuffer_geno_int8_out.pybuffer.buf = NULL;
  __pyx_pybuffer_geno_int8_out.refcount = 0;
  __pyx_pybuffernd_geno_int8_out.data = NULL;
  __pyx_pybuffernd_geno_int8_out.rcbuffer = &__pyx_pybuffer_geno_int8_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_geno_int8_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_geno_int8_out.diminfo[0].strides = __pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_geno_int8_out.diminfo[0].shape = __pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_geno_int8_out.diminfo[1].strides = __pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_geno_int8_out.diminfo[1].shape = __pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer.shape[1];

  /* "pgenlib.pyx":427
 * 
 *     cdef read_range_internal8(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int8_t,mode="c",ndim=2] geno_int8_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */
  __pyx_t_1 = ((__pyx_v_variant_idx_end > (__pyx_v_self->_info_ptr[0]).raw_variant_ct) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":428
 *     cdef read_range_internal8(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int8_t,mode="c",ndim=2] geno_int8_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")             # <<<<<<<<<<<<<<
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 */
    __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_end); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_read_range_variant_idx_end_too_l, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_only); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_uint32_t((__pyx_v_self->_info_ptr[0]).raw_variant_ct); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_in_file_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":427
 * 
 *     cdef read_range_internal8(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int8_t,mode="c",ndim=2] geno_int8_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */
  }

  /* "pgenlib.pyx":429
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec             # <<<<<<<<<<<<<<
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 */
  __pyx_t_5 = __pyx_v_self->_subset_include_vec;
  __pyx_v_subset_include_vec = __pyx_t_5;

  /* "pgenlib.pyx":430
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts             # <<<<<<<<<<<<<<
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec
 */
  __pyx_t_6 = __pyx_v_self->_subset_cumulative_popcounts;
  __pyx_v_subset_cumulative_popcounts = __pyx_t_6;

  /* "pgenlib.pyx":431
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = variant_idx_end - variant_idx_start
 */
  __pyx_t_7 = __pyx_v_self->_state_ptr;
  __pyx_v_pgrp = __pyx_t_7;

  /* "pgenlib.pyx":432
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_idx_ct = variant_idx_end - variant_idx_start
 *         cdef uint32_t subset_size = self._subset_size
 */
  __pyx_t_5 = __pyx_v_self->_genovec;
  __pyx_v_genovec = __pyx_t_5;

  /* "pgenlib.pyx":433
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = variant_idx_end - variant_idx_start             # <<<<<<<<<<<<<<
 *         cdef uint32_t subset_size = self._subset_size
 *         cdef int8_t* data_ptr
 */
  __pyx_v_variant_idx_ct = (__pyx_v_variant_idx_end - __pyx_v_variant_idx_start);

  /* "pgenlib.pyx":434
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = variant_idx_end - variant_idx_start
 *         cdef uint32_t subset_size = self._subset_size             # <<<<<<<<<<<<<<
 *         cdef int8_t* data_ptr
 *         cdef uint32_t variant_idx
 */
  __pyx_t_8 = __pyx_v_self->_subset_size;
  __pyx_v_subset_size = __pyx_t_8;

  /* "pgenlib.pyx":438
 *         cdef uint32_t variant_idx
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:             # <<<<<<<<<<<<<<
 *             if geno_int8_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 */
  __pyx_t_1 = ((__pyx_v_sample_maj == 0) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":439
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:
 *             if geno_int8_out.shape[0] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if geno_int8_out.shape[1] < subset_size:
 */
    __pyx_t_1 = (((__pyx_v_geno_int8_out->dimensions[0]) < __pyx_v_variant_idx_ct) != 0);
    if (__pyx_t_1) {

      /* "pgenlib.pyx":440
 *         if sample_maj == 0:
 *             if geno_int8_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")             # <<<<<<<<<<<<<<
 *             if geno_int8_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 */
      __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int8_out->dimensions[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Variant_major_read_range_geno_in, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_variant_idx_end_variant_idx_sta); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_ct); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":439
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:
 *             if geno_int8_out.shape[0] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if geno_int8_out.shape[1] < subset_size:
 */
    }

    /* "pgenlib.pyx":441
 *             if geno_int8_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if geno_int8_out.shape[1] < subset_size:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 */
    __pyx_t_1 = (((__pyx_v_geno_int8_out->dimensions[1]) < __pyx_v_subset_size) != 0);
    if (__pyx_t_1) {

      /* "pgenlib.pyx":442
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if geno_int8_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")             # <<<<<<<<<<<<<<
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 */
      __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int8_out->dimensions[1])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Variant_major_read_range_geno_in_2, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_current_sample_subset_has_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_subset_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":441
 *             if geno_int8_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if geno_int8_out.shape[1] < subset_size:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 */
    }

    /* "pgenlib.pyx":443
 *             if geno_int8_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_idx in range(variant_idx_start, variant_idx_end):             # <<<<<<<<<<<<<<
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:
 */
    __pyx_t_8 = __pyx_v_variant_idx_end;
    for (__pyx_t_9 = __pyx_v_variant_idx_start; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_variant_idx = __pyx_t_9;

      /* "pgenlib.pyx":444
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::pgr_read_allele_countvec_subset_unsafe(__pyx_v_subset_include_vec, __pyx_v_subset_cumulative_popcounts, __pyx_v_subset_size, __pyx_v_variant_idx, __pyx_v_allele_idx, __pyx_v_pgrp, __pyx_v_genovec);

      /* "pgenlib.pyx":445
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = &(geno_int8_out[(variant_idx - variant_idx_start), 0])
 */
      __pyx_t_1 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_1) {

        /* "pgenlib.pyx":446
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))             # <<<<<<<<<<<<<<
 *                 data_ptr = &(geno_int8_out[(variant_idx - variant_idx_start), 0])
 *                 genoarr_to_bytes_minus9(genovec, subset_size, data_ptr)
 */
        __pyx_t_2 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_Add(__pyx_kp_s_read_range_error, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":445
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = &(geno_int8_out[(variant_idx - variant_idx_start), 0])
 */
      }

      /* "pgenlib.pyx":447
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = &(geno_int8_out[(variant_idx - variant_idx_start), 0])             # <<<<<<<<<<<<<<
 *                 genoarr_to_bytes_minus9(genovec, subset_size, data_ptr)
 *             return
 */
      __pyx_t_10 = (__pyx_v_variant_idx - __pyx_v_variant_idx_start);
      __pyx_t_11 = 0;
      __pyx_t_12 = -1;
      if (unlikely(__pyx_t_10 >= (size_t)__pyx_pybuffernd_geno_int8_out.diminfo[0].shape)) __pyx_t_12 = 0;
      if (__pyx_t_11 < 0) {
        __pyx_t_11 += __pyx_pybuffernd_geno_int8_out.diminfo[1].shape;
        if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 1;
      } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_geno_int8_out.diminfo[1].shape)) __pyx_t_12 = 1;
      if (unlikely(__pyx_t_12 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_12);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_data_ptr = (&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int8_t *, __pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_geno_int8_out.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_geno_int8_out.diminfo[1].strides)));

      /* "pgenlib.pyx":448
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = &(geno_int8_out[(variant_idx - variant_idx_start), 0])
 *                 genoarr_to_bytes_minus9(genovec, subset_size, data_ptr)             # <<<<<<<<<<<<<<
 *             return
 *         if variant_idx_start >= variant_idx_end:
 */
      plink2::genoarr_to_bytes_minus9(__pyx_v_genovec, __pyx_v_subset_size, __pyx_v_data_ptr);
    }

    /* "pgenlib.pyx":449
 *                 data_ptr = &(geno_int8_out[(variant_idx - variant_idx_start), 0])
 *                 genoarr_to_bytes_minus9(genovec, subset_size, data_ptr)
 *             return             # <<<<<<<<<<<<<<
 *         if variant_idx_start >= variant_idx_end:
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "pgenlib.pyx":438
 *         cdef uint32_t variant_idx
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:             # <<<<<<<<<<<<<<
 *             if geno_int8_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 */
  }

  /* "pgenlib.pyx":450
 *                 genoarr_to_bytes_minus9(genovec, subset_size, data_ptr)
 *             return
 *         if variant_idx_start >= variant_idx_end:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if geno_int8_out.shape[0] < subset_size:
 */
  __pyx_t_1 = ((__pyx_v_variant_idx_start >= __pyx_v_variant_idx_end) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":451
 *             return
 *         if variant_idx_start >= variant_idx_end:
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")             # <<<<<<<<<<<<<<
 *         if geno_int8_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 */
    __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_read_range_variant_idx_start_var, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_end); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_kp_s__7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":450
 *                 genoarr_to_bytes_minus9(genovec, subset_size, data_ptr)
 *             return
 *         if variant_idx_start >= variant_idx_end:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if geno_int8_out.shape[0] < subset_size:
 */
  }

  /* "pgenlib.pyx":452
 *         if variant_idx_start >= variant_idx_end:
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if geno_int8_out.shape[0] < subset_size:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int8_out.shape[1] < variant_idx_ct:
 */
  __pyx_t_1 = (((__pyx_v_geno_int8_out->dimensions[0]) < __pyx_v_subset_size) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":453
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if geno_int8_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")             # <<<<<<<<<<<<<<
 *         if geno_int8_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 */
    __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int8_out->dimensions[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Sample_major_read_range_geno_int, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_current_sample_subset_has_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_subset_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":452
 *         if variant_idx_start >= variant_idx_end:
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if geno_int8_out.shape[0] < subset_size:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int8_out.shape[1] < variant_idx_ct:
 */
  }

  /* "pgenlib.pyx":454
 *         if geno_int8_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int8_out.shape[1] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 */
  __pyx_t_1 = (((__pyx_v_geno_int8_out->dimensions[1]) < __pyx_v_variant_idx_ct) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":455
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int8_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 */
    __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int8_out->dimensions[1])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_Sample_major_read_range_geno_int_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_variant_idx_end_variant_idx_sta); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_ct); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":454
 *         if geno_int8_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int8_out.shape[1] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 */
  }

  /* "pgenlib.pyx":456
 *         if geno_int8_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t variant_idx_offset = variant_idx_start
 */
  __pyx_v_variant_batch_ct = DIV_UP(__pyx_v_variant_idx_ct, plink2::kPglQuaterTransposeBatch);

  /* "pgenlib.pyx":457
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_idx_offset = variant_idx_start
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 */
  __pyx_v_variant_batch_size = plink2::kPglQuaterTransposeBatch;

  /* "pgenlib.pyx":458
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t variant_idx_offset = variant_idx_start             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 */
  __pyx_v_variant_idx_offset = __pyx_v_variant_idx_start;

  /* "pgenlib.pyx":459
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t variant_idx_offset = variant_idx_start
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 */
  __pyx_v_sample_ctaw2 = (plink2::kWordsPerVec * DIV_UP(__pyx_v_subset_size, plink2::kBitsPerWordD2));

  /* "pgenlib.pyx":460
 *         cdef uint32_t variant_idx_offset = variant_idx_start
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 */
  __pyx_v_sample_batch_ct = DIV_UP(__pyx_v_subset_size, plink2::kPglQuaterTransposeBatch);

  /* "pgenlib.pyx":461
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 */
  __pyx_t_13 = __pyx_v_self->_transpose_batch_buf;
  __pyx_v_transpose_batch_buf = __pyx_t_13;

  /* "pgenlib.pyx":462
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 *         cdef uintptr_t* vmaj_iter
 */
  __pyx_t_5 = __pyx_v_self->_multivar_vmaj_geno_buf;
  __pyx_v_multivar_vmaj_geno_buf = __pyx_t_5;

  /* "pgenlib.pyx":463
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* vmaj_iter
 *         cdef uintptr_t* smaj_iter
 */
  __pyx_t_5 = __pyx_v_self->_multivar_smaj_geno_batch_buf;
  __pyx_v_multivar_smaj_geno_batch_buf = __pyx_t_5;

  /* "pgenlib.pyx":470
 *         cdef uint32_t sample_batch_idx
 *         cdef uint32_t uii
 *         for variant_batch_idx in range(variant_batch_ct):             # <<<<<<<<<<<<<<
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 */
  __pyx_t_8 = __pyx_v_variant_batch_ct;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_variant_batch_idx = __pyx_t_9;

    /* "pgenlib.pyx":471
 *         cdef uint32_t uii
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):             # <<<<<<<<<<<<<<
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
    __pyx_t_1 = ((__pyx_v_variant_batch_idx == (__pyx_v_variant_batch_ct - 1)) != 0);
    if (__pyx_t_1) {

      /* "pgenlib.pyx":472
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):
 */
      __pyx_t_14 = (__pyx_v_variant_idx_ct - 1);
      if (unlikely(plink2::kPglQuaterTransposeBatch == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_variant_batch_size = (1 + ((uint32_t)__Pyx_mod_long(__pyx_t_14, plink2::kPglQuaterTransposeBatch)));

      /* "pgenlib.pyx":471
 *         cdef uint32_t uii
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):             # <<<<<<<<<<<<<<
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
    }

    /* "pgenlib.pyx":473
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *             for uii in range(variant_batch_size):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)
 */
    __pyx_v_vmaj_iter = __pyx_v_multivar_vmaj_geno_buf;

    /* "pgenlib.pyx":474
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):             # <<<<<<<<<<<<<<
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:
 */
    __pyx_t_15 = __pyx_v_variant_batch_size;
    for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
      __pyx_v_uii = __pyx_t_16;

      /* "pgenlib.pyx":475
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::pgr_read_allele_countvec_subset_unsafe(__pyx_v_subset_include_vec, __pyx_v_subset_cumulative_popcounts, __pyx_v_subset_size, (__pyx_v_uii + __pyx_v_variant_idx_offset), __pyx_v_allele_idx, __pyx_v_pgrp, __pyx_v_vmaj_iter);

      /* "pgenlib.pyx":476
 *             for uii in range(variant_batch_size):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 */
      __pyx_t_1 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_1) {

        /* "pgenlib.pyx":477
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))             # <<<<<<<<<<<<<<
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch
 */
        __pyx_t_3 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Add(__pyx_kp_s_read_range_error, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":476
 *             for uii in range(variant_batch_size):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 */
      }

      /* "pgenlib.pyx":478
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])             # <<<<<<<<<<<<<<
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
      __pyx_v_vmaj_iter = (&(__pyx_v_vmaj_iter[__pyx_v_sample_ctaw2]));
    }

    /* "pgenlib.pyx":479
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 */
    __pyx_v_sample_batch_size = plink2::kPglQuaterTransposeBatch;

    /* "pgenlib.pyx":480
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:
 */
    __pyx_v_vmaj_iter = __pyx_v_multivar_vmaj_geno_buf;

    /* "pgenlib.pyx":481
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):             # <<<<<<<<<<<<<<
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 */
    __pyx_t_15 = __pyx_v_sample_batch_ct;
    for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
      __pyx_v_sample_batch_idx = __pyx_t_16;

      /* "pgenlib.pyx":482
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:             # <<<<<<<<<<<<<<
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 */
      __pyx_t_1 = ((__pyx_v_sample_batch_idx == (__pyx_v_sample_batch_ct - 1)) != 0);
      if (__pyx_t_1) {

        /* "pgenlib.pyx":483
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 */
        __pyx_t_14 = (__pyx_v_subset_size - 1);
        if (unlikely(plink2::kPglQuaterTransposeBatch == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_sample_batch_size = (1 + ((uint32_t)__Pyx_mod_long(__pyx_t_14, plink2::kPglQuaterTransposeBatch)));

        /* "pgenlib.pyx":482
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:             # <<<<<<<<<<<<<<
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 */
      }

      /* "pgenlib.pyx":484
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf             # <<<<<<<<<<<<<<
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):
 */
      __pyx_v_smaj_iter = __pyx_v_multivar_smaj_geno_batch_buf;

      /* "pgenlib.pyx":485
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)             # <<<<<<<<<<<<<<
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = &(geno_int8_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])
 */
      plink2::transpose_quaterblock(__pyx_v_vmaj_iter, __pyx_v_sample_ctaw2, plink2::kPglQuaterTransposeWords, __pyx_v_variant_batch_size, __pyx_v_sample_batch_size, __pyx_v_smaj_iter, __pyx_v_transpose_batch_buf);

      /* "pgenlib.pyx":486
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):             # <<<<<<<<<<<<<<
 *                     data_ptr = &(geno_int8_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])
 *                     genoarr_to_bytes_minus9(smaj_iter, variant_batch_size, data_ptr)
 */
      __pyx_t_17 = __pyx_v_sample_batch_size;
      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
        __pyx_v_uii = __pyx_t_18;

        /* "pgenlib.pyx":487
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = &(geno_int8_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])             # <<<<<<<<<<<<<<
 *                     genoarr_to_bytes_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 */
        __pyx_t_19 = (__pyx_v_uii + (__pyx_v_sample_batch_idx * plink2::kPglQuaterTransposeBatch));
        __pyx_t_20 = (__pyx_v_variant_batch_idx * plink2::kPglQuaterTransposeBatch);
        __pyx_t_12 = -1;
        if (unlikely(__pyx_t_19 >= (size_t)__pyx_pybuffernd_geno_int8_out.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_20 >= (size_t)__pyx_pybuffernd_geno_int8_out.diminfo[1].shape)) __pyx_t_12 = 1;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_data_ptr = (&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int8_t *, __pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_geno_int8_out.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_geno_int8_out.diminfo[1].strides)));

        /* "pgenlib.pyx":488
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = &(geno_int8_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])
 *                     genoarr_to_bytes_minus9(smaj_iter, variant_batch_size, data_ptr)             # <<<<<<<<<<<<<<
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 */
        plink2::genoarr_to_bytes_minus9(__pyx_v_smaj_iter, __pyx_v_variant_batch_size, __pyx_v_data_ptr);

        /* "pgenlib.pyx":489
 *                     data_ptr = &(geno_int8_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])
 *                     genoarr_to_bytes_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])             # <<<<<<<<<<<<<<
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_idx_offset += kPglQuaterTransposeBatch
 */
        __pyx_v_smaj_iter = (&(__pyx_v_smaj_iter[plink2::kPglQuaterTransposeWords]));
      }

      /* "pgenlib.pyx":490
 *                     genoarr_to_bytes_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])             # <<<<<<<<<<<<<<
 *             variant_idx_offset += kPglQuaterTransposeBatch
 *         return
 */
      __pyx_v_vmaj_iter = (&(__pyx_v_vmaj_iter[plink2::kPglQuaterTransposeWords]));
    }

    /* "pgenlib.pyx":491
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_idx_offset += kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_v_variant_idx_offset = (__pyx_v_variant_idx_offset + plink2::kPglQuaterTransposeBatch);
  }

  /* "pgenlib.pyx":492
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_idx_offset += kPglQuaterTransposeBatch
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cdef read_range_internal32(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int32_t,mode="c",ndim=2] geno_int32_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":426
 * 
 * 
 *     cdef read_range_internal8(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int8_t,mode="c",ndim=2] geno_int8_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_range_internal8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":494
 *         return
 * 
 *     cdef read_range_internal32(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int32_t,mode="c",ndim=2] geno_int32_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 */

static PyObject *__pyx_f_7pgenlib_10PgenReader_read_range_internal32(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx_start, uint32_t __pyx_v_variant_idx_end, PyArrayObject *__pyx_v_geno_int32_out, struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal32 *__pyx_optional_args) {
  uint32_t __pyx_v_allele_idx = ((uint32_t)1);
  int __pyx_v_sample_maj = ((int)0);
  uintptr_t const *__pyx_v_subset_include_vec;
  uint32_t const *__pyx_v_subset_cumulative_popcounts;
  plink2::pgen_reader_t *__pyx_v_pgrp;
  uintptr_t *__pyx_v_genovec;
  uint32_t __pyx_v_variant_idx_ct;
  uint32_t __pyx_v_subset_size;
  int32_t *__pyx_v_data_ptr;
  uint32_t __pyx_v_variant_idx;
  plink2::pglerr_t __pyx_v_reterr;
  uint32_t __pyx_v_variant_batch_ct;
  uint32_t __pyx_v_variant_batch_size;
  uint32_t __pyx_v_variant_idx_offset;
  uint32_t __pyx_v_sample_ctaw2;
  uint32_t __pyx_v_sample_batch_ct;
  plink2::vul_t *__pyx_v_transpose_batch_buf;
  uintptr_t *__pyx_v_multivar_vmaj_geno_buf;
  uintptr_t *__pyx_v_multivar_smaj_geno_batch_buf;
  uintptr_t *__pyx_v_vmaj_iter;
  uintptr_t *__pyx_v_smaj_iter;
  uint32_t __pyx_v_variant_batch_idx;
  uint32_t __pyx_v_sample_batch_size;
  uint32_t __pyx_v_sample_batch_idx;
  uint32_t __pyx_v_uii;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_geno_int32_out;
  __Pyx_Buffer __pyx_pybuffer_geno_int32_out;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  uintptr_t *__pyx_t_5;
  uint32_t *__pyx_t_6;
  plink2::pgen_reader_t *__pyx_t_7;
  uint32_t __pyx_t_8;
  uint32_t __pyx_t_9;
  size_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  plink2::vul_t *__pyx_t_13;
  long __pyx_t_14;
  uint32_t __pyx_t_15;
  uint32_t __pyx_t_16;
  uint32_t __pyx_t_17;
  uint32_t __pyx_t_18;
  size_t __pyx_t_19;
  size_t __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_range_internal32", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_allele_idx = __pyx_optional_args->allele_idx;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_sample_maj = __pyx_optional_args->sample_maj;
      }
    }
  }
  __pyx_pybuffer_geno_int32_out.pybuffer.buf = NULL;
  __pyx_pybuffer_geno_int32_out.refcount = 0;
  __pyx_pybuffernd_geno_int32_out.data = NULL;
  __pyx_pybuffernd_geno_int32_out.rcbuffer = &__pyx_pybuffer_geno_int32_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_geno_int32_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_geno_int32_out.diminfo[0].strides = __pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_geno_int32_out.diminfo[0].shape = __pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_geno_int32_out.diminfo[1].strides = __pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_geno_int32_out.diminfo[1].shape = __pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer.shape[1];

  /* "pgenlib.pyx":495
 * 
 *     cdef read_range_internal32(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int32_t,mode="c",ndim=2] geno_int32_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */
  __pyx_t_1 = ((__pyx_v_variant_idx_end > (__pyx_v_self->_info_ptr[0]).raw_variant_ct) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":496
 *     cdef read_range_internal32(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int32_t,mode="c",ndim=2] geno_int32_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")             # <<<<<<<<<<<<<<
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 */
    __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_end); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_read_range_variant_idx_end_too_l, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_only); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_uint32_t((__pyx_v_self->_info_ptr[0]).raw_variant_ct); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_in_file_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":495
 * 
 *     cdef read_range_internal32(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int32_t,mode="c",ndim=2] geno_int32_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */
  }

  /* "pgenlib.pyx":497
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec             # <<<<<<<<<<<<<<
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 */
  __pyx_t_5 = __pyx_v_self->_subset_include_vec;
  __pyx_v_subset_include_vec = __pyx_t_5;

  /* "pgenlib.pyx":498
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts             # <<<<<<<<<<<<<<
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec
 */
  __pyx_t_6 = __pyx_v_self->_subset_cumulative_popcounts;
  __pyx_v_subset_cumulative_popcounts = __pyx_t_6;

  /* "pgenlib.pyx":499
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = variant_idx_end - variant_idx_start
 */
  __pyx_t_7 = __pyx_v_self->_state_ptr;
  __pyx_v_pgrp = __pyx_t_7;

  /* "pgenlib.pyx":500
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_idx_ct = variant_idx_end - variant_idx_start
 *         cdef uint32_t subset_size = self._subset_size
 */
  __pyx_t_5 = __pyx_v_self->_genovec;
  __pyx_v_genovec = __pyx_t_5;

  /* "pgenlib.pyx":501
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = variant_idx_end - variant_idx_start             # <<<<<<<<<<<<<<
 *         cdef uint32_t subset_size = self._subset_size
 *         cdef int32_t* data_ptr
 */
  __pyx_v_variant_idx_ct = (__pyx_v_variant_idx_end - __pyx_v_variant_idx_start);

  /* "pgenlib.pyx":502
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = variant_idx_end - variant_idx_start
 *         cdef uint32_t subset_size = self._subset_size             # <<<<<<<<<<<<<<
 *         cdef int32_t* data_ptr
 *         cdef uint32_t variant_idx
 */
  __pyx_t_8 = __pyx_v_self->_subset_size;
  __pyx_v_subset_size = __pyx_t_8;

  /* "pgenlib.pyx":506
 *         cdef uint32_t variant_idx
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:             # <<<<<<<<<<<<<<
 *             if geno_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 */
  __pyx_t_1 = ((__pyx_v_sample_maj == 0) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":507
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:
 *             if geno_int32_out.shape[0] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if geno_int32_out.shape[1] < subset_size:
 */
    __pyx_t_1 = (((__pyx_v_geno_int32_out->dimensions[0]) < __pyx_v_variant_idx_ct) != 0);
    if (__pyx_t_1) {

      /* "pgenlib.pyx":508
 *         if sample_maj == 0:
 *             if geno_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")             # <<<<<<<<<<<<<<
 *             if geno_int32_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 */
      __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int32_out->dimensions[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Variant_major_read_range_geno_in, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_variant_idx_end_variant_idx_sta); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_ct); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":507
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:
 *             if geno_int32_out.shape[0] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if geno_int32_out.shape[1] < subset_size:
 */
    }

    /* "pgenlib.pyx":509
 *             if geno_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if geno_int32_out.shape[1] < subset_size:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 */
    __pyx_t_1 = (((__pyx_v_geno_int32_out->dimensions[1]) < __pyx_v_subset_size) != 0);
    if (__pyx_t_1) {

      /* "pgenlib.pyx":510
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if geno_int32_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")             # <<<<<<<<<<<<<<
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 */
      __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int32_out->dimensions[1])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Variant_major_read_range_geno_in_2, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_current_sample_subset_has_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_subset_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":509
 *             if geno_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if geno_int32_out.shape[1] < subset_size:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 */
    }

    /* "pgenlib.pyx":511
 *             if geno_int32_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_idx in range(variant_idx_start, variant_idx_end):             # <<<<<<<<<<<<<<
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:
 */
    __pyx_t_8 = __pyx_v_variant_idx_end;
    for (__pyx_t_9 = __pyx_v_variant_idx_start; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_variant_idx = __pyx_t_9;

      /* "pgenlib.pyx":512
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::pgr_read_allele_countvec_subset_unsafe(__pyx_v_subset_include_vec, __pyx_v_subset_cumulative_popcounts, __pyx_v_subset_size, __pyx_v_variant_idx, __pyx_v_allele_idx, __pyx_v_pgrp, __pyx_v_genovec);

      /* "pgenlib.pyx":513
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = <int32_t*>(&(geno_int32_out[(variant_idx - variant_idx_start), 0]))
 */
      __pyx_t_1 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_1) {

        /* "pgenlib.pyx":514
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))             # <<<<<<<<<<<<<<
 *                 data_ptr = <int32_t*>(&(geno_int32_out[(variant_idx - variant_idx_start), 0]))
 *                 genoarr_to_int32s_minus9(genovec, subset_size, data_ptr)
 */
        __pyx_t_2 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_Add(__pyx_kp_s_read_range_error, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":513
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = <int32_t*>(&(geno_int32_out[(variant_idx - variant_idx_start), 0]))
 */
      }

      /* "pgenlib.pyx":515
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = <int32_t*>(&(geno_int32_out[(variant_idx - variant_idx_start), 0]))             # <<<<<<<<<<<<<<
 *                 genoarr_to_int32s_minus9(genovec, subset_size, data_ptr)
 *             return
 */
      __pyx_t_10 = (__pyx_v_variant_idx - __pyx_v_variant_idx_start);
      __pyx_t_11 = 0;
      __pyx_t_12 = -1;
      if (unlikely(__pyx_t_10 >= (size_t)__pyx_pybuffernd_geno_int32_out.diminfo[0].shape)) __pyx_t_12 = 0;
      if (__pyx_t_11 < 0) {
        __pyx_t_11 += __pyx_pybuffernd_geno_int32_out.diminfo[1].shape;
        if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 1;
      } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_geno_int32_out.diminfo[1].shape)) __pyx_t_12 = 1;
      if (unlikely(__pyx_t_12 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_12);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_data_ptr = ((int32_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_geno_int32_out.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_geno_int32_out.diminfo[1].strides))));

      /* "pgenlib.pyx":516
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = <int32_t*>(&(geno_int32_out[(variant_idx - variant_idx_start), 0]))
 *                 genoarr_to_int32s_minus9(genovec, subset_size, data_ptr)             # <<<<<<<<<<<<<<
 *             return
 *         if variant_idx_start >= variant_idx_end:
 */
      plink2::genoarr_to_int32s_minus9(__pyx_v_genovec, __pyx_v_subset_size, __pyx_v_data_ptr);
    }

    /* "pgenlib.pyx":517
 *                 data_ptr = <int32_t*>(&(geno_int32_out[(variant_idx - variant_idx_start), 0]))
 *                 genoarr_to_int32s_minus9(genovec, subset_size, data_ptr)
 *             return             # <<<<<<<<<<<<<<
 *         if variant_idx_start >= variant_idx_end:
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "pgenlib.pyx":506
 *         cdef uint32_t variant_idx
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:             # <<<<<<<<<<<<<<
 *             if geno_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 */
  }

  /* "pgenlib.pyx":518
 *                 genoarr_to_int32s_minus9(genovec, subset_size, data_ptr)
 *             return
 *         if variant_idx_start >= variant_idx_end:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if geno_int32_out.shape[0] < subset_size:
 */
  __pyx_t_1 = ((__pyx_v_variant_idx_start >= __pyx_v_variant_idx_end) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":519
 *             return
 *         if variant_idx_start >= variant_idx_end:
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")             # <<<<<<<<<<<<<<
 *         if geno_int32_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 */
    __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_read_range_variant_idx_start_var, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_end); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_kp_s__7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":518
 *                 genoarr_to_int32s_minus9(genovec, subset_size, data_ptr)
 *             return
 *         if variant_idx_start >= variant_idx_end:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if geno_int32_out.shape[0] < subset_size:
 */
  }

  /* "pgenlib.pyx":520
 *         if variant_idx_start >= variant_idx_end:
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if geno_int32_out.shape[0] < subset_size:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int32_out.shape[1] < variant_idx_ct:
 */
  __pyx_t_1 = (((__pyx_v_geno_int32_out->dimensions[0]) < __pyx_v_subset_size) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":521
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if geno_int32_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")             # <<<<<<<<<<<<<<
 *         if geno_int32_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 */
    __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int32_out->dimensions[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Sample_major_read_range_geno_int, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_current_sample_subset_has_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_subset_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":520
 *         if variant_idx_start >= variant_idx_end:
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if geno_int32_out.shape[0] < subset_size:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int32_out.shape[1] < variant_idx_ct:
 */
  }

  /* "pgenlib.pyx":522
 *         if geno_int32_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int32_out.shape[1] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 */
  __pyx_t_1 = (((__pyx_v_geno_int32_out->dimensions[1]) < __pyx_v_variant_idx_ct) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":523
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int32_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 */
    __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int32_out->dimensions[1])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_Sample_major_read_range_geno_int_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_variant_idx_end_variant_idx_sta); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_ct); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":522
 *         if geno_int32_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int32_out.shape[1] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 */
  }

  /* "pgenlib.pyx":524
 *         if geno_int32_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t variant_idx_offset = variant_idx_start
 */
  __pyx_v_variant_batch_ct = DIV_UP(__pyx_v_variant_idx_ct, plink2::kPglQuaterTransposeBatch);

  /* "pgenlib.pyx":525
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_idx_offset = variant_idx_start
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 */
  __pyx_v_variant_batch_size = plink2::kPglQuaterTransposeBatch;

  /* "pgenlib.pyx":526
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t variant_idx_offset = variant_idx_start             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 */
  __pyx_v_variant_idx_offset = __pyx_v_variant_idx_start;

  /* "pgenlib.pyx":527
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t variant_idx_offset = variant_idx_start
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 */
  __pyx_v_sample_ctaw2 = (plink2::kWordsPerVec * DIV_UP(__pyx_v_subset_size, plink2::kBitsPerWordD2));

  /* "pgenlib.pyx":528
 *         cdef uint32_t variant_idx_offset = variant_idx_start
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 */
  __pyx_v_sample_batch_ct = DIV_UP(__pyx_v_subset_size, plink2::kPglQuaterTransposeBatch);

  /* "pgenlib.pyx":529
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 */
  __pyx_t_13 = __pyx_v_self->_transpose_batch_buf;
  __pyx_v_transpose_batch_buf = __pyx_t_13;

  /* "pgenlib.pyx":530
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 *         cdef uintptr_t* vmaj_iter
 */
  __pyx_t_5 = __pyx_v_self->_multivar_vmaj_geno_buf;
  __pyx_v_multivar_vmaj_geno_buf = __pyx_t_5;

  /* "pgenlib.pyx":531
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* vmaj_iter
 *         cdef uintptr_t* smaj_iter
 */
  __pyx_t_5 = __pyx_v_self->_multivar_smaj_geno_batch_buf;
  __pyx_v_multivar_smaj_geno_batch_buf = __pyx_t_5;

  /* "pgenlib.pyx":538
 *         cdef uint32_t sample_batch_idx
 *         cdef uint32_t uii
 *         for variant_batch_idx in range(variant_batch_ct):             # <<<<<<<<<<<<<<
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 */
  __pyx_t_8 = __pyx_v_variant_batch_ct;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_variant_batch_idx = __pyx_t_9;

    /* "pgenlib.pyx":539
 *         cdef uint32_t uii
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):             # <<<<<<<<<<<<<<
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
    __pyx_t_1 = ((__pyx_v_variant_batch_idx == (__pyx_v_variant_batch_ct - 1)) != 0);
    if (__pyx_t_1) {

      /* "pgenlib.pyx":540
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):
 */
      __pyx_t_14 = (__pyx_v_variant_idx_ct - 1);
      if (unlikely(plink2::kPglQuaterTransposeBatch == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_variant_batch_size = (1 + ((uint32_t)__Pyx_mod_long(__pyx_t_14, plink2::kPglQuaterTransposeBatch)));

      /* "pgenlib.pyx":539
 *         cdef uint32_t uii
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):             # <<<<<<<<<<<<<<
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
    }

    /* "pgenlib.pyx":541
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *             for uii in range(variant_batch_size):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)
 */
    __pyx_v_vmaj_iter = __pyx_v_multivar_vmaj_geno_buf;

    /* "pgenlib.pyx":542
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):             # <<<<<<<<<<<<<<
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:
 */
    __pyx_t_15 = __pyx_v_variant_batch_size;
    for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
      __pyx_v_uii = __pyx_t_16;

      /* "pgenlib.pyx":543
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::pgr_read_allele_countvec_subset_unsafe(__pyx_v_subset_include_vec, __pyx_v_subset_cumulative_popcounts, __pyx_v_subset_size, (__pyx_v_uii + __pyx_v_variant_idx_offset), __pyx_v_allele_idx, __pyx_v_pgrp, __pyx_v_vmaj_iter);

      /* "pgenlib.pyx":544
 *             for uii in range(variant_batch_size):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 */
      __pyx_t_1 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_1) {

        /* "pgenlib.pyx":545
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))             # <<<<<<<<<<<<<<
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch
 */
        __pyx_t_3 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Add(__pyx_kp_s_read_range_error, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":544
 *             for uii in range(variant_batch_size):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 */
      }

      /* "pgenlib.pyx":546
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])             # <<<<<<<<<<<<<<
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
      __pyx_v_vmaj_iter = (&(__pyx_v_vmaj_iter[__pyx_v_sample_ctaw2]));
    }

    /* "pgenlib.pyx":547
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 */
    __pyx_v_sample_batch_size = plink2::kPglQuaterTransposeBatch;

    /* "pgenlib.pyx":548
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:
 */
    __pyx_v_vmaj_iter = __pyx_v_multivar_vmaj_geno_buf;

    /* "pgenlib.pyx":549
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):             # <<<<<<<<<<<<<<
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 */
    __pyx_t_15 = __pyx_v_sample_batch_ct;
    for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
      __pyx_v_sample_batch_idx = __pyx_t_16;

      /* "pgenlib.pyx":550
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:             # <<<<<<<<<<<<<<
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 */
      __pyx_t_1 = ((__pyx_v_sample_batch_idx == (__pyx_v_sample_batch_ct - 1)) != 0);
      if (__pyx_t_1) {

        /* "pgenlib.pyx":551
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 */
        __pyx_t_14 = (__pyx_v_subset_size - 1);
        if (unlikely(plink2::kPglQuaterTransposeBatch == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_sample_batch_size = (1 + ((uint32_t)__Pyx_mod_long(__pyx_t_14, plink2::kPglQuaterTransposeBatch)));

        /* "pgenlib.pyx":550
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:             # <<<<<<<<<<<<<<
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 */
      }

      /* "pgenlib.pyx":552
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf             # <<<<<<<<<<<<<<
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):
 */
      __pyx_v_smaj_iter = __pyx_v_multivar_smaj_geno_batch_buf;

      /* "pgenlib.pyx":553
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)             # <<<<<<<<<<<<<<
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = <int32_t*>(&(geno_int32_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch]))
 */
      plink2::transpose_quaterblock(__pyx_v_vmaj_iter, __pyx_v_sample_ctaw2, plink2::kPglQuaterTransposeWords, __pyx_v_variant_batch_size, __pyx_v_sample_batch_size, __pyx_v_smaj_iter, __pyx_v_transpose_batch_buf);

      /* "pgenlib.pyx":554
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):             # <<<<<<<<<<<<<<
 *                     data_ptr = <int32_t*>(&(geno_int32_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     genoarr_to_int32s_minus9(smaj_iter, variant_batch_size, data_ptr)
 */
      __pyx_t_17 = __pyx_v_sample_batch_size;
      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
        __pyx_v_uii = __pyx_t_18;

        /* "pgenlib.pyx":555
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = <int32_t*>(&(geno_int32_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch]))             # <<<<<<<<<<<<<<
 *                     genoarr_to_int32s_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 */
        __pyx_t_19 = (__pyx_v_uii + (__pyx_v_sample_batch_idx * plink2::kPglQuaterTransposeBatch));
        __pyx_t_20 = (__pyx_v_variant_batch_idx * plink2::kPglQuaterTransposeBatch);
        __pyx_t_12 = -1;
        if (unlikely(__pyx_t_19 >= (size_t)__pyx_pybuffernd_geno_int32_out.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_20 >= (size_t)__pyx_pybuffernd_geno_int32_out.diminfo[1].shape)) __pyx_t_12 = 1;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_data_ptr = ((int32_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_geno_int32_out.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_geno_int32_out.diminfo[1].strides))));

        /* "pgenlib.pyx":556
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = <int32_t*>(&(geno_int32_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     genoarr_to_int32s_minus9(smaj_iter, variant_batch_size, data_ptr)             # <<<<<<<<<<<<<<
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 */
        plink2::genoarr_to_int32s_minus9(__pyx_v_smaj_iter, __pyx_v_variant_batch_size, __pyx_v_data_ptr);

        /* "pgenlib.pyx":557
 *                     data_ptr = <int32_t*>(&(geno_int32_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     genoarr_to_int32s_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])             # <<<<<<<<<<<<<<
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_idx_offset += kPglQuaterTransposeBatch
 */
        __pyx_v_smaj_iter = (&(__pyx_v_smaj_iter[plink2::kPglQuaterTransposeWords]));
      }

      /* "pgenlib.pyx":558
 *                     genoarr_to_int32s_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])             # <<<<<<<<<<<<<<
 *             variant_idx_offset += kPglQuaterTransposeBatch
 *         return
 */
      __pyx_v_vmaj_iter = (&(__pyx_v_vmaj_iter[plink2::kPglQuaterTransposeWords]));
    }

    /* "pgenlib.pyx":559
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_idx_offset += kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_v_variant_idx_offset = (__pyx_v_variant_idx_offset + plink2::kPglQuaterTransposeBatch);
  }

  /* "pgenlib.pyx":560
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_idx_offset += kPglQuaterTransposeBatch
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cdef read_range_internal64(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int64_t,mode="c",ndim=2] geno_int64_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":494
 *         return
 * 
 *     cdef read_range_internal32(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int32_t,mode="c",ndim=2] geno_int32_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_range_internal32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":562
 *         return
 * 
 *     cdef read_range_internal64(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int64_t,mode="c",ndim=2] geno_int64_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 */

static PyObject *__pyx_f_7pgenlib_10PgenReader_read_range_internal64(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx_start, uint32_t __pyx_v_variant_idx_end, PyArrayObject *__pyx_v_geno_int64_out, struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal64 *__pyx_optional_args) {
  uint32_t __pyx_v_allele_idx = ((uint32_t)1);
  int __pyx_v_sample_maj = ((int)0);
  uintptr_t const *__pyx_v_subset_include_vec;
  uint32_t const *__pyx_v_subset_cumulative_popcounts;
  plink2::pgen_reader_t *__pyx_v_pgrp;
  uintptr_t *__pyx_v_genovec;
  uint32_t __pyx_v_variant_idx_ct;
  uint32_t __pyx_v_subset_size;
  int64_t *__pyx_v_data_ptr;
  uint32_t __pyx_v_variant_idx;
  plink2::pglerr_t __pyx_v_reterr;
  uint32_t __pyx_v_variant_batch_ct;
  uint32_t __pyx_v_variant_batch_size;
  uint32_t __pyx_v_variant_idx_offset;
  uint32_t __pyx_v_sample_ctaw2;
  uint32_t __pyx_v_sample_batch_ct;
  plink2::vul_t *__pyx_v_transpose_batch_buf;
  uintptr_t *__pyx_v_multivar_vmaj_geno_buf;
  uintptr_t *__pyx_v_multivar_smaj_geno_batch_buf;
  uintptr_t *__pyx_v_vmaj_iter;
  uintptr_t *__pyx_v_smaj_iter;
  uint32_t __pyx_v_variant_batch_idx;
  uint32_t __pyx_v_sample_batch_size;
  uint32_t __pyx_v_sample_batch_idx;
  uint32_t __pyx_v_uii;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_geno_int64_out;
  __Pyx_Buffer __pyx_pybuffer_geno_int64_out;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  uintptr_t *__pyx_t_5;
  uint32_t *__pyx_t_6;
  plink2::pgen_reader_t *__pyx_t_7;
  uint32_t __pyx_t_8;
  uint32_t __pyx_t_9;
  size_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  plink2::vul_t *__pyx_t_13;
  long __pyx_t_14;
  uint32_t __pyx_t_15;
  uint32_t __pyx_t_16;
  uint32_t __pyx_t_17;
  uint32_t __pyx_t_18;
  size_t __pyx_t_19;
  size_t __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_range_internal64", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_allele_idx = __pyx_optional_args->allele_idx;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_sample_maj = __pyx_optional_args->sample_maj;
      }
    }
  }
  __pyx_pybuffer_geno_int64_out.pybuffer.buf = NULL;
  __pyx_pybuffer_geno_int64_out.refcount = 0;
  __pyx_pybuffernd_geno_int64_out.data = NULL;
  __pyx_pybuffernd_geno_int64_out.rcbuffer = &__pyx_pybuffer_geno_int64_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_geno_int64_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_geno_int64_out.diminfo[0].strides = __pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_geno_int64_out.diminfo[0].shape = __pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_geno_int64_out.diminfo[1].strides = __pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_geno_int64_out.diminfo[1].shape = __pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer.shape[1];

  /* "pgenlib.pyx":563
 * 
 *     cdef read_range_internal64(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int64_t,mode="c",ndim=2] geno_int64_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */
  __pyx_t_1 = ((__pyx_v_variant_idx_end > (__pyx_v_self->_info_ptr[0]).raw_variant_ct) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":564
 *     cdef read_range_internal64(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int64_t,mode="c",ndim=2] geno_int64_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")             # <<<<<<<<<<<<<<
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 */
    __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_end); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_read_range_variant_idx_end_too_l, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_only); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_uint32_t((__pyx_v_self->_info_ptr[0]).raw_variant_ct); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_in_file_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":563
 * 
 *     cdef read_range_internal64(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int64_t,mode="c",ndim=2] geno_int64_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */
  }

  /* "pgenlib.pyx":565
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec             # <<<<<<<<<<<<<<
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 */
  __pyx_t_5 = __pyx_v_self->_subset_include_vec;
  __pyx_v_subset_include_vec = __pyx_t_5;

  /* "pgenlib.pyx":566
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts             # <<<<<<<<<<<<<<
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec
 */
  __pyx_t_6 = __pyx_v_self->_subset_cumulative_popcounts;
  __pyx_v_subset_cumulative_popcounts = __pyx_t_6;

  /* "pgenlib.pyx":567
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = variant_idx_end - variant_idx_start
 */
  __pyx_t_7 = __pyx_v_self->_state_ptr;
  __pyx_v_pgrp = __pyx_t_7;

  /* "pgenlib.pyx":568
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_idx_ct = variant_idx_end - variant_idx_start
 *         cdef uint32_t subset_size = self._subset_size
 */
  __pyx_t_5 = __pyx_v_self->_genovec;
  __pyx_v_genovec = __pyx_t_5;

  /* "pgenlib.pyx":569
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = variant_idx_end - variant_idx_start             # <<<<<<<<<<<<<<
 *         cdef uint32_t subset_size = self._subset_size
 *         cdef int64_t* data_ptr
 */
  __pyx_v_variant_idx_ct = (__pyx_v_variant_idx_end - __pyx_v_variant_idx_start);

  /* "pgenlib.pyx":570
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = variant_idx_end - variant_idx_start
 *         cdef uint32_t subset_size = self._subset_size             # <<<<<<<<<<<<<<
 *         cdef int64_t* data_ptr
 *         cdef uint32_t variant_idx
 */
  __pyx_t_8 = __pyx_v_self->_subset_size;
  __pyx_v_subset_size = __pyx_t_8;

  /* "pgenlib.pyx":574
 *         cdef uint32_t variant_idx
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:             # <<<<<<<<<<<<<<
 *             if geno_int64_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 */
  __pyx_t_1 = ((__pyx_v_sample_maj == 0) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":575
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:
 *             if geno_int64_out.shape[0] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if geno_int64_out.shape[1] < subset_size:
 */
    __pyx_t_1 = (((__pyx_v_geno_int64_out->dimensions[0]) < __pyx_v_variant_idx_ct) != 0);
    if (__pyx_t_1) {

      /* "pgenlib.pyx":576
 *         if sample_maj == 0:
 *             if geno_int64_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")             # <<<<<<<<<<<<<<
 *             if geno_int64_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 */
      __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int64_out->dimensions[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Variant_major_read_range_geno_in, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_variant_idx_end_variant_idx_sta); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_ct); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":575
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:
 *             if geno_int64_out.shape[0] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if geno_int64_out.shape[1] < subset_size:
 */
    }

    /* "pgenlib.pyx":577
 *             if geno_int64_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if geno_int64_out.shape[1] < subset_size:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 */
    __pyx_t_1 = (((__pyx_v_geno_int64_out->dimensions[1]) < __pyx_v_subset_size) != 0);
    if (__pyx_t_1) {

      /* "pgenlib.pyx":578
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if geno_int64_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")             # <<<<<<<<<<<<<<
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 */
      __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int64_out->dimensions[1])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Variant_major_read_range_geno_in_2, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_current_sample_subset_has_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_subset_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":577
 *             if geno_int64_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if geno_int64_out.shape[1] < subset_size:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 */
    }

    /* "pgenlib.pyx":579
 *             if geno_int64_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_idx in range(variant_idx_start, variant_idx_end):             # <<<<<<<<<<<<<<
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:
 */
    __pyx_t_8 = __pyx_v_variant_idx_end;
    for (__pyx_t_9 = __pyx_v_variant_idx_start; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_variant_idx = __pyx_t_9;

      /* "pgenlib.pyx":580
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::pgr_read_allele_countvec_subset_unsafe(__pyx_v_subset_include_vec, __pyx_v_subset_cumulative_popcounts, __pyx_v_subset_size, __pyx_v_variant_idx, __pyx_v_allele_idx, __pyx_v_pgrp, __pyx_v_genovec);

      /* "pgenlib.pyx":581
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = &(geno_int64_out[(variant_idx - variant_idx_start), 0])
 */
      __pyx_t_1 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_1) {

        /* "pgenlib.pyx":582
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))             # <<<<<<<<<<<<<<
 *                 data_ptr = &(geno_int64_out[(variant_idx - variant_idx_start), 0])
 *                 genoarr_to_int64s_minus9(genovec, subset_size, data_ptr)
 */
        __pyx_t_2 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_Add(__pyx_kp_s_read_range_error, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":581
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = &(geno_int64_out[(variant_idx - variant_idx_start), 0])
 */
      }

      /* "pgenlib.pyx":583
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = &(geno_int64_out[(variant_idx - variant_idx_start), 0])             # <<<<<<<<<<<<<<
 *                 genoarr_to_int64s_minus9(genovec, subset_size, data_ptr)
 *             return
 */
      __pyx_t_10 = (__pyx_v_variant_idx - __pyx_v_variant_idx_start);
      __pyx_t_11 = 0;
      __pyx_t_12 = -1;
      if (unlikely(__pyx_t_10 >= (size_t)__pyx_pybuffernd_geno_int64_out.diminfo[0].shape)) __pyx_t_12 = 0;
      if (__pyx_t_11 < 0) {
        __pyx_t_11 += __pyx_pybuffernd_geno_int64_out.diminfo[1].shape;
        if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 1;
      } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_geno_int64_out.diminfo[1].shape)) __pyx_t_12 = 1;
      if (unlikely(__pyx_t_12 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_12);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_data_ptr = ((int64_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_geno_int64_out.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_geno_int64_out.diminfo[1].strides))));

      /* "pgenlib.pyx":584
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = &(geno_int64_out[(variant_idx - variant_idx_start), 0])
 *                 genoarr_to_int64s_minus9(genovec, subset_size, data_ptr)             # <<<<<<<<<<<<<<
 *             return
 *         if variant_idx_start >= variant_idx_end:
 */
      plink2::genoarr_to_int64s_minus9(__pyx_v_genovec, __pyx_v_subset_size, __pyx_v_data_ptr);
    }

    /* "pgenlib.pyx":585
 *                 data_ptr = &(geno_int64_out[(variant_idx - variant_idx_start), 0])
 *                 genoarr_to_int64s_minus9(genovec, subset_size, data_ptr)
 *             return             # <<<<<<<<<<<<<<
 *         if variant_idx_start >= variant_idx_end:
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "pgenlib.pyx":574
 *         cdef uint32_t variant_idx
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:             # <<<<<<<<<<<<<<
 *             if geno_int64_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_range() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 */
  }

  /* "pgenlib.pyx":586
 *                 genoarr_to_int64s_minus9(genovec, subset_size, data_ptr)
 *             return
 *         if variant_idx_start >= variant_idx_end:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if geno_int64_out.shape[0] < subset_size:
 */
  __pyx_t_1 = ((__pyx_v_variant_idx_start >= __pyx_v_variant_idx_end) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":587
 *             return
 *         if variant_idx_start >= variant_idx_end:
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")             # <<<<<<<<<<<<<<
 *         if geno_int64_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 */
    __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_read_range_variant_idx_start_var, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_end); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_kp_s__7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":586
 *                 genoarr_to_int64s_minus9(genovec, subset_size, data_ptr)
 *             return
 *         if variant_idx_start >= variant_idx_end:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if geno_int64_out.shape[0] < subset_size:
 */
  }

  /* "pgenlib.pyx":588
 *         if variant_idx_start >= variant_idx_end:
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if geno_int64_out.shape[0] < subset_size:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int64_out.shape[1] < variant_idx_ct:
 */
  __pyx_t_1 = (((__pyx_v_geno_int64_out->dimensions[0]) < __pyx_v_subset_size) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":589
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if geno_int64_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")             # <<<<<<<<<<<<<<
 *         if geno_int64_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 */
    __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int64_out->dimensions[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Sample_major_read_range_geno_int, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_current_sample_subset_has_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_subset_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":588
 *         if variant_idx_start >= variant_idx_end:
 *             raise RuntimeError("read_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if geno_int64_out.shape[0] < subset_size:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int64_out.shape[1] < variant_idx_ct:
 */
  }

  /* "pgenlib.pyx":590
 *         if geno_int64_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int64_out.shape[1] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 */
  __pyx_t_1 = (((__pyx_v_geno_int64_out->dimensions[1]) < __pyx_v_variant_idx_ct) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":591
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int64_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 */
    __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int64_out->dimensions[1])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_Sample_major_read_range_geno_int_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_variant_idx_end_variant_idx_sta); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_ct); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":590
 *         if geno_int64_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int64_out.shape[1] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 */
  }

  /* "pgenlib.pyx":592
 *         if geno_int64_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t variant_idx_offset = variant_idx_start
 */
  __pyx_v_variant_batch_ct = DIV_UP(__pyx_v_variant_idx_ct, plink2::kPglQuaterTransposeBatch);

  /* "pgenlib.pyx":593
 *             raise RuntimeError("Sample-major read_range() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_idx_offset = variant_idx_start
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 */
  __pyx_v_variant_batch_size = plink2::kPglQuaterTransposeBatch;

  /* "pgenlib.pyx":594
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t variant_idx_offset = variant_idx_start             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 */
  __pyx_v_variant_idx_offset = __pyx_v_variant_idx_start;

  /* "pgenlib.pyx":595
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t variant_idx_offset = variant_idx_start
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 */
  __pyx_v_sample_ctaw2 = (plink2::kWordsPerVec * DIV_UP(__pyx_v_subset_size, plink2::kBitsPerWordD2));

  /* "pgenlib.pyx":596
 *         cdef uint32_t variant_idx_offset = variant_idx_start
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 */
  __pyx_v_sample_batch_ct = DIV_UP(__pyx_v_subset_size, plink2::kPglQuaterTransposeBatch);

  /* "pgenlib.pyx":597
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 */
  __pyx_t_13 = __pyx_v_self->_transpose_batch_buf;
  __pyx_v_transpose_batch_buf = __pyx_t_13;

  /* "pgenlib.pyx":598
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 *         cdef uintptr_t* vmaj_iter
 */
  __pyx_t_5 = __pyx_v_self->_multivar_vmaj_geno_buf;
  __pyx_v_multivar_vmaj_geno_buf = __pyx_t_5;

  /* "pgenlib.pyx":599
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* vmaj_iter
 *         cdef uintptr_t* smaj_iter
 */
  __pyx_t_5 = __pyx_v_self->_multivar_smaj_geno_batch_buf;
  __pyx_v_multivar_smaj_geno_batch_buf = __pyx_t_5;

  /* "pgenlib.pyx":606
 *         cdef uint32_t sample_batch_idx
 *         cdef uint32_t uii
 *         for variant_batch_idx in range(variant_batch_ct):             # <<<<<<<<<<<<<<
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 */
  __pyx_t_8 = __pyx_v_variant_batch_ct;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_variant_batch_idx = __pyx_t_9;

    /* "pgenlib.pyx":607
 *         cdef uint32_t uii
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):             # <<<<<<<<<<<<<<
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
    __pyx_t_1 = ((__pyx_v_variant_batch_idx == (__pyx_v_variant_batch_ct - 1)) != 0);
    if (__pyx_t_1) {

      /* "pgenlib.pyx":608
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):
 */
      __pyx_t_14 = (__pyx_v_variant_idx_ct - 1);
      if (unlikely(plink2::kPglQuaterTransposeBatch == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_variant_batch_size = (1 + ((uint32_t)__Pyx_mod_long(__pyx_t_14, plink2::kPglQuaterTransposeBatch)));

      /* "pgenlib.pyx":607
 *         cdef uint32_t uii
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):             # <<<<<<<<<<<<<<
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
    }

    /* "pgenlib.pyx":609
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *             for uii in range(variant_batch_size):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)
 */
    __pyx_v_vmaj_iter = __pyx_v_multivar_vmaj_geno_buf;

    /* "pgenlib.pyx":610
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):             # <<<<<<<<<<<<<<
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:
 */
    __pyx_t_15 = __pyx_v_variant_batch_size;
    for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
      __pyx_v_uii = __pyx_t_16;

      /* "pgenlib.pyx":611
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::pgr_read_allele_countvec_subset_unsafe(__pyx_v_subset_include_vec, __pyx_v_subset_cumulative_popcounts, __pyx_v_subset_size, (__pyx_v_uii + __pyx_v_variant_idx_offset), __pyx_v_allele_idx, __pyx_v_pgrp, __pyx_v_vmaj_iter);

      /* "pgenlib.pyx":612
 *             for uii in range(variant_batch_size):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 */
      __pyx_t_1 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_1) {

        /* "pgenlib.pyx":613
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))             # <<<<<<<<<<<<<<
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch
 */
        __pyx_t_3 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Add(__pyx_kp_s_read_range_error, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":612
 *             for uii in range(variant_batch_size):
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 */
      }

      /* "pgenlib.pyx":614
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])             # <<<<<<<<<<<<<<
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
      __pyx_v_vmaj_iter = (&(__pyx_v_vmaj_iter[__pyx_v_sample_ctaw2]));
    }

    /* "pgenlib.pyx":615
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 */
    __pyx_v_sample_batch_size = plink2::kPglQuaterTransposeBatch;

    /* "pgenlib.pyx":616
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:
 */
    __pyx_v_vmaj_iter = __pyx_v_multivar_vmaj_geno_buf;

    /* "pgenlib.pyx":617
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):             # <<<<<<<<<<<<<<
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 */
    __pyx_t_15 = __pyx_v_sample_batch_ct;
    for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
      __pyx_v_sample_batch_idx = __pyx_t_16;

      /* "pgenlib.pyx":618
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:             # <<<<<<<<<<<<<<
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 */
      __pyx_t_1 = ((__pyx_v_sample_batch_idx == (__pyx_v_sample_batch_ct - 1)) != 0);
      if (__pyx_t_1) {

        /* "pgenlib.pyx":619
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 */
        __pyx_t_14 = (__pyx_v_subset_size - 1);
        if (unlikely(plink2::kPglQuaterTransposeBatch == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_sample_batch_size = (1 + ((uint32_t)__Pyx_mod_long(__pyx_t_14, plink2::kPglQuaterTransposeBatch)));

        /* "pgenlib.pyx":618
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:             # <<<<<<<<<<<<<<
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 */
      }

      /* "pgenlib.pyx":620
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf             # <<<<<<<<<<<<<<
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):
 */
      __pyx_v_smaj_iter = __pyx_v_multivar_smaj_geno_batch_buf;

      /* "pgenlib.pyx":621
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)             # <<<<<<<<<<<<<<
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = &(geno_int64_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])
 */
      plink2::transpose_quaterblock(__pyx_v_vmaj_iter, __pyx_v_sample_ctaw2, plink2::kPglQuaterTransposeWords, __pyx_v_variant_batch_size, __pyx_v_sample_batch_size, __pyx_v_smaj_iter, __pyx_v_transpose_batch_buf);

      /* "pgenlib.pyx":622
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):             # <<<<<<<<<<<<<<
 *                     data_ptr = &(geno_int64_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])
 *                     genoarr_to_int64s_minus9(smaj_iter, variant_batch_size, data_ptr)
 */
      __pyx_t_17 = __pyx_v_sample_batch_size;
      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
        __pyx_v_uii = __pyx_t_18;

        /* "pgenlib.pyx":623
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = &(geno_int64_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])             # <<<<<<<<<<<<<<
 *                     genoarr_to_int64s_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 */
        __pyx_t_19 = (__pyx_v_uii + (__pyx_v_sample_batch_idx * plink2::kPglQuaterTransposeBatch));
        __pyx_t_20 = (__pyx_v_variant_batch_idx * plink2::kPglQuaterTransposeBatch);
        __pyx_t_12 = -1;
        if (unlikely(__pyx_t_19 >= (size_t)__pyx_pybuffernd_geno_int64_out.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_20 >= (size_t)__pyx_pybuffernd_geno_int64_out.diminfo[1].shape)) __pyx_t_12 = 1;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_data_ptr = ((int64_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_geno_int64_out.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_geno_int64_out.diminfo[1].strides))));

        /* "pgenlib.pyx":624
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = &(geno_int64_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])
 *                     genoarr_to_int64s_minus9(smaj_iter, variant_batch_size, data_ptr)             # <<<<<<<<<<<<<<
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 */
        plink2::genoarr_to_int64s_minus9(__pyx_v_smaj_iter, __pyx_v_variant_batch_size, __pyx_v_data_ptr);

        /* "pgenlib.pyx":625
 *                     data_ptr = &(geno_int64_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])
 *                     genoarr_to_int64s_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])             # <<<<<<<<<<<<<<
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_idx_offset += kPglQuaterTransposeBatch
 */
        __pyx_v_smaj_iter = (&(__pyx_v_smaj_iter[plink2::kPglQuaterTransposeWords]));
      }

      /* "pgenlib.pyx":626
 *                     genoarr_to_int64s_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])             # <<<<<<<<<<<<<<
 *             variant_idx_offset += kPglQuaterTransposeBatch
 *         return
 */
      __pyx_v_vmaj_iter = (&(__pyx_v_vmaj_iter[plink2::kPglQuaterTransposeWords]));
    }

    /* "pgenlib.pyx":627
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_idx_offset += kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_v_variant_idx_offset = (__pyx_v_variant_idx_offset + plink2::kPglQuaterTransposeBatch);
  }

  /* "pgenlib.pyx":628
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_idx_offset += kPglQuaterTransposeBatch
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cpdef read_range(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray geno_int_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":562
 *         return
 * 
 *     cdef read_range_internal64(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int64_t,mode="c",ndim=2] geno_int64_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_range_internal64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":630
 *         return
 * 
 *     cpdef read_range(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray geno_int_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         # C-contiguity checked by read_range_internal8(), etc.
 *         if geno_int_out.dtype == np.int8:
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_19read_range(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_range(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx_start, uint32_t __pyx_v_variant_idx_end, PyArrayObject *__pyx_v_geno_int_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_range *__pyx_optional_args) {
  uint32_t __pyx_v_allele_idx = ((uint32_t)1);
  int __pyx_v_sample_maj = ((int)0);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal8 __pyx_t_12;
  struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal32 __pyx_t_13;
  struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal64 __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_range", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_allele_idx = __pyx_optional_args->allele_idx;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_sample_maj = __pyx_optional_args->sample_maj;
      }
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_range); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_19read_range)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_end); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_uint32_t(__pyx_v_allele_idx); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_sample_maj); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_7 = __pyx_t_1; __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_9 = 1;
        }
      }
      __pyx_t_10 = PyTuple_New(5+__pyx_t_9); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_4);
      __Pyx_INCREF(((PyObject *)__pyx_v_geno_int_out));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_geno_int_out));
      PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_9, ((PyObject *)__pyx_v_geno_int_out));
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_9, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 4+__pyx_t_9, __pyx_t_6);
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":632
 *     cpdef read_range(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray geno_int_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         # C-contiguity checked by read_range_internal8(), etc.
 *         if geno_int_out.dtype == np.int8:             # <<<<<<<<<<<<<<
 *             self.read_range_internal8(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int32:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_geno_int_out), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_11) {

    /* "pgenlib.pyx":633
 *         # C-contiguity checked by read_range_internal8(), etc.
 *         if geno_int_out.dtype == np.int8:
 *             self.read_range_internal8(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)             # <<<<<<<<<<<<<<
 *         elif geno_int_out.dtype == np.int32:
 *             self.read_range_internal32(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)
 */
    __pyx_t_12.__pyx_n = 2;
    __pyx_t_12.allele_idx = __pyx_v_allele_idx;
    __pyx_t_12.sample_maj = __pyx_v_sample_maj;
    __pyx_t_2 = ((struct __pyx_vtabstruct_7pgenlib_PgenReader *)__pyx_v_self->__pyx_vtab)->read_range_internal8(__pyx_v_self, __pyx_v_variant_idx_start, __pyx_v_variant_idx_end, ((PyArrayObject *)__pyx_v_geno_int_out), &__pyx_t_12); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pgenlib.pyx":632
 *     cpdef read_range(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray geno_int_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         # C-contiguity checked by read_range_internal8(), etc.
 *         if geno_int_out.dtype == np.int8:             # <<<<<<<<<<<<<<
 *             self.read_range_internal8(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int32:
 */
    goto __pyx_L3;
  }

  /* "pgenlib.pyx":634
 *         if geno_int_out.dtype == np.int8:
 *             self.read_range_internal8(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int32:             # <<<<<<<<<<<<<<
 *             self.read_range_internal32(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int64:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_geno_int_out), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_11) {

    /* "pgenlib.pyx":635
 *             self.read_range_internal8(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int32:
 *             self.read_range_internal32(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)             # <<<<<<<<<<<<<<
 *         elif geno_int_out.dtype == np.int64:
 *             self.read_range_internal64(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)
 */
    __pyx_t_13.__pyx_n = 2;
    __pyx_t_13.allele_idx = __pyx_v_allele_idx;
    __pyx_t_13.sample_maj = __pyx_v_sample_maj;
    __pyx_t_7 = ((struct __pyx_vtabstruct_7pgenlib_PgenReader *)__pyx_v_self->__pyx_vtab)->read_range_internal32(__pyx_v_self, __pyx_v_variant_idx_start, __pyx_v_variant_idx_end, ((PyArrayObject *)__pyx_v_geno_int_out), &__pyx_t_13); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pgenlib.pyx":634
 *         if geno_int_out.dtype == np.int8:
 *             self.read_range_internal8(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int32:             # <<<<<<<<<<<<<<
 *             self.read_range_internal32(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int64:
 */
    goto __pyx_L3;
  }

  /* "pgenlib.pyx":636
 *         elif geno_int_out.dtype == np.int32:
 *             self.read_range_internal32(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int64:             # <<<<<<<<<<<<<<
 *             self.read_range_internal64(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)
 *         else:
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_geno_int_out), __pyx_n_s_dtype); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int64); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_11) {

    /* "pgenlib.pyx":637
 *             self.read_range_internal32(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int64:
 *             self.read_range_internal64(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)             # <<<<<<<<<<<<<<
 *         else:
 *             raise RuntimeError("Invalid read_range() geno_int_out array element type (int8, int32, or int64 expected).")
 */
    __pyx_t_14.__pyx_n = 2;
    __pyx_t_14.allele_idx = __pyx_v_allele_idx;
    __pyx_t_14.sample_maj = __pyx_v_sample_maj;
    __pyx_t_1 = ((struct __pyx_vtabstruct_7pgenlib_PgenReader *)__pyx_v_self->__pyx_vtab)->read_range_internal64(__pyx_v_self, __pyx_v_variant_idx_start, __pyx_v_variant_idx_end, ((PyArrayObject *)__pyx_v_geno_int_out), &__pyx_t_14); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pgenlib.pyx":636
 *         elif geno_int_out.dtype == np.int32:
 *             self.read_range_internal32(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int64:             # <<<<<<<<<<<<<<
 *             self.read_range_internal64(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pgenlib.pyx":639
 *             self.read_range_internal64(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)
 *         else:
 *             raise RuntimeError("Invalid read_range() geno_int_out array element type (int8, int32, or int64 expected).")             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "pgenlib.pyx":640
 *         else:
 *             raise RuntimeError("Invalid read_range() geno_int_out array element type (int8, int32, or int64 expected).")
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":630
 *         return
 * 
 *     cpdef read_range(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray geno_int_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         # C-contiguity checked by read_range_internal8(), etc.
 *         if geno_int_out.dtype == np.int8:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pgenlib.PgenReader.read_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_19read_range(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_19read_range(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint32_t __pyx_v_variant_idx_start;
  uint32_t __pyx_v_variant_idx_end;
  PyArrayObject *__pyx_v_geno_int_out = 0;
  uint32_t __pyx_v_allele_idx;
  int __pyx_v_sample_maj;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_range (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variant_idx_start,&__pyx_n_s_variant_idx_end,&__pyx_n_s_geno_int_out,&__pyx_n_s_allele_idx,&__pyx_n_s_sample_maj,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variant_idx_start)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variant_idx_end)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_range", 0, 3, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_geno_int_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_range", 0, 3, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allele_idx);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sample_maj);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_range") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_variant_idx_start = __Pyx_PyInt_As_uint32_t(values[0]); if (unlikely((__pyx_v_variant_idx_start == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_variant_idx_end = __Pyx_PyInt_As_uint32_t(values[1]); if (unlikely((__pyx_v_variant_idx_end == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_geno_int_out = ((PyArrayObject *)values[2]);
    if (values[3]) {
      __pyx_v_allele_idx = __Pyx_PyInt_As_uint32_t(values[3]); if (unlikely((__pyx_v_allele_idx == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_allele_idx = ((uint32_t)1);
    }
    if (values[4]) {
      __pyx_v_sample_maj = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_sample_maj == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sample_maj = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_range", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenReader.read_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geno_int_out), __pyx_ptype_5numpy_ndarray, 1, "geno_int_out", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_18read_range(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self), __pyx_v_variant_idx_start, __pyx_v_variant_idx_end, __pyx_v_geno_int_out, __pyx_v_allele_idx, __pyx_v_sample_maj);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_18read_range(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx_start, uint32_t __pyx_v_variant_idx_end, PyArrayObject *__pyx_v_geno_int_out, uint32_t __pyx_v_allele_idx, int __pyx_v_sample_maj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_7pgenlib_10PgenReader_read_range __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_range", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.allele_idx = __pyx_v_allele_idx;
  __pyx_t_2.sample_maj = __pyx_v_sample_maj;
  __pyx_t_1 = __pyx_vtabptr_7pgenlib_PgenReader->read_range(__pyx_v_self, __pyx_v_variant_idx_start, __pyx_v_variant_idx_end, __pyx_v_geno_int_out, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pgenlib.PgenReader.read_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":643
 * 
 * 
 *     cdef read_list_internal8(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int8_t,mode="c",ndim=2] geno_int8_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */

static PyObject *__pyx_f_7pgenlib_10PgenReader_read_list_internal8(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_variant_idxs, PyArrayObject *__pyx_v_geno_int8_out, struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal8 *__pyx_optional_args) {
  uint32_t __pyx_v_allele_idx = ((uint32_t)1);
  int __pyx_v_sample_maj = ((int)0);
  uint32_t __pyx_v_raw_variant_ct;
  uintptr_t const *__pyx_v_subset_include_vec;
  uint32_t const *__pyx_v_subset_cumulative_popcounts;
  plink2::pgen_reader_t *__pyx_v_pgrp;
  uintptr_t *__pyx_v_genovec;
  uint32_t __pyx_v_variant_idx_ct;
  uint32_t __pyx_v_subset_size;
  int8_t *__pyx_v_data_ptr;
  uint32_t __pyx_v_variant_list_idx;
  uint32_t __pyx_v_variant_idx;
  plink2::pglerr_t __pyx_v_reterr;
  uint32_t __pyx_v_variant_batch_ct;
  uint32_t __pyx_v_variant_batch_size;
  uint32_t __pyx_v_sample_ctaw2;
  uint32_t __pyx_v_sample_batch_ct;
  plink2::vul_t *__pyx_v_transpose_batch_buf;
  uintptr_t *__pyx_v_multivar_vmaj_geno_buf;
  uintptr_t *__pyx_v_multivar_smaj_geno_batch_buf;
  uintptr_t *__pyx_v_vmaj_iter;
  uintptr_t *__pyx_v_smaj_iter;
  uint32_t __pyx_v_variant_batch_idx;
  uint32_t __pyx_v_sample_batch_size;
  uint32_t __pyx_v_sample_batch_idx;
  uint32_t __pyx_v_uii;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_geno_int8_out;
  __Pyx_Buffer __pyx_pybuffer_geno_int8_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_variant_idxs;
  __Pyx_Buffer __pyx_pybuffer_variant_idxs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uintptr_t *__pyx_t_2;
  uint32_t *__pyx_t_3;
  plink2::pgen_reader_t *__pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  uint32_t __pyx_t_9;
  size_t __pyx_t_10;
  int __pyx_t_11;
  size_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  plink2::vul_t *__pyx_t_14;
  long __pyx_t_15;
  uint32_t __pyx_t_16;
  uint32_t __pyx_t_17;
  size_t __pyx_t_18;
  uint32_t __pyx_t_19;
  uint32_t __pyx_t_20;
  size_t __pyx_t_21;
  size_t __pyx_t_22;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_list_internal8", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_allele_idx = __pyx_optional_args->allele_idx;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_sample_maj = __pyx_optional_args->sample_maj;
      }
    }
  }
  __pyx_pybuffer_variant_idxs.pybuffer.buf = NULL;
  __pyx_pybuffer_variant_idxs.refcount = 0;
  __pyx_pybuffernd_variant_idxs.data = NULL;
  __pyx_pybuffernd_variant_idxs.rcbuffer = &__pyx_pybuffer_variant_idxs;
  __pyx_pybuffer_geno_int8_out.pybuffer.buf = NULL;
  __pyx_pybuffer_geno_int8_out.refcount = 0;
  __pyx_pybuffernd_geno_int8_out.data = NULL;
  __pyx_pybuffernd_geno_int8_out.rcbuffer = &__pyx_pybuffer_geno_int8_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer, (PyObject*)__pyx_v_variant_idxs, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_variant_idxs.diminfo[0].strides = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_variant_idxs.diminfo[0].shape = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_geno_int8_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_geno_int8_out.diminfo[0].strides = __pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_geno_int8_out.diminfo[0].shape = __pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_geno_int8_out.diminfo[1].strides = __pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_geno_int8_out.diminfo[1].shape = __pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer.shape[1];

  /* "pgenlib.pyx":644
 * 
 *     cdef read_list_internal8(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int8_t,mode="c",ndim=2] geno_int8_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct             # <<<<<<<<<<<<<<
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 */
  __pyx_t_1 = (__pyx_v_self->_info_ptr[0]).raw_variant_ct;
  __pyx_v_raw_variant_ct = __pyx_t_1;

  /* "pgenlib.pyx":645
 *     cdef read_list_internal8(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int8_t,mode="c",ndim=2] geno_int8_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec             # <<<<<<<<<<<<<<
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 */
  __pyx_t_2 = __pyx_v_self->_subset_include_vec;
  __pyx_v_subset_include_vec = __pyx_t_2;

  /* "pgenlib.pyx":646
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts             # <<<<<<<<<<<<<<
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec
 */
  __pyx_t_3 = __pyx_v_self->_subset_cumulative_popcounts;
  __pyx_v_subset_cumulative_popcounts = __pyx_t_3;

  /* "pgenlib.pyx":647
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = <uint32_t>variant_idxs.shape[0]
 */
  __pyx_t_4 = __pyx_v_self->_state_ptr;
  __pyx_v_pgrp = __pyx_t_4;

  /* "pgenlib.pyx":648
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_idx_ct = <uint32_t>variant_idxs.shape[0]
 *         cdef uint32_t subset_size = self._subset_size
 */
  __pyx_t_2 = __pyx_v_self->_genovec;
  __pyx_v_genovec = __pyx_t_2;

  /* "pgenlib.pyx":649
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = <uint32_t>variant_idxs.shape[0]             # <<<<<<<<<<<<<<
 *         cdef uint32_t subset_size = self._subset_size
 *         cdef int8_t* data_ptr
 */
  __pyx_v_variant_idx_ct = ((uint32_t)(__pyx_v_variant_idxs->dimensions[0]));

  /* "pgenlib.pyx":650
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = <uint32_t>variant_idxs.shape[0]
 *         cdef uint32_t subset_size = self._subset_size             # <<<<<<<<<<<<<<
 *         cdef int8_t* data_ptr
 *         cdef uint32_t variant_list_idx
 */
  __pyx_t_1 = __pyx_v_self->_subset_size;
  __pyx_v_subset_size = __pyx_t_1;

  /* "pgenlib.pyx":655
 *         cdef uint32_t variant_idx
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:             # <<<<<<<<<<<<<<
 *             if geno_int8_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 */
  __pyx_t_5 = ((__pyx_v_sample_maj == 0) != 0);
  if (__pyx_t_5) {

    /* "pgenlib.pyx":656
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:
 *             if geno_int8_out.shape[0] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if geno_int8_out.shape[1] < subset_size:
 */
    __pyx_t_5 = (((__pyx_v_geno_int8_out->dimensions[0]) < __pyx_v_variant_idx_ct) != 0);
    if (__pyx_t_5) {

      /* "pgenlib.pyx":657
 *         if sample_maj == 0:
 *             if geno_int8_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")             # <<<<<<<<<<<<<<
 *             if geno_int8_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 */
      __pyx_t_6 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int8_out->dimensions[0])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s_Variant_major_read_list_geno_int, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_kp_s_variant_idxs_length_is); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_ct); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Add(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_t_8, __pyx_kp_s__7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":656
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:
 *             if geno_int8_out.shape[0] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if geno_int8_out.shape[1] < subset_size:
 */
    }

    /* "pgenlib.pyx":658
 *             if geno_int8_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if geno_int8_out.shape[1] < subset_size:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_list_idx in range(variant_idx_ct):
 */
    __pyx_t_5 = (((__pyx_v_geno_int8_out->dimensions[1]) < __pyx_v_subset_size) != 0);
    if (__pyx_t_5) {

      /* "pgenlib.pyx":659
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if geno_int8_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")             # <<<<<<<<<<<<<<
 *             for variant_list_idx in range(variant_idx_ct):
 *                 variant_idx = variant_idxs[variant_list_idx]
 */
      __pyx_t_7 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int8_out->dimensions[1])); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Add(__pyx_kp_s_Variant_major_read_list_geno_int_2, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_t_8, __pyx_kp_s_current_sample_subset_has_size); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyInt_From_uint32_t(__pyx_v_subset_size); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Add(__pyx_t_6, __pyx_kp_s__7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":658
 *             if geno_int8_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if geno_int8_out.shape[1] < subset_size:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_list_idx in range(variant_idx_ct):
 */
    }

    /* "pgenlib.pyx":660
 *             if geno_int8_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_list_idx in range(variant_idx_ct):             # <<<<<<<<<<<<<<
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:
 */
    __pyx_t_1 = __pyx_v_variant_idx_ct;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_1; __pyx_t_9+=1) {
      __pyx_v_variant_list_idx = __pyx_t_9;

      /* "pgenlib.pyx":661
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_list_idx in range(variant_idx_ct):
 *                 variant_idx = variant_idxs[variant_list_idx]             # <<<<<<<<<<<<<<
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 */
      __pyx_t_10 = __pyx_v_variant_list_idx;
      __pyx_t_11 = -1;
      if (unlikely(__pyx_t_10 >= (size_t)__pyx_pybuffernd_variant_idxs.diminfo[0].shape)) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_variant_idx = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_variant_idxs.diminfo[0].strides));

      /* "pgenlib.pyx":662
 *             for variant_list_idx in range(variant_idx_ct):
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 */
      __pyx_t_5 = ((__pyx_v_variant_idx >= __pyx_v_raw_variant_ct) != 0);
      if (__pyx_t_5) {

        /* "pgenlib.pyx":663
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")             # <<<<<<<<<<<<<<
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:
 */
        __pyx_t_8 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Add(__pyx_kp_s_read_list_variant_index_too_larg, __pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_only); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyInt_From_uint32_t(__pyx_v_raw_variant_ct); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_kp_s_in_file_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_6, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":662
 *             for variant_list_idx in range(variant_idx_ct):
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 */
      }

      /* "pgenlib.pyx":664
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::pgr_read_allele_countvec_subset_unsafe(__pyx_v_subset_include_vec, __pyx_v_subset_cumulative_popcounts, __pyx_v_subset_size, __pyx_v_variant_idx, __pyx_v_allele_idx, __pyx_v_pgrp, __pyx_v_genovec);

      /* "pgenlib.pyx":665
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = &(geno_int8_out[variant_list_idx, 0])
 */
      __pyx_t_5 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_5) {

        /* "pgenlib.pyx":666
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))             # <<<<<<<<<<<<<<
 *                 data_ptr = &(geno_int8_out[variant_list_idx, 0])
 *                 genoarr_to_bytes_minus9(genovec, subset_size, data_ptr)
 */
        __pyx_t_6 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_kp_s_read_range_error, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":665
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = &(geno_int8_out[variant_list_idx, 0])
 */
      }

      /* "pgenlib.pyx":667
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = &(geno_int8_out[variant_list_idx, 0])             # <<<<<<<<<<<<<<
 *                 genoarr_to_bytes_minus9(genovec, subset_size, data_ptr)
 *             return
 */
      __pyx_t_12 = __pyx_v_variant_list_idx;
      __pyx_t_13 = 0;
      __pyx_t_11 = -1;
      if (unlikely(__pyx_t_12 >= (size_t)__pyx_pybuffernd_geno_int8_out.diminfo[0].shape)) __pyx_t_11 = 0;
      if (__pyx_t_13 < 0) {
        __pyx_t_13 += __pyx_pybuffernd_geno_int8_out.diminfo[1].shape;
        if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 1;
      } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_geno_int8_out.diminfo[1].shape)) __pyx_t_11 = 1;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_data_ptr = (&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int8_t *, __pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_geno_int8_out.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_geno_int8_out.diminfo[1].strides)));

      /* "pgenlib.pyx":668
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = &(geno_int8_out[variant_list_idx, 0])
 *                 genoarr_to_bytes_minus9(genovec, subset_size, data_ptr)             # <<<<<<<<<<<<<<
 *             return
 *         if geno_int8_out.shape[0] < subset_size:
 */
      plink2::genoarr_to_bytes_minus9(__pyx_v_genovec, __pyx_v_subset_size, __pyx_v_data_ptr);
    }

    /* "pgenlib.pyx":669
 *                 data_ptr = &(geno_int8_out[variant_list_idx, 0])
 *                 genoarr_to_bytes_minus9(genovec, subset_size, data_ptr)
 *             return             # <<<<<<<<<<<<<<
 *         if geno_int8_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "pgenlib.pyx":655
 *         cdef uint32_t variant_idx
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:             # <<<<<<<<<<<<<<
 *             if geno_int8_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 */
  }

  /* "pgenlib.pyx":670
 *                 genoarr_to_bytes_minus9(genovec, subset_size, data_ptr)
 *             return
 *         if geno_int8_out.shape[0] < subset_size:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int8_out.shape[1] < variant_idx_ct:
 */
  __pyx_t_5 = (((__pyx_v_geno_int8_out->dimensions[0]) < __pyx_v_subset_size) != 0);
  if (__pyx_t_5) {

    /* "pgenlib.pyx":671
 *             return
 *         if geno_int8_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")             # <<<<<<<<<<<<<<
 *         if geno_int8_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 */
    __pyx_t_7 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int8_out->dimensions[0])); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_kp_s_Sample_major_read_list_geno_int, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_current_sample_subset_has_size); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyInt_From_uint32_t(__pyx_v_subset_size); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_8, __pyx_kp_s__7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":670
 *                 genoarr_to_bytes_minus9(genovec, subset_size, data_ptr)
 *             return
 *         if geno_int8_out.shape[0] < subset_size:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int8_out.shape[1] < variant_idx_ct:
 */
  }

  /* "pgenlib.pyx":672
 *         if geno_int8_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int8_out.shape[1] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 */
  __pyx_t_5 = (((__pyx_v_geno_int8_out->dimensions[1]) < __pyx_v_variant_idx_ct) != 0);
  if (__pyx_t_5) {

    /* "pgenlib.pyx":673
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int8_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 */
    __pyx_t_6 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int8_out->dimensions[1])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_kp_s_Sample_major_read_list_geno_int_2, __pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_8, __pyx_kp_s_variant_idxs_length_is); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_ct); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_t_7, __pyx_kp_s__7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":672
 *         if geno_int8_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int8_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int8_out.shape[1] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 */
  }

  /* "pgenlib.pyx":674
 *         if geno_int8_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 */
  __pyx_v_variant_batch_ct = DIV_UP(__pyx_v_variant_idx_ct, plink2::kPglQuaterTransposeBatch);

  /* "pgenlib.pyx":675
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int8_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 */
  __pyx_v_variant_batch_size = plink2::kPglQuaterTransposeBatch;

  /* "pgenlib.pyx":676
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 */
  __pyx_v_sample_ctaw2 = (plink2::kWordsPerVec * DIV_UP(__pyx_v_subset_size, plink2::kBitsPerWordD2));

  /* "pgenlib.pyx":677
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 */
  __pyx_v_sample_batch_ct = DIV_UP(__pyx_v_subset_size, plink2::kPglQuaterTransposeBatch);

  /* "pgenlib.pyx":678
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 */
  __pyx_t_14 = __pyx_v_self->_transpose_batch_buf;
  __pyx_v_transpose_batch_buf = __pyx_t_14;

  /* "pgenlib.pyx":679
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 *         cdef uintptr_t* vmaj_iter
 */
  __pyx_t_2 = __pyx_v_self->_multivar_vmaj_geno_buf;
  __pyx_v_multivar_vmaj_geno_buf = __pyx_t_2;

  /* "pgenlib.pyx":680
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* vmaj_iter
 *         cdef uintptr_t* smaj_iter
 */
  __pyx_t_2 = __pyx_v_self->_multivar_smaj_geno_batch_buf;
  __pyx_v_multivar_smaj_geno_batch_buf = __pyx_t_2;

  /* "pgenlib.pyx":687
 *         cdef uint32_t sample_batch_idx
 *         cdef uint32_t uii
 *         variant_list_idx = 0             # <<<<<<<<<<<<<<
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):
 */
  __pyx_v_variant_list_idx = 0;

  /* "pgenlib.pyx":688
 *         cdef uint32_t uii
 *         variant_list_idx = 0
 *         for variant_batch_idx in range(variant_batch_ct):             # <<<<<<<<<<<<<<
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 */
  __pyx_t_1 = __pyx_v_variant_batch_ct;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_1; __pyx_t_9+=1) {
    __pyx_v_variant_batch_idx = __pyx_t_9;

    /* "pgenlib.pyx":689
 *         variant_list_idx = 0
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):             # <<<<<<<<<<<<<<
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
    __pyx_t_5 = ((__pyx_v_variant_batch_idx == (__pyx_v_variant_batch_ct - 1)) != 0);
    if (__pyx_t_5) {

      /* "pgenlib.pyx":690
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):
 */
      __pyx_t_15 = (__pyx_v_variant_idx_ct - 1);
      if (unlikely(plink2::kPglQuaterTransposeBatch == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_variant_batch_size = (1 + ((uint32_t)__Pyx_mod_long(__pyx_t_15, plink2::kPglQuaterTransposeBatch)));

      /* "pgenlib.pyx":689
 *         variant_list_idx = 0
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):             # <<<<<<<<<<<<<<
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
    }

    /* "pgenlib.pyx":691
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *             for uii in range(variant_batch_size):
 *                 variant_idx = variant_idxs[uii + variant_list_idx]
 */
    __pyx_v_vmaj_iter = __pyx_v_multivar_vmaj_geno_buf;

    /* "pgenlib.pyx":692
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):             # <<<<<<<<<<<<<<
 *                 variant_idx = variant_idxs[uii + variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:
 */
    __pyx_t_16 = __pyx_v_variant_batch_size;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_uii = __pyx_t_17;

      /* "pgenlib.pyx":693
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):
 *                 variant_idx = variant_idxs[uii + variant_list_idx]             # <<<<<<<<<<<<<<
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 */
      __pyx_t_18 = (__pyx_v_uii + __pyx_v_variant_list_idx);
      __pyx_t_11 = -1;
      if (unlikely(__pyx_t_18 >= (size_t)__pyx_pybuffernd_variant_idxs.diminfo[0].shape)) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_variant_idx = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_variant_idxs.diminfo[0].strides));

      /* "pgenlib.pyx":694
 *             for uii in range(variant_batch_size):
 *                 variant_idx = variant_idxs[uii + variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 */
      __pyx_t_5 = ((__pyx_v_variant_idx >= __pyx_v_raw_variant_ct) != 0);
      if (__pyx_t_5) {

        /* "pgenlib.pyx":695
 *                 variant_idx = variant_idxs[uii + variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")             # <<<<<<<<<<<<<<
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:
 */
        __pyx_t_8 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_kp_s_read_list_variant_index_too_larg, __pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Add(__pyx_t_7, __pyx_kp_s_only); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyInt_From_uint32_t(__pyx_v_raw_variant_ct); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Add(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_in_file_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":694
 *             for uii in range(variant_batch_size):
 *                 variant_idx = variant_idxs[uii + variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 */
      }

      /* "pgenlib.pyx":696
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_list() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::pgr_read_allele_countvec_subset_unsafe(__pyx_v_subset_include_vec, __pyx_v_subset_cumulative_popcounts, __pyx_v_subset_size, __pyx_v_variant_idx, __pyx_v_allele_idx, __pyx_v_pgrp, __pyx_v_vmaj_iter);

      /* "pgenlib.pyx":697
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 */
      __pyx_t_5 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_5) {

        /* "pgenlib.pyx":698
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_list() error " + str(reterr))             # <<<<<<<<<<<<<<
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch
 */
        __pyx_t_7 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Add(__pyx_kp_s_read_list_error, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_6, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":697
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 */
      }

      /* "pgenlib.pyx":699
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_list() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])             # <<<<<<<<<<<<<<
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
      __pyx_v_vmaj_iter = (&(__pyx_v_vmaj_iter[__pyx_v_sample_ctaw2]));
    }

    /* "pgenlib.pyx":700
 *                     raise RuntimeError("read_list() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 */
    __pyx_v_sample_batch_size = plink2::kPglQuaterTransposeBatch;

    /* "pgenlib.pyx":701
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:
 */
    __pyx_v_vmaj_iter = __pyx_v_multivar_vmaj_geno_buf;

    /* "pgenlib.pyx":702
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):             # <<<<<<<<<<<<<<
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 */
    __pyx_t_16 = __pyx_v_sample_batch_ct;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_sample_batch_idx = __pyx_t_17;

      /* "pgenlib.pyx":703
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:             # <<<<<<<<<<<<<<
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 */
      __pyx_t_5 = ((__pyx_v_sample_batch_idx == (__pyx_v_sample_batch_ct - 1)) != 0);
      if (__pyx_t_5) {

        /* "pgenlib.pyx":704
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 */
        __pyx_t_15 = (__pyx_v_subset_size - 1);
        if (unlikely(plink2::kPglQuaterTransposeBatch == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_sample_batch_size = (1 + ((uint32_t)__Pyx_mod_long(__pyx_t_15, plink2::kPglQuaterTransposeBatch)));

        /* "pgenlib.pyx":703
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:             # <<<<<<<<<<<<<<
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 */
      }

      /* "pgenlib.pyx":705
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf             # <<<<<<<<<<<<<<
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):
 */
      __pyx_v_smaj_iter = __pyx_v_multivar_smaj_geno_batch_buf;

      /* "pgenlib.pyx":706
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)             # <<<<<<<<<<<<<<
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = &(geno_int8_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])
 */
      plink2::transpose_quaterblock(__pyx_v_vmaj_iter, __pyx_v_sample_ctaw2, plink2::kPglQuaterTransposeWords, __pyx_v_variant_batch_size, __pyx_v_sample_batch_size, __pyx_v_smaj_iter, __pyx_v_transpose_batch_buf);

      /* "pgenlib.pyx":707
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):             # <<<<<<<<<<<<<<
 *                     data_ptr = &(geno_int8_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])
 *                     genoarr_to_bytes_minus9(smaj_iter, variant_batch_size, data_ptr)
 */
      __pyx_t_19 = __pyx_v_sample_batch_size;
      for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
        __pyx_v_uii = __pyx_t_20;

        /* "pgenlib.pyx":708
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = &(geno_int8_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])             # <<<<<<<<<<<<<<
 *                     genoarr_to_bytes_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 */
        __pyx_t_21 = (__pyx_v_uii + (__pyx_v_sample_batch_idx * plink2::kPglQuaterTransposeBatch));
        __pyx_t_22 = (__pyx_v_variant_batch_idx * plink2::kPglQuaterTransposeBatch);
        __pyx_t_11 = -1;
        if (unlikely(__pyx_t_21 >= (size_t)__pyx_pybuffernd_geno_int8_out.diminfo[0].shape)) __pyx_t_11 = 0;
        if (unlikely(__pyx_t_22 >= (size_t)__pyx_pybuffernd_geno_int8_out.diminfo[1].shape)) __pyx_t_11 = 1;
        if (unlikely(__pyx_t_11 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_11);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_data_ptr = (&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int8_t *, __pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_geno_int8_out.diminfo[0].strides, __pyx_t_22, __pyx_pybuffernd_geno_int8_out.diminfo[1].strides)));

        /* "pgenlib.pyx":709
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = &(geno_int8_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])
 *                     genoarr_to_bytes_minus9(smaj_iter, variant_batch_size, data_ptr)             # <<<<<<<<<<<<<<
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 */
        plink2::genoarr_to_bytes_minus9(__pyx_v_smaj_iter, __pyx_v_variant_batch_size, __pyx_v_data_ptr);

        /* "pgenlib.pyx":710
 *                     data_ptr = &(geno_int8_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])
 *                     genoarr_to_bytes_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])             # <<<<<<<<<<<<<<
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_list_idx += kPglQuaterTransposeBatch
 */
        __pyx_v_smaj_iter = (&(__pyx_v_smaj_iter[plink2::kPglQuaterTransposeWords]));
      }

      /* "pgenlib.pyx":711
 *                     genoarr_to_bytes_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])             # <<<<<<<<<<<<<<
 *             variant_list_idx += kPglQuaterTransposeBatch
 *         return
 */
      __pyx_v_vmaj_iter = (&(__pyx_v_vmaj_iter[plink2::kPglQuaterTransposeWords]));
    }

    /* "pgenlib.pyx":712
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_list_idx += kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_v_variant_list_idx = (__pyx_v_variant_list_idx + plink2::kPglQuaterTransposeBatch);
  }

  /* "pgenlib.pyx":713
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_list_idx += kPglQuaterTransposeBatch
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cdef read_list_internal32(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int32_t,mode="c",ndim=2] geno_int32_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":643
 * 
 * 
 *     cdef read_list_internal8(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int8_t,mode="c",ndim=2] geno_int8_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_list_internal8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int8_out.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":715
 *         return
 * 
 *     cdef read_list_internal32(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int32_t,mode="c",ndim=2] geno_int32_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */

static PyObject *__pyx_f_7pgenlib_10PgenReader_read_list_internal32(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_variant_idxs, PyArrayObject *__pyx_v_geno_int32_out, struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal32 *__pyx_optional_args) {
  uint32_t __pyx_v_allele_idx = ((uint32_t)1);
  int __pyx_v_sample_maj = ((int)0);
  uint32_t __pyx_v_raw_variant_ct;
  uintptr_t const *__pyx_v_subset_include_vec;
  uint32_t const *__pyx_v_subset_cumulative_popcounts;
  plink2::pgen_reader_t *__pyx_v_pgrp;
  uintptr_t *__pyx_v_genovec;
  uint32_t __pyx_v_variant_idx_ct;
  uint32_t __pyx_v_subset_size;
  int32_t *__pyx_v_data_ptr;
  uint32_t __pyx_v_variant_list_idx;
  uint32_t __pyx_v_variant_idx;
  plink2::pglerr_t __pyx_v_reterr;
  uint32_t __pyx_v_variant_batch_ct;
  uint32_t __pyx_v_variant_batch_size;
  uint32_t __pyx_v_sample_ctaw2;
  uint32_t __pyx_v_sample_batch_ct;
  plink2::vul_t *__pyx_v_transpose_batch_buf;
  uintptr_t *__pyx_v_multivar_vmaj_geno_buf;
  uintptr_t *__pyx_v_multivar_smaj_geno_batch_buf;
  uintptr_t *__pyx_v_vmaj_iter;
  uintptr_t *__pyx_v_smaj_iter;
  uint32_t __pyx_v_variant_batch_idx;
  uint32_t __pyx_v_sample_batch_size;
  uint32_t __pyx_v_sample_batch_idx;
  uint32_t __pyx_v_uii;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_geno_int32_out;
  __Pyx_Buffer __pyx_pybuffer_geno_int32_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_variant_idxs;
  __Pyx_Buffer __pyx_pybuffer_variant_idxs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uintptr_t *__pyx_t_2;
  uint32_t *__pyx_t_3;
  plink2::pgen_reader_t *__pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  uint32_t __pyx_t_9;
  size_t __pyx_t_10;
  int __pyx_t_11;
  size_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  plink2::vul_t *__pyx_t_14;
  long __pyx_t_15;
  uint32_t __pyx_t_16;
  uint32_t __pyx_t_17;
  size_t __pyx_t_18;
  uint32_t __pyx_t_19;
  uint32_t __pyx_t_20;
  size_t __pyx_t_21;
  size_t __pyx_t_22;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_list_internal32", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_allele_idx = __pyx_optional_args->allele_idx;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_sample_maj = __pyx_optional_args->sample_maj;
      }
    }
  }
  __pyx_pybuffer_variant_idxs.pybuffer.buf = NULL;
  __pyx_pybuffer_variant_idxs.refcount = 0;
  __pyx_pybuffernd_variant_idxs.data = NULL;
  __pyx_pybuffernd_variant_idxs.rcbuffer = &__pyx_pybuffer_variant_idxs;
  __pyx_pybuffer_geno_int32_out.pybuffer.buf = NULL;
  __pyx_pybuffer_geno_int32_out.refcount = 0;
  __pyx_pybuffernd_geno_int32_out.data = NULL;
  __pyx_pybuffernd_geno_int32_out.rcbuffer = &__pyx_pybuffer_geno_int32_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer, (PyObject*)__pyx_v_variant_idxs, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_variant_idxs.diminfo[0].strides = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_variant_idxs.diminfo[0].shape = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_geno_int32_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_geno_int32_out.diminfo[0].strides = __pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_geno_int32_out.diminfo[0].shape = __pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_geno_int32_out.diminfo[1].strides = __pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_geno_int32_out.diminfo[1].shape = __pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer.shape[1];

  /* "pgenlib.pyx":716
 * 
 *     cdef read_list_internal32(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int32_t,mode="c",ndim=2] geno_int32_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct             # <<<<<<<<<<<<<<
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 */
  __pyx_t_1 = (__pyx_v_self->_info_ptr[0]).raw_variant_ct;
  __pyx_v_raw_variant_ct = __pyx_t_1;

  /* "pgenlib.pyx":717
 *     cdef read_list_internal32(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int32_t,mode="c",ndim=2] geno_int32_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec             # <<<<<<<<<<<<<<
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 */
  __pyx_t_2 = __pyx_v_self->_subset_include_vec;
  __pyx_v_subset_include_vec = __pyx_t_2;

  /* "pgenlib.pyx":718
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts             # <<<<<<<<<<<<<<
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec
 */
  __pyx_t_3 = __pyx_v_self->_subset_cumulative_popcounts;
  __pyx_v_subset_cumulative_popcounts = __pyx_t_3;

  /* "pgenlib.pyx":719
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = <uint32_t>variant_idxs.shape[0]
 */
  __pyx_t_4 = __pyx_v_self->_state_ptr;
  __pyx_v_pgrp = __pyx_t_4;

  /* "pgenlib.pyx":720
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_idx_ct = <uint32_t>variant_idxs.shape[0]
 *         cdef uint32_t subset_size = self._subset_size
 */
  __pyx_t_2 = __pyx_v_self->_genovec;
  __pyx_v_genovec = __pyx_t_2;

  /* "pgenlib.pyx":721
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = <uint32_t>variant_idxs.shape[0]             # <<<<<<<<<<<<<<
 *         cdef uint32_t subset_size = self._subset_size
 *         cdef int32_t* data_ptr
 */
  __pyx_v_variant_idx_ct = ((uint32_t)(__pyx_v_variant_idxs->dimensions[0]));

  /* "pgenlib.pyx":722
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = <uint32_t>variant_idxs.shape[0]
 *         cdef uint32_t subset_size = self._subset_size             # <<<<<<<<<<<<<<
 *         cdef int32_t* data_ptr
 *         cdef uint32_t variant_list_idx
 */
  __pyx_t_1 = __pyx_v_self->_subset_size;
  __pyx_v_subset_size = __pyx_t_1;

  /* "pgenlib.pyx":727
 *         cdef uint32_t variant_idx
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:             # <<<<<<<<<<<<<<
 *             if geno_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 */
  __pyx_t_5 = ((__pyx_v_sample_maj == 0) != 0);
  if (__pyx_t_5) {

    /* "pgenlib.pyx":728
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:
 *             if geno_int32_out.shape[0] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if geno_int32_out.shape[1] < subset_size:
 */
    __pyx_t_5 = (((__pyx_v_geno_int32_out->dimensions[0]) < __pyx_v_variant_idx_ct) != 0);
    if (__pyx_t_5) {

      /* "pgenlib.pyx":729
 *         if sample_maj == 0:
 *             if geno_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")             # <<<<<<<<<<<<<<
 *             if geno_int32_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 */
      __pyx_t_6 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int32_out->dimensions[0])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s_Variant_major_read_list_geno_int, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_kp_s_variant_idxs_length_is); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_ct); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Add(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_t_8, __pyx_kp_s__7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":728
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:
 *             if geno_int32_out.shape[0] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if geno_int32_out.shape[1] < subset_size:
 */
    }

    /* "pgenlib.pyx":730
 *             if geno_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if geno_int32_out.shape[1] < subset_size:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_list_idx in range(variant_idx_ct):
 */
    __pyx_t_5 = (((__pyx_v_geno_int32_out->dimensions[1]) < __pyx_v_subset_size) != 0);
    if (__pyx_t_5) {

      /* "pgenlib.pyx":731
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if geno_int32_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")             # <<<<<<<<<<<<<<
 *             for variant_list_idx in range(variant_idx_ct):
 *                 variant_idx = variant_idxs[variant_list_idx]
 */
      __pyx_t_7 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int32_out->dimensions[1])); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Add(__pyx_kp_s_Variant_major_read_list_geno_int_2, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_t_8, __pyx_kp_s_current_sample_subset_has_size); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyInt_From_uint32_t(__pyx_v_subset_size); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Add(__pyx_t_6, __pyx_kp_s__7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":730
 *             if geno_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if geno_int32_out.shape[1] < subset_size:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_list_idx in range(variant_idx_ct):
 */
    }

    /* "pgenlib.pyx":732
 *             if geno_int32_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_list_idx in range(variant_idx_ct):             # <<<<<<<<<<<<<<
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:
 */
    __pyx_t_1 = __pyx_v_variant_idx_ct;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_1; __pyx_t_9+=1) {
      __pyx_v_variant_list_idx = __pyx_t_9;

      /* "pgenlib.pyx":733
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_list_idx in range(variant_idx_ct):
 *                 variant_idx = variant_idxs[variant_list_idx]             # <<<<<<<<<<<<<<
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 */
      __pyx_t_10 = __pyx_v_variant_list_idx;
      __pyx_t_11 = -1;
      if (unlikely(__pyx_t_10 >= (size_t)__pyx_pybuffernd_variant_idxs.diminfo[0].shape)) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_variant_idx = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_variant_idxs.diminfo[0].strides));

      /* "pgenlib.pyx":734
 *             for variant_list_idx in range(variant_idx_ct):
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 */
      __pyx_t_5 = ((__pyx_v_variant_idx >= __pyx_v_raw_variant_ct) != 0);
      if (__pyx_t_5) {

        /* "pgenlib.pyx":735
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")             # <<<<<<<<<<<<<<
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:
 */
        __pyx_t_8 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Add(__pyx_kp_s_read_list_variant_index_too_larg, __pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_only); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyInt_From_uint32_t(__pyx_v_raw_variant_ct); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_kp_s_in_file_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_6, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":734
 *             for variant_list_idx in range(variant_idx_ct):
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 */
      }

      /* "pgenlib.pyx":736
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::pgr_read_allele_countvec_subset_unsafe(__pyx_v_subset_include_vec, __pyx_v_subset_cumulative_popcounts, __pyx_v_subset_size, __pyx_v_variant_idx, __pyx_v_allele_idx, __pyx_v_pgrp, __pyx_v_genovec);

      /* "pgenlib.pyx":737
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = <int32_t*>(&(geno_int32_out[variant_list_idx, 0]))
 */
      __pyx_t_5 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_5) {

        /* "pgenlib.pyx":738
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))             # <<<<<<<<<<<<<<
 *                 data_ptr = <int32_t*>(&(geno_int32_out[variant_list_idx, 0]))
 *                 genoarr_to_int32s_minus9(genovec, subset_size, data_ptr)
 */
        __pyx_t_6 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_kp_s_read_range_error, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":737
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = <int32_t*>(&(geno_int32_out[variant_list_idx, 0]))
 */
      }

      /* "pgenlib.pyx":739
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = <int32_t*>(&(geno_int32_out[variant_list_idx, 0]))             # <<<<<<<<<<<<<<
 *                 genoarr_to_int32s_minus9(genovec, subset_size, data_ptr)
 *             return
 */
      __pyx_t_12 = __pyx_v_variant_list_idx;
      __pyx_t_13 = 0;
      __pyx_t_11 = -1;
      if (unlikely(__pyx_t_12 >= (size_t)__pyx_pybuffernd_geno_int32_out.diminfo[0].shape)) __pyx_t_11 = 0;
      if (__pyx_t_13 < 0) {
        __pyx_t_13 += __pyx_pybuffernd_geno_int32_out.diminfo[1].shape;
        if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 1;
      } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_geno_int32_out.diminfo[1].shape)) __pyx_t_11 = 1;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_data_ptr = ((int32_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_geno_int32_out.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_geno_int32_out.diminfo[1].strides))));

      /* "pgenlib.pyx":740
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = <int32_t*>(&(geno_int32_out[variant_list_idx, 0]))
 *                 genoarr_to_int32s_minus9(genovec, subset_size, data_ptr)             # <<<<<<<<<<<<<<
 *             return
 *         if geno_int32_out.shape[0] < subset_size:
 */
      plink2::genoarr_to_int32s_minus9(__pyx_v_genovec, __pyx_v_subset_size, __pyx_v_data_ptr);
    }

    /* "pgenlib.pyx":741
 *                 data_ptr = <int32_t*>(&(geno_int32_out[variant_list_idx, 0]))
 *                 genoarr_to_int32s_minus9(genovec, subset_size, data_ptr)
 *             return             # <<<<<<<<<<<<<<
 *         if geno_int32_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "pgenlib.pyx":727
 *         cdef uint32_t variant_idx
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:             # <<<<<<<<<<<<<<
 *             if geno_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 */
  }

  /* "pgenlib.pyx":742
 *                 genoarr_to_int32s_minus9(genovec, subset_size, data_ptr)
 *             return
 *         if geno_int32_out.shape[0] < subset_size:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int32_out.shape[1] < variant_idx_ct:
 */
  __pyx_t_5 = (((__pyx_v_geno_int32_out->dimensions[0]) < __pyx_v_subset_size) != 0);
  if (__pyx_t_5) {

    /* "pgenlib.pyx":743
 *             return
 *         if geno_int32_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")             # <<<<<<<<<<<<<<
 *         if geno_int32_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 */
    __pyx_t_7 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int32_out->dimensions[0])); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_kp_s_Sample_major_read_list_geno_int, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_current_sample_subset_has_size); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyInt_From_uint32_t(__pyx_v_subset_size); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_8, __pyx_kp_s__7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":742
 *                 genoarr_to_int32s_minus9(genovec, subset_size, data_ptr)
 *             return
 *         if geno_int32_out.shape[0] < subset_size:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int32_out.shape[1] < variant_idx_ct:
 */
  }

  /* "pgenlib.pyx":744
 *         if geno_int32_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int32_out.shape[1] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 */
  __pyx_t_5 = (((__pyx_v_geno_int32_out->dimensions[1]) < __pyx_v_variant_idx_ct) != 0);
  if (__pyx_t_5) {

    /* "pgenlib.pyx":745
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int32_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 */
    __pyx_t_6 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int32_out->dimensions[1])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_kp_s_Sample_major_read_list_geno_int_2, __pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_8, __pyx_kp_s_variant_idxs_length_is); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_ct); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_t_7, __pyx_kp_s__7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":744
 *         if geno_int32_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int32_out.shape[1] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 */
  }

  /* "pgenlib.pyx":746
 *         if geno_int32_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 */
  __pyx_v_variant_batch_ct = DIV_UP(__pyx_v_variant_idx_ct, plink2::kPglQuaterTransposeBatch);

  /* "pgenlib.pyx":747
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int32_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 */
  __pyx_v_variant_batch_size = plink2::kPglQuaterTransposeBatch;

  /* "pgenlib.pyx":748
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 */
  __pyx_v_sample_ctaw2 = (plink2::kWordsPerVec * DIV_UP(__pyx_v_subset_size, plink2::kBitsPerWordD2));

  /* "pgenlib.pyx":749
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 */
  __pyx_v_sample_batch_ct = DIV_UP(__pyx_v_subset_size, plink2::kPglQuaterTransposeBatch);

  /* "pgenlib.pyx":750
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 */
  __pyx_t_14 = __pyx_v_self->_transpose_batch_buf;
  __pyx_v_transpose_batch_buf = __pyx_t_14;

  /* "pgenlib.pyx":751
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 *         cdef uintptr_t* vmaj_iter
 */
  __pyx_t_2 = __pyx_v_self->_multivar_vmaj_geno_buf;
  __pyx_v_multivar_vmaj_geno_buf = __pyx_t_2;

  /* "pgenlib.pyx":752
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* vmaj_iter
 *         cdef uintptr_t* smaj_iter
 */
  __pyx_t_2 = __pyx_v_self->_multivar_smaj_geno_batch_buf;
  __pyx_v_multivar_smaj_geno_batch_buf = __pyx_t_2;

  /* "pgenlib.pyx":759
 *         cdef uint32_t sample_batch_idx
 *         cdef uint32_t uii
 *         variant_list_idx = 0             # <<<<<<<<<<<<<<
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):
 */
  __pyx_v_variant_list_idx = 0;

  /* "pgenlib.pyx":760
 *         cdef uint32_t uii
 *         variant_list_idx = 0
 *         for variant_batch_idx in range(variant_batch_ct):             # <<<<<<<<<<<<<<
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 */
  __pyx_t_1 = __pyx_v_variant_batch_ct;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_1; __pyx_t_9+=1) {
    __pyx_v_variant_batch_idx = __pyx_t_9;

    /* "pgenlib.pyx":761
 *         variant_list_idx = 0
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):             # <<<<<<<<<<<<<<
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
    __pyx_t_5 = ((__pyx_v_variant_batch_idx == (__pyx_v_variant_batch_ct - 1)) != 0);
    if (__pyx_t_5) {

      /* "pgenlib.pyx":762
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):
 */
      __pyx_t_15 = (__pyx_v_variant_idx_ct - 1);
      if (unlikely(plink2::kPglQuaterTransposeBatch == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_variant_batch_size = (1 + ((uint32_t)__Pyx_mod_long(__pyx_t_15, plink2::kPglQuaterTransposeBatch)));

      /* "pgenlib.pyx":761
 *         variant_list_idx = 0
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):             # <<<<<<<<<<<<<<
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
    }

    /* "pgenlib.pyx":763
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *             for uii in range(variant_batch_size):
 *                 variant_idx = variant_idxs[uii + variant_list_idx]
 */
    __pyx_v_vmaj_iter = __pyx_v_multivar_vmaj_geno_buf;

    /* "pgenlib.pyx":764
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):             # <<<<<<<<<<<<<<
 *                 variant_idx = variant_idxs[uii + variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:
 */
    __pyx_t_16 = __pyx_v_variant_batch_size;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_uii = __pyx_t_17;

      /* "pgenlib.pyx":765
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):
 *                 variant_idx = variant_idxs[uii + variant_list_idx]             # <<<<<<<<<<<<<<
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 */
      __pyx_t_18 = (__pyx_v_uii + __pyx_v_variant_list_idx);
      __pyx_t_11 = -1;
      if (unlikely(__pyx_t_18 >= (size_t)__pyx_pybuffernd_variant_idxs.diminfo[0].shape)) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_variant_idx = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_variant_idxs.diminfo[0].strides));

      /* "pgenlib.pyx":766
 *             for uii in range(variant_batch_size):
 *                 variant_idx = variant_idxs[uii + variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 */
      __pyx_t_5 = ((__pyx_v_variant_idx >= __pyx_v_raw_variant_ct) != 0);
      if (__pyx_t_5) {

        /* "pgenlib.pyx":767
 *                 variant_idx = variant_idxs[uii + variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")             # <<<<<<<<<<<<<<
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:
 */
        __pyx_t_8 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_kp_s_read_list_variant_index_too_larg, __pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Add(__pyx_t_7, __pyx_kp_s_only); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyInt_From_uint32_t(__pyx_v_raw_variant_ct); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Add(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_in_file_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":766
 *             for uii in range(variant_batch_size):
 *                 variant_idx = variant_idxs[uii + variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 */
      }

      /* "pgenlib.pyx":768
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_list() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::pgr_read_allele_countvec_subset_unsafe(__pyx_v_subset_include_vec, __pyx_v_subset_cumulative_popcounts, __pyx_v_subset_size, __pyx_v_variant_idx, __pyx_v_allele_idx, __pyx_v_pgrp, __pyx_v_vmaj_iter);

      /* "pgenlib.pyx":769
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 */
      __pyx_t_5 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_5) {

        /* "pgenlib.pyx":770
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_list() error " + str(reterr))             # <<<<<<<<<<<<<<
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch
 */
        __pyx_t_7 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Add(__pyx_kp_s_read_list_error, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_6, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":769
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 */
      }

      /* "pgenlib.pyx":771
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_list() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])             # <<<<<<<<<<<<<<
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
      __pyx_v_vmaj_iter = (&(__pyx_v_vmaj_iter[__pyx_v_sample_ctaw2]));
    }

    /* "pgenlib.pyx":772
 *                     raise RuntimeError("read_list() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 */
    __pyx_v_sample_batch_size = plink2::kPglQuaterTransposeBatch;

    /* "pgenlib.pyx":773
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:
 */
    __pyx_v_vmaj_iter = __pyx_v_multivar_vmaj_geno_buf;

    /* "pgenlib.pyx":774
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):             # <<<<<<<<<<<<<<
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 */
    __pyx_t_16 = __pyx_v_sample_batch_ct;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_sample_batch_idx = __pyx_t_17;

      /* "pgenlib.pyx":775
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:             # <<<<<<<<<<<<<<
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 */
      __pyx_t_5 = ((__pyx_v_sample_batch_idx == (__pyx_v_sample_batch_ct - 1)) != 0);
      if (__pyx_t_5) {

        /* "pgenlib.pyx":776
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 */
        __pyx_t_15 = (__pyx_v_subset_size - 1);
        if (unlikely(plink2::kPglQuaterTransposeBatch == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_sample_batch_size = (1 + ((uint32_t)__Pyx_mod_long(__pyx_t_15, plink2::kPglQuaterTransposeBatch)));

        /* "pgenlib.pyx":775
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:             # <<<<<<<<<<<<<<
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 */
      }

      /* "pgenlib.pyx":777
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf             # <<<<<<<<<<<<<<
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):
 */
      __pyx_v_smaj_iter = __pyx_v_multivar_smaj_geno_batch_buf;

      /* "pgenlib.pyx":778
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)             # <<<<<<<<<<<<<<
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = <int32_t*>(&(geno_int32_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch]))
 */
      plink2::transpose_quaterblock(__pyx_v_vmaj_iter, __pyx_v_sample_ctaw2, plink2::kPglQuaterTransposeWords, __pyx_v_variant_batch_size, __pyx_v_sample_batch_size, __pyx_v_smaj_iter, __pyx_v_transpose_batch_buf);

      /* "pgenlib.pyx":779
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):             # <<<<<<<<<<<<<<
 *                     data_ptr = <int32_t*>(&(geno_int32_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     genoarr_to_int32s_minus9(smaj_iter, variant_batch_size, data_ptr)
 */
      __pyx_t_19 = __pyx_v_sample_batch_size;
      for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
        __pyx_v_uii = __pyx_t_20;

        /* "pgenlib.pyx":780
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = <int32_t*>(&(geno_int32_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch]))             # <<<<<<<<<<<<<<
 *                     genoarr_to_int32s_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 */
        __pyx_t_21 = (__pyx_v_uii + (__pyx_v_sample_batch_idx * plink2::kPglQuaterTransposeBatch));
        __pyx_t_22 = (__pyx_v_variant_batch_idx * plink2::kPglQuaterTransposeBatch);
        __pyx_t_11 = -1;
        if (unlikely(__pyx_t_21 >= (size_t)__pyx_pybuffernd_geno_int32_out.diminfo[0].shape)) __pyx_t_11 = 0;
        if (unlikely(__pyx_t_22 >= (size_t)__pyx_pybuffernd_geno_int32_out.diminfo[1].shape)) __pyx_t_11 = 1;
        if (unlikely(__pyx_t_11 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_11);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_data_ptr = ((int32_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_geno_int32_out.diminfo[0].strides, __pyx_t_22, __pyx_pybuffernd_geno_int32_out.diminfo[1].strides))));

        /* "pgenlib.pyx":781
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = <int32_t*>(&(geno_int32_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     genoarr_to_int32s_minus9(smaj_iter, variant_batch_size, data_ptr)             # <<<<<<<<<<<<<<
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 */
        plink2::genoarr_to_int32s_minus9(__pyx_v_smaj_iter, __pyx_v_variant_batch_size, __pyx_v_data_ptr);

        /* "pgenlib.pyx":782
 *                     data_ptr = <int32_t*>(&(geno_int32_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     genoarr_to_int32s_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])             # <<<<<<<<<<<<<<
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_list_idx += kPglQuaterTransposeBatch
 */
        __pyx_v_smaj_iter = (&(__pyx_v_smaj_iter[plink2::kPglQuaterTransposeWords]));
      }

      /* "pgenlib.pyx":783
 *                     genoarr_to_int32s_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])             # <<<<<<<<<<<<<<
 *             variant_list_idx += kPglQuaterTransposeBatch
 *         return
 */
      __pyx_v_vmaj_iter = (&(__pyx_v_vmaj_iter[plink2::kPglQuaterTransposeWords]));
    }

    /* "pgenlib.pyx":784
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_list_idx += kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_v_variant_list_idx = (__pyx_v_variant_list_idx + plink2::kPglQuaterTransposeBatch);
  }

  /* "pgenlib.pyx":785
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_list_idx += kPglQuaterTransposeBatch
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cdef read_list_internal64(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int64_t,mode="c",ndim=2] geno_int64_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":715
 *         return
 * 
 *     cdef read_list_internal32(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int32_t,mode="c",ndim=2] geno_int32_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_list_internal32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int32_out.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":787
 *         return
 * 
 *     cdef read_list_internal64(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int64_t,mode="c",ndim=2] geno_int64_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */

static PyObject *__pyx_f_7pgenlib_10PgenReader_read_list_internal64(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_variant_idxs, PyArrayObject *__pyx_v_geno_int64_out, struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal64 *__pyx_optional_args) {
  uint32_t __pyx_v_allele_idx = ((uint32_t)1);
  int __pyx_v_sample_maj = ((int)0);
  uint32_t __pyx_v_raw_variant_ct;
  uintptr_t const *__pyx_v_subset_include_vec;
  uint32_t const *__pyx_v_subset_cumulative_popcounts;
  plink2::pgen_reader_t *__pyx_v_pgrp;
  uintptr_t *__pyx_v_genovec;
  uint32_t __pyx_v_variant_idx_ct;
  uint32_t __pyx_v_subset_size;
  int64_t *__pyx_v_data_ptr;
  uint32_t __pyx_v_variant_list_idx;
  uint32_t __pyx_v_variant_idx;
  plink2::pglerr_t __pyx_v_reterr;
  uint32_t __pyx_v_variant_batch_ct;
  uint32_t __pyx_v_variant_batch_size;
  uint32_t __pyx_v_sample_ctaw2;
  uint32_t __pyx_v_sample_batch_ct;
  plink2::vul_t *__pyx_v_transpose_batch_buf;
  uintptr_t *__pyx_v_multivar_vmaj_geno_buf;
  uintptr_t *__pyx_v_multivar_smaj_geno_batch_buf;
  uintptr_t *__pyx_v_vmaj_iter;
  uintptr_t *__pyx_v_smaj_iter;
  uint32_t __pyx_v_variant_batch_idx;
  uint32_t __pyx_v_sample_batch_size;
  uint32_t __pyx_v_sample_batch_idx;
  uint32_t __pyx_v_uii;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_geno_int64_out;
  __Pyx_Buffer __pyx_pybuffer_geno_int64_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_variant_idxs;
  __Pyx_Buffer __pyx_pybuffer_variant_idxs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uintptr_t *__pyx_t_2;
  uint32_t *__pyx_t_3;
  plink2::pgen_reader_t *__pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  uint32_t __pyx_t_9;
  size_t __pyx_t_10;
  int __pyx_t_11;
  size_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  plink2::vul_t *__pyx_t_14;
  long __pyx_t_15;
  uint32_t __pyx_t_16;
  uint32_t __pyx_t_17;
  size_t __pyx_t_18;
  uint32_t __pyx_t_19;
  uint32_t __pyx_t_20;
  size_t __pyx_t_21;
  size_t __pyx_t_22;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_list_internal64", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_allele_idx = __pyx_optional_args->allele_idx;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_sample_maj = __pyx_optional_args->sample_maj;
      }
    }
  }
  __pyx_pybuffer_variant_idxs.pybuffer.buf = NULL;
  __pyx_pybuffer_variant_idxs.refcount = 0;
  __pyx_pybuffernd_variant_idxs.data = NULL;
  __pyx_pybuffernd_variant_idxs.rcbuffer = &__pyx_pybuffer_variant_idxs;
  __pyx_pybuffer_geno_int64_out.pybuffer.buf = NULL;
  __pyx_pybuffer_geno_int64_out.refcount = 0;
  __pyx_pybuffernd_geno_int64_out.data = NULL;
  __pyx_pybuffernd_geno_int64_out.rcbuffer = &__pyx_pybuffer_geno_int64_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer, (PyObject*)__pyx_v_variant_idxs, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_variant_idxs.diminfo[0].strides = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_variant_idxs.diminfo[0].shape = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_geno_int64_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_geno_int64_out.diminfo[0].strides = __pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_geno_int64_out.diminfo[0].shape = __pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_geno_int64_out.diminfo[1].strides = __pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_geno_int64_out.diminfo[1].shape = __pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer.shape[1];

  /* "pgenlib.pyx":788
 * 
 *     cdef read_list_internal64(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int64_t,mode="c",ndim=2] geno_int64_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct             # <<<<<<<<<<<<<<
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 */
  __pyx_t_1 = (__pyx_v_self->_info_ptr[0]).raw_variant_ct;
  __pyx_v_raw_variant_ct = __pyx_t_1;

  /* "pgenlib.pyx":789
 *     cdef read_list_internal64(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int64_t,mode="c",ndim=2] geno_int64_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec             # <<<<<<<<<<<<<<
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 */
  __pyx_t_2 = __pyx_v_self->_subset_include_vec;
  __pyx_v_subset_include_vec = __pyx_t_2;

  /* "pgenlib.pyx":790
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts             # <<<<<<<<<<<<<<
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec
 */
  __pyx_t_3 = __pyx_v_self->_subset_cumulative_popcounts;
  __pyx_v_subset_cumulative_popcounts = __pyx_t_3;

  /* "pgenlib.pyx":791
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = <uint32_t>variant_idxs.shape[0]
 */
  __pyx_t_4 = __pyx_v_self->_state_ptr;
  __pyx_v_pgrp = __pyx_t_4;

  /* "pgenlib.pyx":792
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_idx_ct = <uint32_t>variant_idxs.shape[0]
 *         cdef uint32_t subset_size = self._subset_size
 */
  __pyx_t_2 = __pyx_v_self->_genovec;
  __pyx_v_genovec = __pyx_t_2;

  /* "pgenlib.pyx":793
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = <uint32_t>variant_idxs.shape[0]             # <<<<<<<<<<<<<<
 *         cdef uint32_t subset_size = self._subset_size
 *         cdef int64_t* data_ptr
 */
  __pyx_v_variant_idx_ct = ((uint32_t)(__pyx_v_variant_idxs->dimensions[0]));

  /* "pgenlib.pyx":794
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uint32_t variant_idx_ct = <uint32_t>variant_idxs.shape[0]
 *         cdef uint32_t subset_size = self._subset_size             # <<<<<<<<<<<<<<
 *         cdef int64_t* data_ptr
 *         cdef uint32_t variant_list_idx
 */
  __pyx_t_1 = __pyx_v_self->_subset_size;
  __pyx_v_subset_size = __pyx_t_1;

  /* "pgenlib.pyx":799
 *         cdef uint32_t variant_idx
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:             # <<<<<<<<<<<<<<
 *             if geno_int64_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 */
  __pyx_t_5 = ((__pyx_v_sample_maj == 0) != 0);
  if (__pyx_t_5) {

    /* "pgenlib.pyx":800
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:
 *             if geno_int64_out.shape[0] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if geno_int64_out.shape[1] < subset_size:
 */
    __pyx_t_5 = (((__pyx_v_geno_int64_out->dimensions[0]) < __pyx_v_variant_idx_ct) != 0);
    if (__pyx_t_5) {

      /* "pgenlib.pyx":801
 *         if sample_maj == 0:
 *             if geno_int64_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")             # <<<<<<<<<<<<<<
 *             if geno_int64_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 */
      __pyx_t_6 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int64_out->dimensions[0])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s_Variant_major_read_list_geno_int, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_kp_s_variant_idxs_length_is); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_ct); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Add(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_t_8, __pyx_kp_s__7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":800
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:
 *             if geno_int64_out.shape[0] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if geno_int64_out.shape[1] < subset_size:
 */
    }

    /* "pgenlib.pyx":802
 *             if geno_int64_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if geno_int64_out.shape[1] < subset_size:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_list_idx in range(variant_idx_ct):
 */
    __pyx_t_5 = (((__pyx_v_geno_int64_out->dimensions[1]) < __pyx_v_subset_size) != 0);
    if (__pyx_t_5) {

      /* "pgenlib.pyx":803
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if geno_int64_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")             # <<<<<<<<<<<<<<
 *             for variant_list_idx in range(variant_idx_ct):
 *                 variant_idx = variant_idxs[variant_list_idx]
 */
      __pyx_t_7 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int64_out->dimensions[1])); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Add(__pyx_kp_s_Variant_major_read_list_geno_int_2, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_t_8, __pyx_kp_s_current_sample_subset_has_size); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyInt_From_uint32_t(__pyx_v_subset_size); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Add(__pyx_t_6, __pyx_kp_s__7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":802
 *             if geno_int64_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if geno_int64_out.shape[1] < subset_size:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_list_idx in range(variant_idx_ct):
 */
    }

    /* "pgenlib.pyx":804
 *             if geno_int64_out.shape[1] < subset_size:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_list_idx in range(variant_idx_ct):             # <<<<<<<<<<<<<<
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:
 */
    __pyx_t_1 = __pyx_v_variant_idx_ct;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_1; __pyx_t_9+=1) {
      __pyx_v_variant_list_idx = __pyx_t_9;

      /* "pgenlib.pyx":805
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ")")
 *             for variant_list_idx in range(variant_idx_ct):
 *                 variant_idx = variant_idxs[variant_list_idx]             # <<<<<<<<<<<<<<
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 */
      __pyx_t_10 = __pyx_v_variant_list_idx;
      __pyx_t_11 = -1;
      if (unlikely(__pyx_t_10 >= (size_t)__pyx_pybuffernd_variant_idxs.diminfo[0].shape)) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 805; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_variant_idx = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_variant_idxs.diminfo[0].strides));

      /* "pgenlib.pyx":806
 *             for variant_list_idx in range(variant_idx_ct):
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 */
      __pyx_t_5 = ((__pyx_v_variant_idx >= __pyx_v_raw_variant_ct) != 0);
      if (__pyx_t_5) {

        /* "pgenlib.pyx":807
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")             # <<<<<<<<<<<<<<
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:
 */
        __pyx_t_8 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Add(__pyx_kp_s_read_list_variant_index_too_larg, __pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_only); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyInt_From_uint32_t(__pyx_v_raw_variant_ct); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_kp_s_in_file_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_6, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":806
 *             for variant_list_idx in range(variant_idx_ct):
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 */
      }

      /* "pgenlib.pyx":808
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::pgr_read_allele_countvec_subset_unsafe(__pyx_v_subset_include_vec, __pyx_v_subset_cumulative_popcounts, __pyx_v_subset_size, __pyx_v_variant_idx, __pyx_v_allele_idx, __pyx_v_pgrp, __pyx_v_genovec);

      /* "pgenlib.pyx":809
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = &(geno_int64_out[variant_list_idx, 0])
 */
      __pyx_t_5 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_5) {

        /* "pgenlib.pyx":810
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))             # <<<<<<<<<<<<<<
 *                 data_ptr = &(geno_int64_out[variant_list_idx, 0])
 *                 genoarr_to_int64s_minus9(genovec, subset_size, data_ptr)
 */
        __pyx_t_6 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_kp_s_read_range_error, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":809
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, genovec)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = &(geno_int64_out[variant_list_idx, 0])
 */
      }

      /* "pgenlib.pyx":811
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = &(geno_int64_out[variant_list_idx, 0])             # <<<<<<<<<<<<<<
 *                 genoarr_to_int64s_minus9(genovec, subset_size, data_ptr)
 *             return
 */
      __pyx_t_12 = __pyx_v_variant_list_idx;
      __pyx_t_13 = 0;
      __pyx_t_11 = -1;
      if (unlikely(__pyx_t_12 >= (size_t)__pyx_pybuffernd_geno_int64_out.diminfo[0].shape)) __pyx_t_11 = 0;
      if (__pyx_t_13 < 0) {
        __pyx_t_13 += __pyx_pybuffernd_geno_int64_out.diminfo[1].shape;
        if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 1;
      } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_geno_int64_out.diminfo[1].shape)) __pyx_t_11 = 1;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_data_ptr = ((int64_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_geno_int64_out.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_geno_int64_out.diminfo[1].strides))));

      /* "pgenlib.pyx":812
 *                     raise RuntimeError("read_range() error " + str(reterr))
 *                 data_ptr = &(geno_int64_out[variant_list_idx, 0])
 *                 genoarr_to_int64s_minus9(genovec, subset_size, data_ptr)             # <<<<<<<<<<<<<<
 *             return
 *         if geno_int64_out.shape[0] < subset_size:
 */
      plink2::genoarr_to_int64s_minus9(__pyx_v_genovec, __pyx_v_subset_size, __pyx_v_data_ptr);
    }

    /* "pgenlib.pyx":813
 *                 data_ptr = &(geno_int64_out[variant_list_idx, 0])
 *                 genoarr_to_int64s_minus9(genovec, subset_size, data_ptr)
 *             return             # <<<<<<<<<<<<<<
 *         if geno_int64_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "pgenlib.pyx":799
 *         cdef uint32_t variant_idx
 *         cdef pglerr_t reterr
 *         if sample_maj == 0:             # <<<<<<<<<<<<<<
 *             if geno_int64_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_list() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 */
  }

  /* "pgenlib.pyx":814
 *                 genoarr_to_int64s_minus9(genovec, subset_size, data_ptr)
 *             return
 *         if geno_int64_out.shape[0] < subset_size:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int64_out.shape[1] < variant_idx_ct:
 */
  __pyx_t_5 = (((__pyx_v_geno_int64_out->dimensions[0]) < __pyx_v_subset_size) != 0);
  if (__pyx_t_5) {

    /* "pgenlib.pyx":815
 *             return
 *         if geno_int64_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")             # <<<<<<<<<<<<<<
 *         if geno_int64_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 */
    __pyx_t_7 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int64_out->dimensions[0])); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_kp_s_Sample_major_read_list_geno_int, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_current_sample_subset_has_size); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyInt_From_uint32_t(__pyx_v_subset_size); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_8, __pyx_kp_s__7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":814
 *                 genoarr_to_int64s_minus9(genovec, subset_size, data_ptr)
 *             return
 *         if geno_int64_out.shape[0] < subset_size:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int64_out.shape[1] < variant_idx_ct:
 */
  }

  /* "pgenlib.pyx":816
 *         if geno_int64_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int64_out.shape[1] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 */
  __pyx_t_5 = (((__pyx_v_geno_int64_out->dimensions[1]) < __pyx_v_variant_idx_ct) != 0);
  if (__pyx_t_5) {

    /* "pgenlib.pyx":817
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int64_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 */
    __pyx_t_6 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_geno_int64_out->dimensions[1])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_kp_s_Sample_major_read_list_geno_int_2, __pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_8, __pyx_kp_s_variant_idxs_length_is); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_ct); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_t_7, __pyx_kp_s__7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":816
 *         if geno_int64_out.shape[0] < subset_size:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few rows (" + str(geno_int64_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ")")
 *         if geno_int64_out.shape[1] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 */
  }

  /* "pgenlib.pyx":818
 *         if geno_int64_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 */
  __pyx_v_variant_batch_ct = DIV_UP(__pyx_v_variant_idx_ct, plink2::kPglQuaterTransposeBatch);

  /* "pgenlib.pyx":819
 *             raise RuntimeError("Sample-major read_list() geno_int_out buffer has too few columns (" + str(geno_int64_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 */
  __pyx_v_variant_batch_size = plink2::kPglQuaterTransposeBatch;

  /* "pgenlib.pyx":820
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 */
  __pyx_v_sample_ctaw2 = (plink2::kWordsPerVec * DIV_UP(__pyx_v_subset_size, plink2::kBitsPerWordD2));

  /* "pgenlib.pyx":821
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 */
  __pyx_v_sample_batch_ct = DIV_UP(__pyx_v_subset_size, plink2::kPglQuaterTransposeBatch);

  /* "pgenlib.pyx":822
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 */
  __pyx_t_14 = __pyx_v_self->_transpose_batch_buf;
  __pyx_v_transpose_batch_buf = __pyx_t_14;

  /* "pgenlib.pyx":823
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 *         cdef uintptr_t* vmaj_iter
 */
  __pyx_t_2 = __pyx_v_self->_multivar_vmaj_geno_buf;
  __pyx_v_multivar_vmaj_geno_buf = __pyx_t_2;

  /* "pgenlib.pyx":824
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* vmaj_iter
 *         cdef uintptr_t* smaj_iter
 */
  __pyx_t_2 = __pyx_v_self->_multivar_smaj_geno_batch_buf;
  __pyx_v_multivar_smaj_geno_batch_buf = __pyx_t_2;

  /* "pgenlib.pyx":831
 *         cdef uint32_t sample_batch_idx
 *         cdef uint32_t uii
 *         variant_list_idx = 0             # <<<<<<<<<<<<<<
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):
 */
  __pyx_v_variant_list_idx = 0;

  /* "pgenlib.pyx":832
 *         cdef uint32_t uii
 *         variant_list_idx = 0
 *         for variant_batch_idx in range(variant_batch_ct):             # <<<<<<<<<<<<<<
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 */
  __pyx_t_1 = __pyx_v_variant_batch_ct;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_1; __pyx_t_9+=1) {
    __pyx_v_variant_batch_idx = __pyx_t_9;

    /* "pgenlib.pyx":833
 *         variant_list_idx = 0
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):             # <<<<<<<<<<<<<<
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
    __pyx_t_5 = ((__pyx_v_variant_batch_idx == (__pyx_v_variant_batch_ct - 1)) != 0);
    if (__pyx_t_5) {

      /* "pgenlib.pyx":834
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):
 */
      __pyx_t_15 = (__pyx_v_variant_idx_ct - 1);
      if (unlikely(plink2::kPglQuaterTransposeBatch == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_variant_batch_size = (1 + ((uint32_t)__Pyx_mod_long(__pyx_t_15, plink2::kPglQuaterTransposeBatch)));

      /* "pgenlib.pyx":833
 *         variant_list_idx = 0
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):             # <<<<<<<<<<<<<<
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
    }

    /* "pgenlib.pyx":835
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *             for uii in range(variant_batch_size):
 *                 variant_idx = variant_idxs[uii + variant_list_idx]
 */
    __pyx_v_vmaj_iter = __pyx_v_multivar_vmaj_geno_buf;

    /* "pgenlib.pyx":836
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):             # <<<<<<<<<<<<<<
 *                 variant_idx = variant_idxs[uii + variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:
 */
    __pyx_t_16 = __pyx_v_variant_batch_size;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_uii = __pyx_t_17;

      /* "pgenlib.pyx":837
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for uii in range(variant_batch_size):
 *                 variant_idx = variant_idxs[uii + variant_list_idx]             # <<<<<<<<<<<<<<
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 */
      __pyx_t_18 = (__pyx_v_uii + __pyx_v_variant_list_idx);
      __pyx_t_11 = -1;
      if (unlikely(__pyx_t_18 >= (size_t)__pyx_pybuffernd_variant_idxs.diminfo[0].shape)) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_variant_idx = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_variant_idxs.diminfo[0].strides));

      /* "pgenlib.pyx":838
 *             for uii in range(variant_batch_size):
 *                 variant_idx = variant_idxs[uii + variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 */
      __pyx_t_5 = ((__pyx_v_variant_idx >= __pyx_v_raw_variant_ct) != 0);
      if (__pyx_t_5) {

        /* "pgenlib.pyx":839
 *                 variant_idx = variant_idxs[uii + variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")             # <<<<<<<<<<<<<<
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:
 */
        __pyx_t_8 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_kp_s_read_list_variant_index_too_larg, __pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Add(__pyx_t_7, __pyx_kp_s_only); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyInt_From_uint32_t(__pyx_v_raw_variant_ct); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Add(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_in_file_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":838
 *             for uii in range(variant_batch_size):
 *                 variant_idx = variant_idxs[uii + variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 */
      }

      /* "pgenlib.pyx":840
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_list() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::pgr_read_allele_countvec_subset_unsafe(__pyx_v_subset_include_vec, __pyx_v_subset_cumulative_popcounts, __pyx_v_subset_size, __pyx_v_variant_idx, __pyx_v_allele_idx, __pyx_v_pgrp, __pyx_v_vmaj_iter);

      /* "pgenlib.pyx":841
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 */
      __pyx_t_5 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_5) {

        /* "pgenlib.pyx":842
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_list() error " + str(reterr))             # <<<<<<<<<<<<<<
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch
 */
        __pyx_t_7 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Add(__pyx_kp_s_read_list_error, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_6, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":841
 *                     raise RuntimeError("read_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_allele_countvec_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, allele_idx, pgrp, vmaj_iter)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_list() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 */
      }

      /* "pgenlib.pyx":843
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_list() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])             # <<<<<<<<<<<<<<
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf
 */
      __pyx_v_vmaj_iter = (&(__pyx_v_vmaj_iter[__pyx_v_sample_ctaw2]));
    }

    /* "pgenlib.pyx":844
 *                     raise RuntimeError("read_list() error " + str(reterr))
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 */
    __pyx_v_sample_batch_size = plink2::kPglQuaterTransposeBatch;

    /* "pgenlib.pyx":845
 *                 vmaj_iter = &(vmaj_iter[sample_ctaw2])
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:
 */
    __pyx_v_vmaj_iter = __pyx_v_multivar_vmaj_geno_buf;

    /* "pgenlib.pyx":846
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):             # <<<<<<<<<<<<<<
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 */
    __pyx_t_16 = __pyx_v_sample_batch_ct;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_sample_batch_idx = __pyx_t_17;

      /* "pgenlib.pyx":847
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:             # <<<<<<<<<<<<<<
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 */
      __pyx_t_5 = ((__pyx_v_sample_batch_idx == (__pyx_v_sample_batch_ct - 1)) != 0);
      if (__pyx_t_5) {

        /* "pgenlib.pyx":848
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 */
        __pyx_t_15 = (__pyx_v_subset_size - 1);
        if (unlikely(plink2::kPglQuaterTransposeBatch == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_sample_batch_size = (1 + ((uint32_t)__Pyx_mod_long(__pyx_t_15, plink2::kPglQuaterTransposeBatch)));

        /* "pgenlib.pyx":847
 *             vmaj_iter = multivar_vmaj_geno_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:             # <<<<<<<<<<<<<<
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 */
      }

      /* "pgenlib.pyx":849
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf             # <<<<<<<<<<<<<<
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):
 */
      __pyx_v_smaj_iter = __pyx_v_multivar_smaj_geno_batch_buf;

      /* "pgenlib.pyx":850
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)             # <<<<<<<<<<<<<<
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = &(geno_int64_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])
 */
      plink2::transpose_quaterblock(__pyx_v_vmaj_iter, __pyx_v_sample_ctaw2, plink2::kPglQuaterTransposeWords, __pyx_v_variant_batch_size, __pyx_v_sample_batch_size, __pyx_v_smaj_iter, __pyx_v_transpose_batch_buf);

      /* "pgenlib.pyx":851
 *                 smaj_iter = multivar_smaj_geno_batch_buf
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):             # <<<<<<<<<<<<<<
 *                     data_ptr = &(geno_int64_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])
 *                     genoarr_to_int64s_minus9(smaj_iter, variant_batch_size, data_ptr)
 */
      __pyx_t_19 = __pyx_v_sample_batch_size;
      for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
        __pyx_v_uii = __pyx_t_20;

        /* "pgenlib.pyx":852
 *                 transpose_quaterblock(vmaj_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = &(geno_int64_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])             # <<<<<<<<<<<<<<
 *                     genoarr_to_int64s_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 */
        __pyx_t_21 = (__pyx_v_uii + (__pyx_v_sample_batch_idx * plink2::kPglQuaterTransposeBatch));
        __pyx_t_22 = (__pyx_v_variant_batch_idx * plink2::kPglQuaterTransposeBatch);
        __pyx_t_11 = -1;
        if (unlikely(__pyx_t_21 >= (size_t)__pyx_pybuffernd_geno_int64_out.diminfo[0].shape)) __pyx_t_11 = 0;
        if (unlikely(__pyx_t_22 >= (size_t)__pyx_pybuffernd_geno_int64_out.diminfo[1].shape)) __pyx_t_11 = 1;
        if (unlikely(__pyx_t_11 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_11);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_data_ptr = ((int64_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_geno_int64_out.diminfo[0].strides, __pyx_t_22, __pyx_pybuffernd_geno_int64_out.diminfo[1].strides))));

        /* "pgenlib.pyx":853
 *                 for uii in range(sample_batch_size):
 *                     data_ptr = &(geno_int64_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])
 *                     genoarr_to_int64s_minus9(smaj_iter, variant_batch_size, data_ptr)             # <<<<<<<<<<<<<<
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 */
        plink2::genoarr_to_int64s_minus9(__pyx_v_smaj_iter, __pyx_v_variant_batch_size, __pyx_v_data_ptr);

        /* "pgenlib.pyx":854
 *                     data_ptr = &(geno_int64_out[uii + sample_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch])
 *                     genoarr_to_int64s_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])             # <<<<<<<<<<<<<<
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_list_idx += kPglQuaterTransposeBatch
 */
        __pyx_v_smaj_iter = (&(__pyx_v_smaj_iter[plink2::kPglQuaterTransposeWords]));
      }

      /* "pgenlib.pyx":855
 *                     genoarr_to_int64s_minus9(smaj_iter, variant_batch_size, data_ptr)
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])             # <<<<<<<<<<<<<<
 *             variant_list_idx += kPglQuaterTransposeBatch
 *         return
 */
      __pyx_v_vmaj_iter = (&(__pyx_v_vmaj_iter[plink2::kPglQuaterTransposeWords]));
    }

    /* "pgenlib.pyx":856
 *                     smaj_iter = &(smaj_iter[kPglQuaterTransposeWords])
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_list_idx += kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_v_variant_list_idx = (__pyx_v_variant_list_idx + plink2::kPglQuaterTransposeBatch);
  }

  /* "pgenlib.pyx":857
 *                 vmaj_iter = &(vmaj_iter[kPglQuaterTransposeWords])
 *             variant_list_idx += kPglQuaterTransposeBatch
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cpdef read_list(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray geno_int_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":787
 *         return
 * 
 *     cdef read_list_internal64(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int64_t,mode="c",ndim=2] geno_int64_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_list_internal64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int64_out.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":859
 *         return
 * 
 *     cpdef read_list(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray geno_int_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         if geno_int_out.dtype == np.int8:
 *             self.read_list_internal8(variant_idxs, geno_int_out, allele_idx, sample_maj)
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_21read_list(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_list(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_variant_idxs, PyArrayObject *__pyx_v_geno_int_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_list *__pyx_optional_args) {
  uint32_t __pyx_v_allele_idx = ((uint32_t)1);
  int __pyx_v_sample_maj = ((int)0);
  __Pyx_LocalBuf_ND __pyx_pybuffernd_variant_idxs;
  __Pyx_Buffer __pyx_pybuffer_variant_idxs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal8 __pyx_t_10;
  struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal32 __pyx_t_11;
  struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal64 __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_list", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_allele_idx = __pyx_optional_args->allele_idx;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_sample_maj = __pyx_optional_args->sample_maj;
      }
    }
  }
  __pyx_pybuffer_variant_idxs.pybuffer.buf = NULL;
  __pyx_pybuffer_variant_idxs.refcount = 0;
  __pyx_pybuffernd_variant_idxs.data = NULL;
  __pyx_pybuffernd_variant_idxs.rcbuffer = &__pyx_pybuffer_variant_idxs;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer, (PyObject*)__pyx_v_variant_idxs, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_variant_idxs.diminfo[0].strides = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_variant_idxs.diminfo[0].shape = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.shape[0];
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_list); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_21read_list)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_allele_idx); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_sample_maj); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      __pyx_t_8 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_variant_idxs));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_variant_idxs));
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, ((PyObject *)__pyx_v_variant_idxs));
      __Pyx_INCREF(((PyObject *)__pyx_v_geno_int_out));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_geno_int_out));
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, ((PyObject *)__pyx_v_geno_int_out));
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 3+__pyx_t_7, __pyx_t_4);
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":860
 * 
 *     cpdef read_list(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray geno_int_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         if geno_int_out.dtype == np.int8:             # <<<<<<<<<<<<<<
 *             self.read_list_internal8(variant_idxs, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int32:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_geno_int_out), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_9) {

    /* "pgenlib.pyx":861
 *     cpdef read_list(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray geno_int_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         if geno_int_out.dtype == np.int8:
 *             self.read_list_internal8(variant_idxs, geno_int_out, allele_idx, sample_maj)             # <<<<<<<<<<<<<<
 *         elif geno_int_out.dtype == np.int32:
 *             self.read_list_internal32(variant_idxs, geno_int_out, allele_idx, sample_maj)
 */
    __pyx_t_10.__pyx_n = 2;
    __pyx_t_10.allele_idx = __pyx_v_allele_idx;
    __pyx_t_10.sample_maj = __pyx_v_sample_maj;
    __pyx_t_2 = ((struct __pyx_vtabstruct_7pgenlib_PgenReader *)__pyx_v_self->__pyx_vtab)->read_list_internal8(__pyx_v_self, ((PyArrayObject *)__pyx_v_variant_idxs), ((PyArrayObject *)__pyx_v_geno_int_out), &__pyx_t_10); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pgenlib.pyx":860
 * 
 *     cpdef read_list(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray geno_int_out, uint32_t allele_idx = 1, bint sample_maj = 0):
 *         if geno_int_out.dtype == np.int8:             # <<<<<<<<<<<<<<
 *             self.read_list_internal8(variant_idxs, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int32:
 */
    goto __pyx_L3;
  }

  /* "pgenlib.pyx":862
 *         if geno_int_out.dtype == np.int8:
 *             self.read_list_internal8(variant_idxs, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int32:             # <<<<<<<<<<<<<<
 *             self.read_list_internal32(variant_idxs, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int64:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_geno_int_out), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_9) {

    /* "pgenlib.pyx":863
 *             self.read_list_internal8(variant_idxs, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int32:
 *             self.read_list_internal32(variant_idxs, geno_int_out, allele_idx, sample_maj)             # <<<<<<<<<<<<<<
 *         elif geno_int_out.dtype == np.int64:
 *             self.read_list_internal64(variant_idxs, geno_int_out, allele_idx, sample_maj)
 */
    __pyx_t_11.__pyx_n = 2;
    __pyx_t_11.allele_idx = __pyx_v_allele_idx;
    __pyx_t_11.sample_maj = __pyx_v_sample_maj;
    __pyx_t_5 = ((struct __pyx_vtabstruct_7pgenlib_PgenReader *)__pyx_v_self->__pyx_vtab)->read_list_internal32(__pyx_v_self, ((PyArrayObject *)__pyx_v_variant_idxs), ((PyArrayObject *)__pyx_v_geno_int_out), &__pyx_t_11); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pgenlib.pyx":862
 *         if geno_int_out.dtype == np.int8:
 *             self.read_list_internal8(variant_idxs, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int32:             # <<<<<<<<<<<<<<
 *             self.read_list_internal32(variant_idxs, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int64:
 */
    goto __pyx_L3;
  }

  /* "pgenlib.pyx":864
 *         elif geno_int_out.dtype == np.int32:
 *             self.read_list_internal32(variant_idxs, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int64:             # <<<<<<<<<<<<<<
 *             self.read_list_internal64(variant_idxs, geno_int_out, allele_idx, sample_maj)
 *         else:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_geno_int_out), __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int64); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_9) {

    /* "pgenlib.pyx":865
 *             self.read_list_internal32(variant_idxs, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int64:
 *             self.read_list_internal64(variant_idxs, geno_int_out, allele_idx, sample_maj)             # <<<<<<<<<<<<<<
 *         else:
 *             raise RuntimeError("Invalid read_list() geno_int_out array element type (int8, int32, or int64 expected).")
 */
    __pyx_t_12.__pyx_n = 2;
    __pyx_t_12.allele_idx = __pyx_v_allele_idx;
    __pyx_t_12.sample_maj = __pyx_v_sample_maj;
    __pyx_t_1 = ((struct __pyx_vtabstruct_7pgenlib_PgenReader *)__pyx_v_self->__pyx_vtab)->read_list_internal64(__pyx_v_self, ((PyArrayObject *)__pyx_v_variant_idxs), ((PyArrayObject *)__pyx_v_geno_int_out), &__pyx_t_12); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pgenlib.pyx":864
 *         elif geno_int_out.dtype == np.int32:
 *             self.read_list_internal32(variant_idxs, geno_int_out, allele_idx, sample_maj)
 *         elif geno_int_out.dtype == np.int64:             # <<<<<<<<<<<<<<
 *             self.read_list_internal64(variant_idxs, geno_int_out, allele_idx, sample_maj)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pgenlib.pyx":867
 *             self.read_list_internal64(variant_idxs, geno_int_out, allele_idx, sample_maj)
 *         else:
 *             raise RuntimeError("Invalid read_list() geno_int_out array element type (int8, int32, or int64 expected).")             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "pgenlib.pyx":868
 *         else:
 *             raise RuntimeError("Invalid read_list() geno_int_out array element type (int8, int32, or int64 expected).")
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":859
 *         return
 * 
 *     cpdef read_list(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray geno_int_out, uint32_t allele_idx = 1, bint sample_maj = 0):             # <<<<<<<<<<<<<<
 *         if geno_int_out.dtype == np.int8:
 *             self.read_list_internal8(variant_idxs, geno_int_out, allele_idx, sample_maj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_21read_list(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_21read_list(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_variant_idxs = 0;
  PyArrayObject *__pyx_v_geno_int_out = 0;
  uint32_t __pyx_v_allele_idx;
  int __pyx_v_sample_maj;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_list (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variant_idxs,&__pyx_n_s_geno_int_out,&__pyx_n_s_allele_idx,&__pyx_n_s_sample_maj,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variant_idxs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_geno_int_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_list", 0, 2, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allele_idx);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sample_maj);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_list") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_variant_idxs = ((PyArrayObject *)values[0]);
    __pyx_v_geno_int_out = ((PyArrayObject *)values[1]);
    if (values[2]) {
      __pyx_v_allele_idx = __Pyx_PyInt_As_uint32_t(values[2]); if (unlikely((__pyx_v_allele_idx == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_allele_idx = ((uint32_t)1);
    }
    if (values[3]) {
      __pyx_v_sample_maj = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_sample_maj == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sample_maj = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_list", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenReader.read_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_variant_idxs), __pyx_ptype_5numpy_ndarray, 1, "variant_idxs", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geno_int_out), __pyx_ptype_5numpy_ndarray, 1, "geno_int_out", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_20read_list(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self), __pyx_v_variant_idxs, __pyx_v_geno_int_out, __pyx_v_allele_idx, __pyx_v_sample_maj);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_20read_list(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_variant_idxs, PyArrayObject *__pyx_v_geno_int_out, uint32_t __pyx_v_allele_idx, int __pyx_v_sample_maj) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_variant_idxs;
  __Pyx_Buffer __pyx_pybuffer_variant_idxs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_7pgenlib_10PgenReader_read_list __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_list", 0);
  __pyx_pybuffer_variant_idxs.pybuffer.buf = NULL;
  __pyx_pybuffer_variant_idxs.refcount = 0;
  __pyx_pybuffernd_variant_idxs.data = NULL;
  __pyx_pybuffernd_variant_idxs.rcbuffer = &__pyx_pybuffer_variant_idxs;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer, (PyObject*)__pyx_v_variant_idxs, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_variant_idxs.diminfo[0].strides = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_variant_idxs.diminfo[0].shape = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.shape[0];
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.allele_idx = __pyx_v_allele_idx;
  __pyx_t_2.sample_maj = __pyx_v_sample_maj;
  __pyx_t_1 = __pyx_vtabptr_7pgenlib_PgenReader->read_list(__pyx_v_self, __pyx_v_variant_idxs, __pyx_v_geno_int_out, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":871
 * 
 * 
 *     cpdef read_alleles_range(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_out, bint hap_maj = 0):             # <<<<<<<<<<<<<<
 *         # if hap_maj == False, allele_int32_out must have at least
 *         #   variant_idx_ct rows, 2 * sample_ct columns
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_23read_alleles_range(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_alleles_range(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx_start, uint32_t __pyx_v_variant_idx_end, PyArrayObject *__pyx_v_allele_int32_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_range *__pyx_optional_args) {
  int __pyx_v_hap_maj = ((int)0);
  uintptr_t const *__pyx_v_subset_include_vec;
  uint32_t const *__pyx_v_subset_cumulative_popcounts;
  plink2::pgen_reader_t *__pyx_v_pgrp;
  uintptr_t *__pyx_v_genovec;
  uintptr_t *__pyx_v_phasepresent;
  uintptr_t *__pyx_v_phaseinfo;
  uint32_t __pyx_v_variant_idx_ct;
  uint32_t __pyx_v_subset_size;
  int32_t *__pyx_v_main_data_ptr;
  uint32_t __pyx_v_variant_idx;
  uint32_t __pyx_v_phasepresent_ct;
  plink2::pglerr_t __pyx_v_reterr;
  uint32_t __pyx_v_variant_batch_ct;
  uint32_t __pyx_v_variant_batch_size;
  CYTHON_UNUSED uint32_t __pyx_v_variant_batch_sizel;
  uint32_t __pyx_v_variant_idx_offset;
  uint32_t __pyx_v_sample_ctaw2;
  uint32_t __pyx_v_sample_ctaw;
  uint32_t __pyx_v_sample_batch_ct;
  plink2::vul_t *__pyx_v_transpose_batch_buf;
  uintptr_t *__pyx_v_multivar_vmaj_geno_buf;
  uintptr_t *__pyx_v_multivar_vmaj_phaseinfo_buf;
  uintptr_t *__pyx_v_multivar_smaj_geno_batch_buf;
  uintptr_t *__pyx_v_multivar_smaj_phaseinfo_batch_buf;
  uintptr_t *__pyx_v_vmaj_geno_iter;
  uintptr_t *__pyx_v_vmaj_phaseinfo_iter;
  uintptr_t *__pyx_v_smaj_geno_iter;
  uintptr_t *__pyx_v_smaj_phaseinfo_iter;
  int32_t *__pyx_v_main_data1_ptr;
  uint32_t __pyx_v_variant_batch_idx;
  uint32_t __pyx_v_sample_batch_size;
  uint32_t __pyx_v_sample_batch_idx;
  uint32_t __pyx_v_uii;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32_out;
  __Pyx_Buffer __pyx_pybuffer_allele_int32_out;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  uintptr_t *__pyx_t_11;
  uint32_t *__pyx_t_12;
  plink2::pgen_reader_t *__pyx_t_13;
  uint32_t __pyx_t_14;
  uint32_t __pyx_t_15;
  size_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  int __pyx_t_18;
  plink2::vul_t *__pyx_t_19;
  long __pyx_t_20;
  uint32_t __pyx_t_21;
  uint32_t __pyx_t_22;
  uint32_t __pyx_t_23;
  uint32_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  size_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  size_t __pyx_t_28;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_alleles_range", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_hap_maj = __pyx_optional_args->hap_maj;
    }
  }
  __pyx_pybuffer_allele_int32_out.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32_out.refcount = 0;
  __pyx_pybuffernd_allele_int32_out.data = NULL;
  __pyx_pybuffernd_allele_int32_out.rcbuffer = &__pyx_pybuffer_allele_int32_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32_out.diminfo[0].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32_out.diminfo[0].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_allele_int32_out.diminfo[1].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_allele_int32_out.diminfo[1].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[1];
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_alleles_range); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_23read_alleles_range)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_end); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_hap_maj); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_9 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
      __Pyx_INCREF(((PyObject *)__pyx_v_allele_int32_out));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_allele_int32_out));
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, ((PyObject *)__pyx_v_allele_int32_out));
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, __pyx_t_5);
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":876
 *         # if hap_maj == True, allele_int32_out must have at least 2 * sample_ct
 *         #   rows, variant_idx_ct columns
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_alleles_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */
  __pyx_t_10 = ((__pyx_v_variant_idx_end > (__pyx_v_self->_info_ptr[0]).raw_variant_ct) != 0);
  if (__pyx_t_10) {

    /* "pgenlib.pyx":877
 *         #   rows, variant_idx_ct columns
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_alleles_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")             # <<<<<<<<<<<<<<
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_end); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_read_alleles_range_variant_idx_e, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_only); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_uint32_t((__pyx_v_self->_info_ptr[0]).raw_variant_ct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_in_file_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":876
 *         # if hap_maj == True, allele_int32_out must have at least 2 * sample_ct
 *         #   rows, variant_idx_ct columns
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_alleles_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 */
  }

  /* "pgenlib.pyx":878
 *         if variant_idx_end > self._info_ptr[0].raw_variant_ct:
 *             raise RuntimeError("read_alleles_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec             # <<<<<<<<<<<<<<
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 */
  __pyx_t_11 = __pyx_v_self->_subset_include_vec;
  __pyx_v_subset_include_vec = __pyx_t_11;

  /* "pgenlib.pyx":879
 *             raise RuntimeError("read_alleles_range() variant_idx_end too large (" + str(variant_idx_end) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts             # <<<<<<<<<<<<<<
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec
 */
  __pyx_t_12 = __pyx_v_self->_subset_cumulative_popcounts;
  __pyx_v_subset_cumulative_popcounts = __pyx_t_12;

  /* "pgenlib.pyx":880
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* phasepresent = self._phasepresent
 */
  __pyx_t_13 = __pyx_v_self->_state_ptr;
  __pyx_v_pgrp = __pyx_t_13;

  /* "pgenlib.pyx":881
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* phasepresent = self._phasepresent
 *         cdef uintptr_t* phaseinfo = self._phaseinfo
 */
  __pyx_t_11 = __pyx_v_self->_genovec;
  __pyx_v_genovec = __pyx_t_11;

  /* "pgenlib.pyx":882
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* phasepresent = self._phasepresent             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* phaseinfo = self._phaseinfo
 *         cdef uint32_t variant_idx_ct = variant_idx_end - variant_idx_start
 */
  __pyx_t_11 = __pyx_v_self->_phasepresent;
  __pyx_v_phasepresent = __pyx_t_11;

  /* "pgenlib.pyx":883
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* phasepresent = self._phasepresent
 *         cdef uintptr_t* phaseinfo = self._phaseinfo             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_idx_ct = variant_idx_end - variant_idx_start
 *         cdef uint32_t subset_size = self._subset_size
 */
  __pyx_t_11 = __pyx_v_self->_phaseinfo;
  __pyx_v_phaseinfo = __pyx_t_11;

  /* "pgenlib.pyx":884
 *         cdef uintptr_t* phasepresent = self._phasepresent
 *         cdef uintptr_t* phaseinfo = self._phaseinfo
 *         cdef uint32_t variant_idx_ct = variant_idx_end - variant_idx_start             # <<<<<<<<<<<<<<
 *         cdef uint32_t subset_size = self._subset_size
 *         cdef int32_t* main_data_ptr
 */
  __pyx_v_variant_idx_ct = (__pyx_v_variant_idx_end - __pyx_v_variant_idx_start);

  /* "pgenlib.pyx":885
 *         cdef uintptr_t* phaseinfo = self._phaseinfo
 *         cdef uint32_t variant_idx_ct = variant_idx_end - variant_idx_start
 *         cdef uint32_t subset_size = self._subset_size             # <<<<<<<<<<<<<<
 *         cdef int32_t* main_data_ptr
 *         cdef uint32_t variant_idx
 */
  __pyx_t_14 = __pyx_v_self->_subset_size;
  __pyx_v_subset_size = __pyx_t_14;

  /* "pgenlib.pyx":890
 *         cdef uint32_t phasepresent_ct
 *         cdef pglerr_t reterr
 *         if hap_maj == 0:             # <<<<<<<<<<<<<<
 *             if allele_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_alleles_range() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 */
  __pyx_t_10 = ((__pyx_v_hap_maj == 0) != 0);
  if (__pyx_t_10) {

    /* "pgenlib.pyx":891
 *         cdef pglerr_t reterr
 *         if hap_maj == 0:
 *             if allele_int32_out.shape[0] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_alleles_range() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if allele_int32_out.shape[1] < 2 * subset_size:
 */
    __pyx_t_10 = (((__pyx_v_allele_int32_out->dimensions[0]) < __pyx_v_variant_idx_ct) != 0);
    if (__pyx_t_10) {

      /* "pgenlib.pyx":892
 *         if hap_maj == 0:
 *             if allele_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_alleles_range() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")             # <<<<<<<<<<<<<<
 *             if allele_int32_out.shape[1] < 2 * subset_size:
 *                 raise RuntimeError("Variant-major read_alleles_range() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ", and column count should be twice that)")
 */
      __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_allele_int32_out->dimensions[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_kp_s_Variant_major_read_alleles_range, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_variant_idx_end_variant_idx_sta); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_ct); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":891
 *         cdef pglerr_t reterr
 *         if hap_maj == 0:
 *             if allele_int32_out.shape[0] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_alleles_range() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if allele_int32_out.shape[1] < 2 * subset_size:
 */
    }

    /* "pgenlib.pyx":893
 *             if allele_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_alleles_range() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if allele_int32_out.shape[1] < 2 * subset_size:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_alleles_range() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ", and column count should be twice that)")
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 */
    __pyx_t_10 = (((__pyx_v_allele_int32_out->dimensions[1]) < (2 * __pyx_v_subset_size)) != 0);
    if (__pyx_t_10) {

      /* "pgenlib.pyx":894
 *                 raise RuntimeError("Variant-major read_alleles_range() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if allele_int32_out.shape[1] < 2 * subset_size:
 *                 raise RuntimeError("Variant-major read_alleles_range() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ", and column count should be twice that)")             # <<<<<<<<<<<<<<
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 *                 # upgrade to multiallelic version of this function later
 */
      __pyx_t_6 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_allele_int32_out->dimensions[1])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_kp_s_Variant_major_read_alleles_range_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_current_sample_subset_has_size); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_subset_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_and_column_count_should_be_twic); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":893
 *             if allele_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_alleles_range() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *             if allele_int32_out.shape[1] < 2 * subset_size:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_alleles_range() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ", and column count should be twice that)")
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 */
    }

    /* "pgenlib.pyx":895
 *             if allele_int32_out.shape[1] < 2 * subset_size:
 *                 raise RuntimeError("Variant-major read_alleles_range() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ", and column count should be twice that)")
 *             for variant_idx in range(variant_idx_start, variant_idx_end):             # <<<<<<<<<<<<<<
 *                 # upgrade to multiallelic version of this function later
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, genovec, phasepresent, phaseinfo, &phasepresent_ct)
 */
    __pyx_t_14 = __pyx_v_variant_idx_end;
    for (__pyx_t_15 = __pyx_v_variant_idx_start; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
      __pyx_v_variant_idx = __pyx_t_15;

      /* "pgenlib.pyx":897
 *             for variant_idx in range(variant_idx_start, variant_idx_end):
 *                 # upgrade to multiallelic version of this function later
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, genovec, phasepresent, phaseinfo, &phasepresent_ct)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_alleles_range() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::pgr_read_refalt1_genovec_hphase_subset_unsafe(__pyx_v_subset_include_vec, __pyx_v_subset_cumulative_popcounts, __pyx_v_subset_size, __pyx_v_variant_idx, __pyx_v_pgrp, __pyx_v_genovec, __pyx_v_phasepresent, __pyx_v_phaseinfo, (&__pyx_v_phasepresent_ct));

      /* "pgenlib.pyx":898
 *                 # upgrade to multiallelic version of this function later
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, genovec, phasepresent, phaseinfo, &phasepresent_ct)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_alleles_range() error " + str(reterr))
 *                 main_data_ptr = <int32_t*>(&(allele_int32_out[(variant_idx - variant_idx_start), 0]))
 */
      __pyx_t_10 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_10) {

        /* "pgenlib.pyx":899
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, genovec, phasepresent, phaseinfo, &phasepresent_ct)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_alleles_range() error " + str(reterr))             # <<<<<<<<<<<<<<
 *                 main_data_ptr = <int32_t*>(&(allele_int32_out[(variant_idx - variant_idx_start), 0]))
 *                 genoarr_phased_to_allele_codes(genovec, phasepresent, phaseinfo, subset_size, phasepresent_ct, NULL, main_data_ptr)
 */
        __pyx_t_1 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Add(__pyx_kp_s_read_alleles_range_error, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":898
 *                 # upgrade to multiallelic version of this function later
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, genovec, phasepresent, phaseinfo, &phasepresent_ct)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_alleles_range() error " + str(reterr))
 *                 main_data_ptr = <int32_t*>(&(allele_int32_out[(variant_idx - variant_idx_start), 0]))
 */
      }

      /* "pgenlib.pyx":900
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_alleles_range() error " + str(reterr))
 *                 main_data_ptr = <int32_t*>(&(allele_int32_out[(variant_idx - variant_idx_start), 0]))             # <<<<<<<<<<<<<<
 *                 genoarr_phased_to_allele_codes(genovec, phasepresent, phaseinfo, subset_size, phasepresent_ct, NULL, main_data_ptr)
 *             return
 */
      __pyx_t_16 = (__pyx_v_variant_idx - __pyx_v_variant_idx_start);
      __pyx_t_17 = 0;
      __pyx_t_18 = -1;
      if (unlikely(__pyx_t_16 >= (size_t)__pyx_pybuffernd_allele_int32_out.diminfo[0].shape)) __pyx_t_18 = 0;
      if (__pyx_t_17 < 0) {
        __pyx_t_17 += __pyx_pybuffernd_allele_int32_out.diminfo[1].shape;
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_18 = 1;
      } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_allele_int32_out.diminfo[1].shape)) __pyx_t_18 = 1;
      if (unlikely(__pyx_t_18 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_18);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_main_data_ptr = ((int32_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_allele_int32_out.diminfo[0].strides, __pyx_t_17, __pyx_pybuffernd_allele_int32_out.diminfo[1].strides))));

      /* "pgenlib.pyx":901
 *                     raise RuntimeError("read_alleles_range() error " + str(reterr))
 *                 main_data_ptr = <int32_t*>(&(allele_int32_out[(variant_idx - variant_idx_start), 0]))
 *                 genoarr_phased_to_allele_codes(genovec, phasepresent, phaseinfo, subset_size, phasepresent_ct, NULL, main_data_ptr)             # <<<<<<<<<<<<<<
 *             return
 *         if variant_idx_start >= variant_idx_end:
 */
      plink2::genoarr_phased_to_allele_codes(__pyx_v_genovec, __pyx_v_phasepresent, __pyx_v_phaseinfo, __pyx_v_subset_size, __pyx_v_phasepresent_ct, NULL, __pyx_v_main_data_ptr);
    }

    /* "pgenlib.pyx":902
 *                 main_data_ptr = <int32_t*>(&(allele_int32_out[(variant_idx - variant_idx_start), 0]))
 *                 genoarr_phased_to_allele_codes(genovec, phasepresent, phaseinfo, subset_size, phasepresent_ct, NULL, main_data_ptr)
 *             return             # <<<<<<<<<<<<<<
 *         if variant_idx_start >= variant_idx_end:
 *             raise RuntimeError("read_alleles_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "pgenlib.pyx":890
 *         cdef uint32_t phasepresent_ct
 *         cdef pglerr_t reterr
 *         if hap_maj == 0:             # <<<<<<<<<<<<<<
 *             if allele_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_alleles_range() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 */
  }

  /* "pgenlib.pyx":903
 *                 genoarr_phased_to_allele_codes(genovec, phasepresent, phaseinfo, subset_size, phasepresent_ct, NULL, main_data_ptr)
 *             return
 *         if variant_idx_start >= variant_idx_end:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_alleles_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if allele_int32_out.shape[0] < 2 * subset_size:
 */
  __pyx_t_10 = ((__pyx_v_variant_idx_start >= __pyx_v_variant_idx_end) != 0);
  if (__pyx_t_10) {

    /* "pgenlib.pyx":904
 *             return
 *         if variant_idx_start >= variant_idx_end:
 *             raise RuntimeError("read_alleles_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")             # <<<<<<<<<<<<<<
 *         if allele_int32_out.shape[0] < 2 * subset_size:
 *             raise RuntimeError("Haplotype-major read_alleles_range() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ", and row count should be twice that)")
 */
    __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_start); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_kp_s_read_alleles_range_variant_idx_s, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_end); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_6, __pyx_kp_s__7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":903
 *                 genoarr_phased_to_allele_codes(genovec, phasepresent, phaseinfo, subset_size, phasepresent_ct, NULL, main_data_ptr)
 *             return
 *         if variant_idx_start >= variant_idx_end:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("read_alleles_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if allele_int32_out.shape[0] < 2 * subset_size:
 */
  }

  /* "pgenlib.pyx":905
 *         if variant_idx_start >= variant_idx_end:
 *             raise RuntimeError("read_alleles_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if allele_int32_out.shape[0] < 2 * subset_size:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Haplotype-major read_alleles_range() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ", and row count should be twice that)")
 *         if allele_int32_out.shape[1] < variant_idx_ct:
 */
  __pyx_t_10 = (((__pyx_v_allele_int32_out->dimensions[0]) < (2 * __pyx_v_subset_size)) != 0);
  if (__pyx_t_10) {

    /* "pgenlib.pyx":906
 *             raise RuntimeError("read_alleles_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if allele_int32_out.shape[0] < 2 * subset_size:
 *             raise RuntimeError("Haplotype-major read_alleles_range() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ", and row count should be twice that)")             # <<<<<<<<<<<<<<
 *         if allele_int32_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Haplotype-major read_alleles_range() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 */
    __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_allele_int32_out->dimensions[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_kp_s_Haplotype_major_read_alleles_ran, __pyx_t_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_current_sample_subset_has_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyInt_From_uint32_t(__pyx_v_subset_size); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_and_row_count_should_be_twice_t); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":905
 *         if variant_idx_start >= variant_idx_end:
 *             raise RuntimeError("read_alleles_range() variant_idx_start >= variant_idx_end (" + str(variant_idx_start) + ", " + str(variant_idx_end) + ")")
 *         if allele_int32_out.shape[0] < 2 * subset_size:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Haplotype-major read_alleles_range() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ", and row count should be twice that)")
 *         if allele_int32_out.shape[1] < variant_idx_ct:
 */
  }

  /* "pgenlib.pyx":907
 *         if allele_int32_out.shape[0] < 2 * subset_size:
 *             raise RuntimeError("Haplotype-major read_alleles_range() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ", and row count should be twice that)")
 *         if allele_int32_out.shape[1] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Haplotype-major read_alleles_range() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 */
  __pyx_t_10 = (((__pyx_v_allele_int32_out->dimensions[1]) < __pyx_v_variant_idx_ct) != 0);
  if (__pyx_t_10) {

    /* "pgenlib.pyx":908
 *             raise RuntimeError("Haplotype-major read_alleles_range() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ", and row count should be twice that)")
 *         if allele_int32_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Haplotype-major read_alleles_range() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 */
    __pyx_t_6 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_allele_int32_out->dimensions[1])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Haplotype_major_read_alleles_ran_2, __pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_variant_idx_end_variant_idx_sta); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_ct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":907
 *         if allele_int32_out.shape[0] < 2 * subset_size:
 *             raise RuntimeError("Haplotype-major read_alleles_range() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ", and row count should be twice that)")
 *         if allele_int32_out.shape[1] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Haplotype-major read_alleles_range() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 */
  }

  /* "pgenlib.pyx":909
 *         if allele_int32_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Haplotype-major read_alleles_range() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 */
  __pyx_v_variant_batch_ct = DIV_UP(__pyx_v_variant_idx_ct, plink2::kPglQuaterTransposeBatch);

  /* "pgenlib.pyx":910
 *             raise RuntimeError("Haplotype-major read_alleles_range() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; (variant_idx_end - variant_idx_start) is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 *         cdef uint32_t variant_idx_offset = variant_idx_start
 */
  __pyx_v_variant_batch_size = plink2::kPglQuaterTransposeBatch;

  /* "pgenlib.pyx":911
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_idx_offset = variant_idx_start
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 */
  __pyx_v_variant_batch_sizel = DIV_UP(__pyx_v_variant_batch_size, plink2::kBitsPerWord);

  /* "pgenlib.pyx":912
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 *         cdef uint32_t variant_idx_offset = variant_idx_start             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_ctaw = kWordsPerVec * DIV_UP(subset_size, kBitsPerWord)
 */
  __pyx_v_variant_idx_offset = __pyx_v_variant_idx_start;

  /* "pgenlib.pyx":913
 *         cdef uint32_t variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 *         cdef uint32_t variant_idx_offset = variant_idx_start
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_ctaw = kWordsPerVec * DIV_UP(subset_size, kBitsPerWord)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 */
  __pyx_v_sample_ctaw2 = (plink2::kWordsPerVec * DIV_UP(__pyx_v_subset_size, plink2::kBitsPerWordD2));

  /* "pgenlib.pyx":914
 *         cdef uint32_t variant_idx_offset = variant_idx_start
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_ctaw = kWordsPerVec * DIV_UP(subset_size, kBitsPerWord)             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 */
  __pyx_v_sample_ctaw = (plink2::kWordsPerVec * DIV_UP(__pyx_v_subset_size, plink2::kBitsPerWord));

  /* "pgenlib.pyx":915
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_ctaw = kWordsPerVec * DIV_UP(subset_size, kBitsPerWord)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 */
  __pyx_v_sample_batch_ct = DIV_UP(__pyx_v_subset_size, plink2::kPglQuaterTransposeBatch);

  /* "pgenlib.pyx":916
 *         cdef uint32_t sample_ctaw = kWordsPerVec * DIV_UP(subset_size, kBitsPerWord)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_vmaj_phaseinfo_buf = self._multivar_vmaj_phaseinfo_buf
 */
  __pyx_t_19 = __pyx_v_self->_transpose_batch_buf;
  __pyx_v_transpose_batch_buf = __pyx_t_19;

  /* "pgenlib.pyx":917
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_vmaj_phaseinfo_buf = self._multivar_vmaj_phaseinfo_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 */
  __pyx_t_11 = __pyx_v_self->_multivar_vmaj_geno_buf;
  __pyx_v_multivar_vmaj_geno_buf = __pyx_t_11;

  /* "pgenlib.pyx":918
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_vmaj_phaseinfo_buf = self._multivar_vmaj_phaseinfo_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 *         cdef uintptr_t* multivar_smaj_phaseinfo_batch_buf = self._multivar_smaj_phaseinfo_batch_buf
 */
  __pyx_t_11 = __pyx_v_self->_multivar_vmaj_phaseinfo_buf;
  __pyx_v_multivar_vmaj_phaseinfo_buf = __pyx_t_11;

  /* "pgenlib.pyx":919
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_vmaj_phaseinfo_buf = self._multivar_vmaj_phaseinfo_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_smaj_phaseinfo_batch_buf = self._multivar_smaj_phaseinfo_batch_buf
 *         cdef uintptr_t* vmaj_geno_iter
 */
  __pyx_t_11 = __pyx_v_self->_multivar_smaj_geno_batch_buf;
  __pyx_v_multivar_smaj_geno_batch_buf = __pyx_t_11;

  /* "pgenlib.pyx":920
 *         cdef uintptr_t* multivar_vmaj_phaseinfo_buf = self._multivar_vmaj_phaseinfo_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 *         cdef uintptr_t* multivar_smaj_phaseinfo_batch_buf = self._multivar_smaj_phaseinfo_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* vmaj_geno_iter
 *         cdef uintptr_t* vmaj_phaseinfo_iter
 */
  __pyx_t_11 = __pyx_v_self->_multivar_smaj_phaseinfo_batch_buf;
  __pyx_v_multivar_smaj_phaseinfo_batch_buf = __pyx_t_11;

  /* "pgenlib.pyx":930
 *         cdef uint32_t sample_batch_idx
 *         cdef uint32_t uii
 *         for variant_batch_idx in range(variant_batch_ct):             # <<<<<<<<<<<<<<
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 */
  __pyx_t_14 = __pyx_v_variant_batch_ct;
  for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
    __pyx_v_variant_batch_idx = __pyx_t_15;

    /* "pgenlib.pyx":931
 *         cdef uint32_t uii
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):             # <<<<<<<<<<<<<<
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *                 variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 */
    __pyx_t_10 = ((__pyx_v_variant_batch_idx == (__pyx_v_variant_batch_ct - 1)) != 0);
    if (__pyx_t_10) {

      /* "pgenlib.pyx":932
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *                 variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 *             vmaj_geno_iter = multivar_vmaj_geno_buf
 */
      __pyx_t_20 = (__pyx_v_variant_idx_ct - 1);
      if (unlikely(plink2::kPglQuaterTransposeBatch == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_variant_batch_size = (1 + ((uint32_t)__Pyx_mod_long(__pyx_t_20, plink2::kPglQuaterTransposeBatch)));

      /* "pgenlib.pyx":933
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *                 variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)             # <<<<<<<<<<<<<<
 *             vmaj_geno_iter = multivar_vmaj_geno_buf
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 */
      __pyx_v_variant_batch_sizel = DIV_UP(__pyx_v_variant_batch_size, plink2::kBitsPerWord);

      /* "pgenlib.pyx":931
 *         cdef uint32_t uii
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):             # <<<<<<<<<<<<<<
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *                 variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 */
    }

    /* "pgenlib.pyx":934
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *                 variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 *             vmaj_geno_iter = multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 *             for uii in range(variant_batch_size):
 */
    __pyx_v_vmaj_geno_iter = __pyx_v_multivar_vmaj_geno_buf;

    /* "pgenlib.pyx":935
 *                 variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 *             vmaj_geno_iter = multivar_vmaj_geno_buf
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf             # <<<<<<<<<<<<<<
 *             for uii in range(variant_batch_size):
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, pgrp, vmaj_geno_iter, phasepresent, vmaj_phaseinfo_iter, &phasepresent_ct)
 */
    __pyx_v_vmaj_phaseinfo_iter = __pyx_v_multivar_vmaj_phaseinfo_buf;

    /* "pgenlib.pyx":936
 *             vmaj_geno_iter = multivar_vmaj_geno_buf
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 *             for uii in range(variant_batch_size):             # <<<<<<<<<<<<<<
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, pgrp, vmaj_geno_iter, phasepresent, vmaj_phaseinfo_iter, &phasepresent_ct)
 *                 if reterr != kPglRetSuccess:
 */
    __pyx_t_21 = __pyx_v_variant_batch_size;
    for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_21; __pyx_t_22+=1) {
      __pyx_v_uii = __pyx_t_22;

      /* "pgenlib.pyx":937
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 *             for uii in range(variant_batch_size):
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, pgrp, vmaj_geno_iter, phasepresent, vmaj_phaseinfo_iter, &phasepresent_ct)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_alleles_range() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::pgr_read_refalt1_genovec_hphase_subset_unsafe(__pyx_v_subset_include_vec, __pyx_v_subset_cumulative_popcounts, __pyx_v_subset_size, (__pyx_v_uii + __pyx_v_variant_idx_offset), __pyx_v_pgrp, __pyx_v_vmaj_geno_iter, __pyx_v_phasepresent, __pyx_v_vmaj_phaseinfo_iter, (&__pyx_v_phasepresent_ct));

      /* "pgenlib.pyx":938
 *             for uii in range(variant_batch_size):
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, pgrp, vmaj_geno_iter, phasepresent, vmaj_phaseinfo_iter, &phasepresent_ct)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_alleles_range() error " + str(reterr))
 *                 if phasepresent_ct == 0:
 */
      __pyx_t_10 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_10) {

        /* "pgenlib.pyx":939
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, pgrp, vmaj_geno_iter, phasepresent, vmaj_phaseinfo_iter, &phasepresent_ct)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_alleles_range() error " + str(reterr))             # <<<<<<<<<<<<<<
 *                 if phasepresent_ct == 0:
 *                     fill_ulong_zero(sample_ctaw, vmaj_phaseinfo_iter)
 */
        __pyx_t_2 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Add(__pyx_kp_s_read_alleles_range_error, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":938
 *             for uii in range(variant_batch_size):
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, uii + variant_idx_offset, pgrp, vmaj_geno_iter, phasepresent, vmaj_phaseinfo_iter, &phasepresent_ct)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_alleles_range() error " + str(reterr))
 *                 if phasepresent_ct == 0:
 */
      }

      /* "pgenlib.pyx":940
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_alleles_range() error " + str(reterr))
 *                 if phasepresent_ct == 0:             # <<<<<<<<<<<<<<
 *                     fill_ulong_zero(sample_ctaw, vmaj_phaseinfo_iter)
 *                 # else:
 */
      __pyx_t_10 = ((__pyx_v_phasepresent_ct == 0) != 0);
      if (__pyx_t_10) {

        /* "pgenlib.pyx":941
 *                     raise RuntimeError("read_alleles_range() error " + str(reterr))
 *                 if phasepresent_ct == 0:
 *                     fill_ulong_zero(sample_ctaw, vmaj_phaseinfo_iter)             # <<<<<<<<<<<<<<
 *                 # else:
 *                     # bitvec_and(phasepresent, sample_ctaw, vmaj_phaseinfo_iter)
 */
        plink2::fill_ulong_zero(__pyx_v_sample_ctaw, __pyx_v_vmaj_phaseinfo_iter);

        /* "pgenlib.pyx":940
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_alleles_range() error " + str(reterr))
 *                 if phasepresent_ct == 0:             # <<<<<<<<<<<<<<
 *                     fill_ulong_zero(sample_ctaw, vmaj_phaseinfo_iter)
 *                 # else:
 */
      }

      /* "pgenlib.pyx":944
 *                 # else:
 *                     # bitvec_and(phasepresent, sample_ctaw, vmaj_phaseinfo_iter)
 *                 vmaj_geno_iter = &(vmaj_geno_iter[sample_ctaw2])             # <<<<<<<<<<<<<<
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[sample_ctaw])
 *             sample_batch_size = kPglQuaterTransposeBatch
 */
      __pyx_v_vmaj_geno_iter = (&(__pyx_v_vmaj_geno_iter[__pyx_v_sample_ctaw2]));

      /* "pgenlib.pyx":945
 *                     # bitvec_and(phasepresent, sample_ctaw, vmaj_phaseinfo_iter)
 *                 vmaj_geno_iter = &(vmaj_geno_iter[sample_ctaw2])
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[sample_ctaw])             # <<<<<<<<<<<<<<
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_geno_iter = multivar_vmaj_geno_buf
 */
      __pyx_v_vmaj_phaseinfo_iter = (&(__pyx_v_vmaj_phaseinfo_iter[__pyx_v_sample_ctaw]));
    }

    /* "pgenlib.pyx":946
 *                 vmaj_geno_iter = &(vmaj_geno_iter[sample_ctaw2])
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[sample_ctaw])
 *             sample_batch_size = kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *             vmaj_geno_iter = multivar_vmaj_geno_buf
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 */
    __pyx_v_sample_batch_size = plink2::kPglQuaterTransposeBatch;

    /* "pgenlib.pyx":947
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[sample_ctaw])
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_geno_iter = multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 */
    __pyx_v_vmaj_geno_iter = __pyx_v_multivar_vmaj_geno_buf;

    /* "pgenlib.pyx":948
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_geno_iter = multivar_vmaj_geno_buf
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf             # <<<<<<<<<<<<<<
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:
 */
    __pyx_v_vmaj_phaseinfo_iter = __pyx_v_multivar_vmaj_phaseinfo_buf;

    /* "pgenlib.pyx":949
 *             vmaj_geno_iter = multivar_vmaj_geno_buf
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 *             for sample_batch_idx in range(sample_batch_ct):             # <<<<<<<<<<<<<<
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 */
    __pyx_t_21 = __pyx_v_sample_batch_ct;
    for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_21; __pyx_t_22+=1) {
      __pyx_v_sample_batch_idx = __pyx_t_22;

      /* "pgenlib.pyx":950
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:             # <<<<<<<<<<<<<<
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_geno_iter = multivar_smaj_geno_batch_buf
 */
      __pyx_t_10 = ((__pyx_v_sample_batch_idx == (__pyx_v_sample_batch_ct - 1)) != 0);
      if (__pyx_t_10) {

        /* "pgenlib.pyx":951
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *                 smaj_geno_iter = multivar_smaj_geno_batch_buf
 *                 smaj_phaseinfo_iter = multivar_smaj_phaseinfo_batch_buf
 */
        __pyx_t_20 = (__pyx_v_subset_size - 1);
        if (unlikely(plink2::kPglQuaterTransposeBatch == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_sample_batch_size = (1 + ((uint32_t)__Pyx_mod_long(__pyx_t_20, plink2::kPglQuaterTransposeBatch)));

        /* "pgenlib.pyx":950
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:             # <<<<<<<<<<<<<<
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_geno_iter = multivar_smaj_geno_batch_buf
 */
      }

      /* "pgenlib.pyx":952
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_geno_iter = multivar_smaj_geno_batch_buf             # <<<<<<<<<<<<<<
 *                 smaj_phaseinfo_iter = multivar_smaj_phaseinfo_batch_buf
 *                 transpose_quaterblock(vmaj_geno_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_geno_iter, transpose_batch_buf)
 */
      __pyx_v_smaj_geno_iter = __pyx_v_multivar_smaj_geno_batch_buf;

      /* "pgenlib.pyx":953
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_geno_iter = multivar_smaj_geno_batch_buf
 *                 smaj_phaseinfo_iter = multivar_smaj_phaseinfo_batch_buf             # <<<<<<<<<<<<<<
 *                 transpose_quaterblock(vmaj_geno_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_geno_iter, transpose_batch_buf)
 *                 # todo: skip bitblock transpose when all phasepresent_ct values
 */
      __pyx_v_smaj_phaseinfo_iter = __pyx_v_multivar_smaj_phaseinfo_batch_buf;

      /* "pgenlib.pyx":954
 *                 smaj_geno_iter = multivar_smaj_geno_batch_buf
 *                 smaj_phaseinfo_iter = multivar_smaj_phaseinfo_batch_buf
 *                 transpose_quaterblock(vmaj_geno_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_geno_iter, transpose_batch_buf)             # <<<<<<<<<<<<<<
 *                 # todo: skip bitblock transpose when all phasepresent_ct values
 *                 #       are zero, etc.
 */
      plink2::transpose_quaterblock(__pyx_v_vmaj_geno_iter, __pyx_v_sample_ctaw2, plink2::kPglQuaterTransposeWords, __pyx_v_variant_batch_size, __pyx_v_sample_batch_size, __pyx_v_smaj_geno_iter, __pyx_v_transpose_batch_buf);

      /* "pgenlib.pyx":957
 *                 # todo: skip bitblock transpose when all phasepresent_ct values
 *                 #       are zero, etc.
 *                 transpose_bitblock(vmaj_phaseinfo_iter, sample_ctaw, <uint32_t>(kPglQuaterTransposeWords / 2), variant_batch_size, sample_batch_size, smaj_phaseinfo_iter, transpose_batch_buf)             # <<<<<<<<<<<<<<
 *                 for uii in range(sample_batch_size):
 *                     main_data_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords), variant_batch_idx * kPglQuaterTransposeBatch]))
 */
      plink2::transpose_bitblock(__pyx_v_vmaj_phaseinfo_iter, __pyx_v_sample_ctaw, ((uint32_t)__Pyx_div_long(plink2::kPglQuaterTransposeWords, 2)), __pyx_v_variant_batch_size, __pyx_v_sample_batch_size, __pyx_v_smaj_phaseinfo_iter, __pyx_v_transpose_batch_buf);

      /* "pgenlib.pyx":958
 *                 #       are zero, etc.
 *                 transpose_bitblock(vmaj_phaseinfo_iter, sample_ctaw, <uint32_t>(kPglQuaterTransposeWords / 2), variant_batch_size, sample_batch_size, smaj_phaseinfo_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):             # <<<<<<<<<<<<<<
 *                     main_data_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords), variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     main_data1_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords) + 1, variant_batch_idx * kPglQuaterTransposeBatch]))
 */
      __pyx_t_23 = __pyx_v_sample_batch_size;
      for (__pyx_t_24 = 0; __pyx_t_24 < __pyx_t_23; __pyx_t_24+=1) {
        __pyx_v_uii = __pyx_t_24;

        /* "pgenlib.pyx":959
 *                 transpose_bitblock(vmaj_phaseinfo_iter, sample_ctaw, <uint32_t>(kPglQuaterTransposeWords / 2), variant_batch_size, sample_batch_size, smaj_phaseinfo_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):
 *                     main_data_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords), variant_batch_idx * kPglQuaterTransposeBatch]))             # <<<<<<<<<<<<<<
 *                     main_data1_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords) + 1, variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     genoarr_phased_to_hap_codes(smaj_geno_iter, smaj_phaseinfo_iter, variant_batch_size, main_data_ptr, main_data1_ptr)
 */
        __pyx_t_25 = (2 * (__pyx_v_uii + (__pyx_v_sample_batch_idx * plink2::kPglQuaterTransposeWords)));
        __pyx_t_26 = (__pyx_v_variant_batch_idx * plink2::kPglQuaterTransposeBatch);
        __pyx_t_18 = -1;
        if (__pyx_t_25 < 0) {
          __pyx_t_25 += __pyx_pybuffernd_allele_int32_out.diminfo[0].shape;
          if (unlikely(__pyx_t_25 < 0)) __pyx_t_18 = 0;
        } else if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_allele_int32_out.diminfo[0].shape)) __pyx_t_18 = 0;
        if (unlikely(__pyx_t_26 >= (size_t)__pyx_pybuffernd_allele_int32_out.diminfo[1].shape)) __pyx_t_18 = 1;
        if (unlikely(__pyx_t_18 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_18);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_main_data_ptr = ((int32_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_allele_int32_out.diminfo[0].strides, __pyx_t_26, __pyx_pybuffernd_allele_int32_out.diminfo[1].strides))));

        /* "pgenlib.pyx":960
 *                 for uii in range(sample_batch_size):
 *                     main_data_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords), variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     main_data1_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords) + 1, variant_batch_idx * kPglQuaterTransposeBatch]))             # <<<<<<<<<<<<<<
 *                     genoarr_phased_to_hap_codes(smaj_geno_iter, smaj_phaseinfo_iter, variant_batch_size, main_data_ptr, main_data1_ptr)
 *                     smaj_geno_iter = &(smaj_geno_iter[kPglQuaterTransposeWords])
 */
        __pyx_t_27 = ((2 * (__pyx_v_uii + (__pyx_v_sample_batch_idx * plink2::kPglQuaterTransposeWords))) + 1);
        __pyx_t_28 = (__pyx_v_variant_batch_idx * plink2::kPglQuaterTransposeBatch);
        __pyx_t_18 = -1;
        if (__pyx_t_27 < 0) {
          __pyx_t_27 += __pyx_pybuffernd_allele_int32_out.diminfo[0].shape;
          if (unlikely(__pyx_t_27 < 0)) __pyx_t_18 = 0;
        } else if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_allele_int32_out.diminfo[0].shape)) __pyx_t_18 = 0;
        if (unlikely(__pyx_t_28 >= (size_t)__pyx_pybuffernd_allele_int32_out.diminfo[1].shape)) __pyx_t_18 = 1;
        if (unlikely(__pyx_t_18 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_18);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 960; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_main_data1_ptr = ((int32_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_allele_int32_out.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_allele_int32_out.diminfo[1].strides))));

        /* "pgenlib.pyx":961
 *                     main_data_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords), variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     main_data1_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords) + 1, variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     genoarr_phased_to_hap_codes(smaj_geno_iter, smaj_phaseinfo_iter, variant_batch_size, main_data_ptr, main_data1_ptr)             # <<<<<<<<<<<<<<
 *                     smaj_geno_iter = &(smaj_geno_iter[kPglQuaterTransposeWords])
 *                     smaj_phaseinfo_iter = &(smaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])
 */
        plink2::genoarr_phased_to_hap_codes(__pyx_v_smaj_geno_iter, __pyx_v_smaj_phaseinfo_iter, __pyx_v_variant_batch_size, __pyx_v_main_data_ptr, __pyx_v_main_data1_ptr);

        /* "pgenlib.pyx":962
 *                     main_data1_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords) + 1, variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     genoarr_phased_to_hap_codes(smaj_geno_iter, smaj_phaseinfo_iter, variant_batch_size, main_data_ptr, main_data1_ptr)
 *                     smaj_geno_iter = &(smaj_geno_iter[kPglQuaterTransposeWords])             # <<<<<<<<<<<<<<
 *                     smaj_phaseinfo_iter = &(smaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])
 *                 vmaj_geno_iter = &(vmaj_geno_iter[kPglQuaterTransposeWords])
 */
        __pyx_v_smaj_geno_iter = (&(__pyx_v_smaj_geno_iter[plink2::kPglQuaterTransposeWords]));

        /* "pgenlib.pyx":963
 *                     genoarr_phased_to_hap_codes(smaj_geno_iter, smaj_phaseinfo_iter, variant_batch_size, main_data_ptr, main_data1_ptr)
 *                     smaj_geno_iter = &(smaj_geno_iter[kPglQuaterTransposeWords])
 *                     smaj_phaseinfo_iter = &(smaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])             # <<<<<<<<<<<<<<
 *                 vmaj_geno_iter = &(vmaj_geno_iter[kPglQuaterTransposeWords])
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])
 */
        __pyx_v_smaj_phaseinfo_iter = (&(__pyx_v_smaj_phaseinfo_iter[__Pyx_div_long(plink2::kPglQuaterTransposeWords, 2)]));
      }

      /* "pgenlib.pyx":964
 *                     smaj_geno_iter = &(smaj_geno_iter[kPglQuaterTransposeWords])
 *                     smaj_phaseinfo_iter = &(smaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])
 *                 vmaj_geno_iter = &(vmaj_geno_iter[kPglQuaterTransposeWords])             # <<<<<<<<<<<<<<
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])
 *             variant_idx_offset += kPglQuaterTransposeBatch
 */
      __pyx_v_vmaj_geno_iter = (&(__pyx_v_vmaj_geno_iter[plink2::kPglQuaterTransposeWords]));

      /* "pgenlib.pyx":965
 *                     smaj_phaseinfo_iter = &(smaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])
 *                 vmaj_geno_iter = &(vmaj_geno_iter[kPglQuaterTransposeWords])
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])             # <<<<<<<<<<<<<<
 *             variant_idx_offset += kPglQuaterTransposeBatch
 *         return
 */
      __pyx_v_vmaj_phaseinfo_iter = (&(__pyx_v_vmaj_phaseinfo_iter[__Pyx_div_long(plink2::kPglQuaterTransposeWords, 2)]));
    }

    /* "pgenlib.pyx":966
 *                 vmaj_geno_iter = &(vmaj_geno_iter[kPglQuaterTransposeWords])
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])
 *             variant_idx_offset += kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_v_variant_idx_offset = (__pyx_v_variant_idx_offset + plink2::kPglQuaterTransposeBatch);
  }

  /* "pgenlib.pyx":967
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])
 *             variant_idx_offset += kPglQuaterTransposeBatch
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":871
 * 
 * 
 *     cpdef read_alleles_range(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_out, bint hap_maj = 0):             # <<<<<<<<<<<<<<
 *         # if hap_maj == False, allele_int32_out must have at least
 *         #   variant_idx_ct rows, 2 * sample_ct columns
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_23read_alleles_range(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_23read_alleles_range(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint32_t __pyx_v_variant_idx_start;
  uint32_t __pyx_v_variant_idx_end;
  PyArrayObject *__pyx_v_allele_int32_out = 0;
  int __pyx_v_hap_maj;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_alleles_range (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variant_idx_start,&__pyx_n_s_variant_idx_end,&__pyx_n_s_allele_int32_out,&__pyx_n_s_hap_maj,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variant_idx_start)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variant_idx_end)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_alleles_range", 0, 3, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allele_int32_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_alleles_range", 0, 3, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hap_maj);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_alleles_range") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_variant_idx_start = __Pyx_PyInt_As_uint32_t(values[0]); if (unlikely((__pyx_v_variant_idx_start == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_variant_idx_end = __Pyx_PyInt_As_uint32_t(values[1]); if (unlikely((__pyx_v_variant_idx_end == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_allele_int32_out = ((PyArrayObject *)values[2]);
    if (values[3]) {
      __pyx_v_hap_maj = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_hap_maj == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_hap_maj = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_alleles_range", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_allele_int32_out), __pyx_ptype_5numpy_ndarray, 1, "allele_int32_out", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_22read_alleles_range(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self), __pyx_v_variant_idx_start, __pyx_v_variant_idx_end, __pyx_v_allele_int32_out, __pyx_v_hap_maj);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_22read_alleles_range(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx_start, uint32_t __pyx_v_variant_idx_end, PyArrayObject *__pyx_v_allele_int32_out, int __pyx_v_hap_maj) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32_out;
  __Pyx_Buffer __pyx_pybuffer_allele_int32_out;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_range __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_alleles_range", 0);
  __pyx_pybuffer_allele_int32_out.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32_out.refcount = 0;
  __pyx_pybuffernd_allele_int32_out.data = NULL;
  __pyx_pybuffernd_allele_int32_out.rcbuffer = &__pyx_pybuffer_allele_int32_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32_out.diminfo[0].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32_out.diminfo[0].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_allele_int32_out.diminfo[1].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_allele_int32_out.diminfo[1].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[1];
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.hap_maj = __pyx_v_hap_maj;
  __pyx_t_1 = __pyx_vtabptr_7pgenlib_PgenReader->read_alleles_range(__pyx_v_self, __pyx_v_variant_idx_start, __pyx_v_variant_idx_end, __pyx_v_allele_int32_out, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":970
 * 
 * 
 *     cpdef read_alleles_list(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_out, bint hap_maj = 0):             # <<<<<<<<<<<<<<
 *         # if hap_maj == False, allele_int32_out must have at least
 *         #   variant_idx_ct rows, 2 * sample_ct columns
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_25read_alleles_list(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_alleles_list(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_variant_idxs, PyArrayObject *__pyx_v_allele_int32_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_list *__pyx_optional_args) {
  int __pyx_v_hap_maj = ((int)0);
  uint32_t __pyx_v_raw_variant_ct;
  uintptr_t const *__pyx_v_subset_include_vec;
  uint32_t const *__pyx_v_subset_cumulative_popcounts;
  plink2::pgen_reader_t *__pyx_v_pgrp;
  uintptr_t *__pyx_v_genovec;
  uintptr_t *__pyx_v_phasepresent;
  uintptr_t *__pyx_v_phaseinfo;
  uint32_t __pyx_v_variant_idx_ct;
  uint32_t __pyx_v_subset_size;
  int32_t *__pyx_v_main_data_ptr;
  uint32_t __pyx_v_variant_list_idx;
  uint32_t __pyx_v_variant_idx;
  uint32_t __pyx_v_phasepresent_ct;
  plink2::pglerr_t __pyx_v_reterr;
  uint32_t __pyx_v_variant_batch_ct;
  uint32_t __pyx_v_variant_batch_size;
  CYTHON_UNUSED uint32_t __pyx_v_variant_batch_sizel;
  uint32_t __pyx_v_sample_ctaw2;
  uint32_t __pyx_v_sample_ctaw;
  uint32_t __pyx_v_sample_batch_ct;
  plink2::vul_t *__pyx_v_transpose_batch_buf;
  uintptr_t *__pyx_v_multivar_vmaj_geno_buf;
  uintptr_t *__pyx_v_multivar_vmaj_phaseinfo_buf;
  uintptr_t *__pyx_v_multivar_smaj_geno_batch_buf;
  uintptr_t *__pyx_v_multivar_smaj_phaseinfo_batch_buf;
  uintptr_t *__pyx_v_vmaj_geno_iter;
  uintptr_t *__pyx_v_vmaj_phaseinfo_iter;
  uintptr_t *__pyx_v_smaj_geno_iter;
  uintptr_t *__pyx_v_smaj_phaseinfo_iter;
  int32_t *__pyx_v_main_data1_ptr;
  uint32_t __pyx_v_variant_batch_idx;
  uint32_t __pyx_v_sample_batch_size;
  uint32_t __pyx_v_sample_batch_idx;
  uint32_t __pyx_v_uii;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32_out;
  __Pyx_Buffer __pyx_pybuffer_allele_int32_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_variant_idxs;
  __Pyx_Buffer __pyx_pybuffer_variant_idxs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  uint32_t __pyx_t_8;
  uintptr_t *__pyx_t_9;
  uint32_t *__pyx_t_10;
  plink2::pgen_reader_t *__pyx_t_11;
  int __pyx_t_12;
  uint32_t __pyx_t_13;
  size_t __pyx_t_14;
  int __pyx_t_15;
  size_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  plink2::vul_t *__pyx_t_18;
  long __pyx_t_19;
  uint32_t __pyx_t_20;
  uint32_t __pyx_t_21;
  size_t __pyx_t_22;
  uint32_t __pyx_t_23;
  uint32_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  size_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  size_t __pyx_t_28;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_alleles_list", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_hap_maj = __pyx_optional_args->hap_maj;
    }
  }
  __pyx_pybuffer_variant_idxs.pybuffer.buf = NULL;
  __pyx_pybuffer_variant_idxs.refcount = 0;
  __pyx_pybuffernd_variant_idxs.data = NULL;
  __pyx_pybuffernd_variant_idxs.rcbuffer = &__pyx_pybuffer_variant_idxs;
  __pyx_pybuffer_allele_int32_out.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32_out.refcount = 0;
  __pyx_pybuffernd_allele_int32_out.data = NULL;
  __pyx_pybuffernd_allele_int32_out.rcbuffer = &__pyx_pybuffer_allele_int32_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer, (PyObject*)__pyx_v_variant_idxs, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_variant_idxs.diminfo[0].strides = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_variant_idxs.diminfo[0].shape = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32_out.diminfo[0].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32_out.diminfo[0].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_allele_int32_out.diminfo[1].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_allele_int32_out.diminfo[1].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[1];
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_alleles_list); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_25read_alleles_list)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_hap_maj); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_variant_idxs));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_variant_idxs));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_variant_idxs));
      __Pyx_INCREF(((PyObject *)__pyx_v_allele_int32_out));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_allele_int32_out));
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, ((PyObject *)__pyx_v_allele_int32_out));
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":975
 *         # if hap_maj == True, allele_int32_out must have at least 2 * sample_ct
 *         #   rows, variant_idx_ct columns
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct             # <<<<<<<<<<<<<<
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 */
  __pyx_t_8 = (__pyx_v_self->_info_ptr[0]).raw_variant_ct;
  __pyx_v_raw_variant_ct = __pyx_t_8;

  /* "pgenlib.pyx":976
 *         #   rows, variant_idx_ct columns
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec             # <<<<<<<<<<<<<<
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 */
  __pyx_t_9 = __pyx_v_self->_subset_include_vec;
  __pyx_v_subset_include_vec = __pyx_t_9;

  /* "pgenlib.pyx":977
 *         cdef uint32_t raw_variant_ct = self._info_ptr[0].raw_variant_ct
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts             # <<<<<<<<<<<<<<
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec
 */
  __pyx_t_10 = __pyx_v_self->_subset_cumulative_popcounts;
  __pyx_v_subset_cumulative_popcounts = __pyx_t_10;

  /* "pgenlib.pyx":978
 *         cdef const uintptr_t* subset_include_vec = self._subset_include_vec
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* phasepresent = self._phasepresent
 */
  __pyx_t_11 = __pyx_v_self->_state_ptr;
  __pyx_v_pgrp = __pyx_t_11;

  /* "pgenlib.pyx":979
 *         cdef const uint32_t* subset_cumulative_popcounts = self._subset_cumulative_popcounts
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* phasepresent = self._phasepresent
 *         cdef uintptr_t* phaseinfo = self._phaseinfo
 */
  __pyx_t_9 = __pyx_v_self->_genovec;
  __pyx_v_genovec = __pyx_t_9;

  /* "pgenlib.pyx":980
 *         cdef pgen_reader_t* pgrp = self._state_ptr
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* phasepresent = self._phasepresent             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* phaseinfo = self._phaseinfo
 *         cdef uint32_t variant_idx_ct = <uint32_t>variant_idxs.shape[0]
 */
  __pyx_t_9 = __pyx_v_self->_phasepresent;
  __pyx_v_phasepresent = __pyx_t_9;

  /* "pgenlib.pyx":981
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* phasepresent = self._phasepresent
 *         cdef uintptr_t* phaseinfo = self._phaseinfo             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_idx_ct = <uint32_t>variant_idxs.shape[0]
 *         cdef uint32_t subset_size = self._subset_size
 */
  __pyx_t_9 = __pyx_v_self->_phaseinfo;
  __pyx_v_phaseinfo = __pyx_t_9;

  /* "pgenlib.pyx":982
 *         cdef uintptr_t* phasepresent = self._phasepresent
 *         cdef uintptr_t* phaseinfo = self._phaseinfo
 *         cdef uint32_t variant_idx_ct = <uint32_t>variant_idxs.shape[0]             # <<<<<<<<<<<<<<
 *         cdef uint32_t subset_size = self._subset_size
 *         cdef int32_t* main_data_ptr
 */
  __pyx_v_variant_idx_ct = ((uint32_t)(__pyx_v_variant_idxs->dimensions[0]));

  /* "pgenlib.pyx":983
 *         cdef uintptr_t* phaseinfo = self._phaseinfo
 *         cdef uint32_t variant_idx_ct = <uint32_t>variant_idxs.shape[0]
 *         cdef uint32_t subset_size = self._subset_size             # <<<<<<<<<<<<<<
 *         cdef int32_t* main_data_ptr
 *         cdef uint32_t variant_list_idx
 */
  __pyx_t_8 = __pyx_v_self->_subset_size;
  __pyx_v_subset_size = __pyx_t_8;

  /* "pgenlib.pyx":989
 *         cdef uint32_t phasepresent_ct
 *         cdef pglerr_t reterr
 *         if hap_maj == 0:             # <<<<<<<<<<<<<<
 *             if allele_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_alleles_list() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 */
  __pyx_t_12 = ((__pyx_v_hap_maj == 0) != 0);
  if (__pyx_t_12) {

    /* "pgenlib.pyx":990
 *         cdef pglerr_t reterr
 *         if hap_maj == 0:
 *             if allele_int32_out.shape[0] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_alleles_list() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if allele_int32_out.shape[1] < 2 * subset_size:
 */
    __pyx_t_12 = (((__pyx_v_allele_int32_out->dimensions[0]) < __pyx_v_variant_idx_ct) != 0);
    if (__pyx_t_12) {

      /* "pgenlib.pyx":991
 *         if hap_maj == 0:
 *             if allele_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_alleles_list() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")             # <<<<<<<<<<<<<<
 *             if allele_int32_out.shape[1] < 2 * subset_size:
 *                 raise RuntimeError("Variant-major read_alleles_list() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ", and column count should be twice that)")
 */
      __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_allele_int32_out->dimensions[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Variant_major_read_alleles_list, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_variant_idxs_length_is); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_ct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_kp_s__7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":990
 *         cdef pglerr_t reterr
 *         if hap_maj == 0:
 *             if allele_int32_out.shape[0] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_alleles_list() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if allele_int32_out.shape[1] < 2 * subset_size:
 */
    }

    /* "pgenlib.pyx":992
 *             if allele_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_alleles_list() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if allele_int32_out.shape[1] < 2 * subset_size:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_alleles_list() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ", and column count should be twice that)")
 *             for variant_list_idx in range(variant_idx_ct):
 */
    __pyx_t_12 = (((__pyx_v_allele_int32_out->dimensions[1]) < (2 * __pyx_v_subset_size)) != 0);
    if (__pyx_t_12) {

      /* "pgenlib.pyx":993
 *                 raise RuntimeError("Variant-major read_alleles_list() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if allele_int32_out.shape[1] < 2 * subset_size:
 *                 raise RuntimeError("Variant-major read_alleles_list() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ", and column count should be twice that)")             # <<<<<<<<<<<<<<
 *             for variant_list_idx in range(variant_idx_ct):
 *                 variant_idx = variant_idxs[variant_list_idx]
 */
      __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_allele_int32_out->dimensions[1])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Variant_major_read_alleles_list_2, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_current_sample_subset_has_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_subset_size); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_and_column_count_should_be_twic); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":992
 *             if allele_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_alleles_list() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *             if allele_int32_out.shape[1] < 2 * subset_size:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Variant-major read_alleles_list() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ", and column count should be twice that)")
 *             for variant_list_idx in range(variant_idx_ct):
 */
    }

    /* "pgenlib.pyx":994
 *             if allele_int32_out.shape[1] < 2 * subset_size:
 *                 raise RuntimeError("Variant-major read_alleles_list() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ", and column count should be twice that)")
 *             for variant_list_idx in range(variant_idx_ct):             # <<<<<<<<<<<<<<
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:
 */
    __pyx_t_8 = __pyx_v_variant_idx_ct;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_8; __pyx_t_13+=1) {
      __pyx_v_variant_list_idx = __pyx_t_13;

      /* "pgenlib.pyx":995
 *                 raise RuntimeError("Variant-major read_alleles_list() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; current sample subset has size " + str(subset_size) + ", and column count should be twice that)")
 *             for variant_list_idx in range(variant_idx_ct):
 *                 variant_idx = variant_idxs[variant_list_idx]             # <<<<<<<<<<<<<<
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_alleles_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 */
      __pyx_t_14 = __pyx_v_variant_list_idx;
      __pyx_t_15 = -1;
      if (unlikely(__pyx_t_14 >= (size_t)__pyx_pybuffernd_variant_idxs.diminfo[0].shape)) __pyx_t_15 = 0;
      if (unlikely(__pyx_t_15 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_15);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_variant_idx = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_variant_idxs.diminfo[0].strides));

      /* "pgenlib.pyx":996
 *             for variant_list_idx in range(variant_idx_ct):
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_alleles_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 # upgrade to multiallelic version of this function later
 */
      __pyx_t_12 = ((__pyx_v_variant_idx >= __pyx_v_raw_variant_ct) != 0);
      if (__pyx_t_12) {

        /* "pgenlib.pyx":997
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_alleles_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")             # <<<<<<<<<<<<<<
 *                 # upgrade to multiallelic version of this function later
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, genovec, phasepresent, phaseinfo, &phasepresent_ct)
 */
        __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Add(__pyx_kp_s_read_alleles_list_variant_index, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_only); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_raw_variant_ct); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_in_file_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":996
 *             for variant_list_idx in range(variant_idx_ct):
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_alleles_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 # upgrade to multiallelic version of this function later
 */
      }

      /* "pgenlib.pyx":999
 *                     raise RuntimeError("read_alleles_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 # upgrade to multiallelic version of this function later
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, genovec, phasepresent, phaseinfo, &phasepresent_ct)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_alleles_list() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::pgr_read_refalt1_genovec_hphase_subset_unsafe(__pyx_v_subset_include_vec, __pyx_v_subset_cumulative_popcounts, __pyx_v_subset_size, __pyx_v_variant_idx, __pyx_v_pgrp, __pyx_v_genovec, __pyx_v_phasepresent, __pyx_v_phaseinfo, (&__pyx_v_phasepresent_ct));

      /* "pgenlib.pyx":1000
 *                 # upgrade to multiallelic version of this function later
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, genovec, phasepresent, phaseinfo, &phasepresent_ct)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_alleles_list() error " + str(reterr))
 *                 main_data_ptr = <int32_t*>(&(allele_int32_out[variant_list_idx, 0]))
 */
      __pyx_t_12 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_12) {

        /* "pgenlib.pyx":1001
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, genovec, phasepresent, phaseinfo, &phasepresent_ct)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_alleles_list() error " + str(reterr))             # <<<<<<<<<<<<<<
 *                 main_data_ptr = <int32_t*>(&(allele_int32_out[variant_list_idx, 0]))
 *                 genoarr_phased_to_allele_codes(genovec, phasepresent, phaseinfo, subset_size, phasepresent_ct, NULL, main_data_ptr)
 */
        __pyx_t_1 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Add(__pyx_kp_s_read_alleles_list_error, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":1000
 *                 # upgrade to multiallelic version of this function later
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, genovec, phasepresent, phaseinfo, &phasepresent_ct)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_alleles_list() error " + str(reterr))
 *                 main_data_ptr = <int32_t*>(&(allele_int32_out[variant_list_idx, 0]))
 */
      }

      /* "pgenlib.pyx":1002
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_alleles_list() error " + str(reterr))
 *                 main_data_ptr = <int32_t*>(&(allele_int32_out[variant_list_idx, 0]))             # <<<<<<<<<<<<<<
 *                 genoarr_phased_to_allele_codes(genovec, phasepresent, phaseinfo, subset_size, phasepresent_ct, NULL, main_data_ptr)
 *             return
 */
      __pyx_t_16 = __pyx_v_variant_list_idx;
      __pyx_t_17 = 0;
      __pyx_t_15 = -1;
      if (unlikely(__pyx_t_16 >= (size_t)__pyx_pybuffernd_allele_int32_out.diminfo[0].shape)) __pyx_t_15 = 0;
      if (__pyx_t_17 < 0) {
        __pyx_t_17 += __pyx_pybuffernd_allele_int32_out.diminfo[1].shape;
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_15 = 1;
      } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_allele_int32_out.diminfo[1].shape)) __pyx_t_15 = 1;
      if (unlikely(__pyx_t_15 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_15);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_main_data_ptr = ((int32_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_allele_int32_out.diminfo[0].strides, __pyx_t_17, __pyx_pybuffernd_allele_int32_out.diminfo[1].strides))));

      /* "pgenlib.pyx":1003
 *                     raise RuntimeError("read_alleles_list() error " + str(reterr))
 *                 main_data_ptr = <int32_t*>(&(allele_int32_out[variant_list_idx, 0]))
 *                 genoarr_phased_to_allele_codes(genovec, phasepresent, phaseinfo, subset_size, phasepresent_ct, NULL, main_data_ptr)             # <<<<<<<<<<<<<<
 *             return
 *         if allele_int32_out.shape[0] < 2 * subset_size:
 */
      plink2::genoarr_phased_to_allele_codes(__pyx_v_genovec, __pyx_v_phasepresent, __pyx_v_phaseinfo, __pyx_v_subset_size, __pyx_v_phasepresent_ct, NULL, __pyx_v_main_data_ptr);
    }

    /* "pgenlib.pyx":1004
 *                 main_data_ptr = <int32_t*>(&(allele_int32_out[variant_list_idx, 0]))
 *                 genoarr_phased_to_allele_codes(genovec, phasepresent, phaseinfo, subset_size, phasepresent_ct, NULL, main_data_ptr)
 *             return             # <<<<<<<<<<<<<<
 *         if allele_int32_out.shape[0] < 2 * subset_size:
 *             raise RuntimeError("Haplotype-major read_alleles_list() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ", and row count should be twice that)")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "pgenlib.pyx":989
 *         cdef uint32_t phasepresent_ct
 *         cdef pglerr_t reterr
 *         if hap_maj == 0:             # <<<<<<<<<<<<<<
 *             if allele_int32_out.shape[0] < variant_idx_ct:
 *                 raise RuntimeError("Variant-major read_alleles_list() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 */
  }

  /* "pgenlib.pyx":1005
 *                 genoarr_phased_to_allele_codes(genovec, phasepresent, phaseinfo, subset_size, phasepresent_ct, NULL, main_data_ptr)
 *             return
 *         if allele_int32_out.shape[0] < 2 * subset_size:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Haplotype-major read_alleles_list() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ", and row count should be twice that)")
 *         if allele_int32_out.shape[1] < variant_idx_ct:
 */
  __pyx_t_12 = (((__pyx_v_allele_int32_out->dimensions[0]) < (2 * __pyx_v_subset_size)) != 0);
  if (__pyx_t_12) {

    /* "pgenlib.pyx":1006
 *             return
 *         if allele_int32_out.shape[0] < 2 * subset_size:
 *             raise RuntimeError("Haplotype-major read_alleles_list() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ", and row count should be twice that)")             # <<<<<<<<<<<<<<
 *         if allele_int32_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Haplotype-major read_alleles_list() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 */
    __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_allele_int32_out->dimensions[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_kp_s_Haplotype_major_read_alleles_lis, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_current_sample_subset_has_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_subset_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_and_row_count_should_be_twice_t); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":1005
 *                 genoarr_phased_to_allele_codes(genovec, phasepresent, phaseinfo, subset_size, phasepresent_ct, NULL, main_data_ptr)
 *             return
 *         if allele_int32_out.shape[0] < 2 * subset_size:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Haplotype-major read_alleles_list() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ", and row count should be twice that)")
 *         if allele_int32_out.shape[1] < variant_idx_ct:
 */
  }

  /* "pgenlib.pyx":1007
 *         if allele_int32_out.shape[0] < 2 * subset_size:
 *             raise RuntimeError("Haplotype-major read_alleles_list() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ", and row count should be twice that)")
 *         if allele_int32_out.shape[1] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Haplotype-major read_alleles_list() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 */
  __pyx_t_12 = (((__pyx_v_allele_int32_out->dimensions[1]) < __pyx_v_variant_idx_ct) != 0);
  if (__pyx_t_12) {

    /* "pgenlib.pyx":1008
 *             raise RuntimeError("Haplotype-major read_alleles_list() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ", and row count should be twice that)")
 *         if allele_int32_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Haplotype-major read_alleles_list() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 */
    __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_allele_int32_out->dimensions[1])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Haplotype_major_read_alleles_lis_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_variant_idxs_length_is); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_ct); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":1007
 *         if allele_int32_out.shape[0] < 2 * subset_size:
 *             raise RuntimeError("Haplotype-major read_alleles_list() allele_int32_out buffer has too few rows (" + str(allele_int32_out.shape[0]) + "; current sample subset has size " + str(subset_size) + ", and row count should be twice that)")
 *         if allele_int32_out.shape[1] < variant_idx_ct:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Haplotype-major read_alleles_list() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 */
  }

  /* "pgenlib.pyx":1009
 *         if allele_int32_out.shape[1] < variant_idx_ct:
 *             raise RuntimeError("Haplotype-major read_alleles_list() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 */
  __pyx_v_variant_batch_ct = DIV_UP(__pyx_v_variant_idx_ct, plink2::kPglQuaterTransposeBatch);

  /* "pgenlib.pyx":1010
 *             raise RuntimeError("Haplotype-major read_alleles_list() allele_int32_out buffer has too few columns (" + str(allele_int32_out.shape[1]) + "; variant_idxs length is " + str(variant_idx_ct) + ")")
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *         cdef uint32_t variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 */
  __pyx_v_variant_batch_size = plink2::kPglQuaterTransposeBatch;

  /* "pgenlib.pyx":1011
 *         cdef uint32_t variant_batch_ct = DIV_UP(variant_idx_ct, kPglQuaterTransposeBatch)
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_ctaw = kWordsPerVec * DIV_UP(subset_size, kBitsPerWord)
 */
  __pyx_v_variant_batch_sizel = DIV_UP(__pyx_v_variant_batch_size, plink2::kBitsPerWord);

  /* "pgenlib.pyx":1012
 *         cdef uint32_t variant_batch_size = kPglQuaterTransposeBatch
 *         cdef uint32_t variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_ctaw = kWordsPerVec * DIV_UP(subset_size, kBitsPerWord)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 */
  __pyx_v_sample_ctaw2 = (plink2::kWordsPerVec * DIV_UP(__pyx_v_subset_size, plink2::kBitsPerWordD2));

  /* "pgenlib.pyx":1013
 *         cdef uint32_t variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_ctaw = kWordsPerVec * DIV_UP(subset_size, kBitsPerWord)             # <<<<<<<<<<<<<<
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 */
  __pyx_v_sample_ctaw = (plink2::kWordsPerVec * DIV_UP(__pyx_v_subset_size, plink2::kBitsPerWord));

  /* "pgenlib.pyx":1014
 *         cdef uint32_t sample_ctaw2 = kWordsPerVec * DIV_UP(subset_size, kBitsPerWordD2)
 *         cdef uint32_t sample_ctaw = kWordsPerVec * DIV_UP(subset_size, kBitsPerWord)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 */
  __pyx_v_sample_batch_ct = DIV_UP(__pyx_v_subset_size, plink2::kPglQuaterTransposeBatch);

  /* "pgenlib.pyx":1015
 *         cdef uint32_t sample_ctaw = kWordsPerVec * DIV_UP(subset_size, kBitsPerWord)
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_vmaj_phaseinfo_buf = self._multivar_vmaj_phaseinfo_buf
 */
  __pyx_t_18 = __pyx_v_self->_transpose_batch_buf;
  __pyx_v_transpose_batch_buf = __pyx_t_18;

  /* "pgenlib.pyx":1016
 *         cdef uint32_t sample_batch_ct = DIV_UP(subset_size, kPglQuaterTransposeBatch)
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_vmaj_phaseinfo_buf = self._multivar_vmaj_phaseinfo_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 */
  __pyx_t_9 = __pyx_v_self->_multivar_vmaj_geno_buf;
  __pyx_v_multivar_vmaj_geno_buf = __pyx_t_9;

  /* "pgenlib.pyx":1017
 *         cdef vul_t* transpose_batch_buf = self._transpose_batch_buf
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_vmaj_phaseinfo_buf = self._multivar_vmaj_phaseinfo_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 *         cdef uintptr_t* multivar_smaj_phaseinfo_batch_buf = self._multivar_smaj_phaseinfo_batch_buf
 */
  __pyx_t_9 = __pyx_v_self->_multivar_vmaj_phaseinfo_buf;
  __pyx_v_multivar_vmaj_phaseinfo_buf = __pyx_t_9;

  /* "pgenlib.pyx":1018
 *         cdef uintptr_t* multivar_vmaj_geno_buf = self._multivar_vmaj_geno_buf
 *         cdef uintptr_t* multivar_vmaj_phaseinfo_buf = self._multivar_vmaj_phaseinfo_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* multivar_smaj_phaseinfo_batch_buf = self._multivar_smaj_phaseinfo_batch_buf
 *         cdef uintptr_t* vmaj_geno_iter
 */
  __pyx_t_9 = __pyx_v_self->_multivar_smaj_geno_batch_buf;
  __pyx_v_multivar_smaj_geno_batch_buf = __pyx_t_9;

  /* "pgenlib.pyx":1019
 *         cdef uintptr_t* multivar_vmaj_phaseinfo_buf = self._multivar_vmaj_phaseinfo_buf
 *         cdef uintptr_t* multivar_smaj_geno_batch_buf = self._multivar_smaj_geno_batch_buf
 *         cdef uintptr_t* multivar_smaj_phaseinfo_batch_buf = self._multivar_smaj_phaseinfo_batch_buf             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* vmaj_geno_iter
 *         cdef uintptr_t* vmaj_phaseinfo_iter
 */
  __pyx_t_9 = __pyx_v_self->_multivar_smaj_phaseinfo_batch_buf;
  __pyx_v_multivar_smaj_phaseinfo_batch_buf = __pyx_t_9;

  /* "pgenlib.pyx":1029
 *         cdef uint32_t sample_batch_idx
 *         cdef uint32_t uii
 *         for variant_batch_idx in range(variant_batch_ct):             # <<<<<<<<<<<<<<
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 */
  __pyx_t_8 = __pyx_v_variant_batch_ct;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_8; __pyx_t_13+=1) {
    __pyx_v_variant_batch_idx = __pyx_t_13;

    /* "pgenlib.pyx":1030
 *         cdef uint32_t uii
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):             # <<<<<<<<<<<<<<
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *                 variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 */
    __pyx_t_12 = ((__pyx_v_variant_batch_idx == (__pyx_v_variant_batch_ct - 1)) != 0);
    if (__pyx_t_12) {

      /* "pgenlib.pyx":1031
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *                 variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 *             vmaj_geno_iter = multivar_vmaj_geno_buf
 */
      __pyx_t_19 = (__pyx_v_variant_idx_ct - 1);
      if (unlikely(plink2::kPglQuaterTransposeBatch == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1031; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_variant_batch_size = (1 + ((uint32_t)__Pyx_mod_long(__pyx_t_19, plink2::kPglQuaterTransposeBatch)));

      /* "pgenlib.pyx":1032
 *             if variant_batch_idx == (variant_batch_ct - 1):
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *                 variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)             # <<<<<<<<<<<<<<
 *             vmaj_geno_iter = multivar_vmaj_geno_buf
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 */
      __pyx_v_variant_batch_sizel = DIV_UP(__pyx_v_variant_batch_size, plink2::kBitsPerWord);

      /* "pgenlib.pyx":1030
 *         cdef uint32_t uii
 *         for variant_batch_idx in range(variant_batch_ct):
 *             if variant_batch_idx == (variant_batch_ct - 1):             # <<<<<<<<<<<<<<
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *                 variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 */
    }

    /* "pgenlib.pyx":1033
 *                 variant_batch_size = 1 + <uint32_t>((variant_idx_ct - 1) % kPglQuaterTransposeBatch)
 *                 variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 *             vmaj_geno_iter = multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 *             for variant_list_idx in range(variant_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch + variant_batch_size):
 */
    __pyx_v_vmaj_geno_iter = __pyx_v_multivar_vmaj_geno_buf;

    /* "pgenlib.pyx":1034
 *                 variant_batch_sizel = DIV_UP(variant_batch_size, kBitsPerWord)
 *             vmaj_geno_iter = multivar_vmaj_geno_buf
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf             # <<<<<<<<<<<<<<
 *             for variant_list_idx in range(variant_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch + variant_batch_size):
 *                 variant_idx = variant_idxs[variant_list_idx]
 */
    __pyx_v_vmaj_phaseinfo_iter = __pyx_v_multivar_vmaj_phaseinfo_buf;

    /* "pgenlib.pyx":1035
 *             vmaj_geno_iter = multivar_vmaj_geno_buf
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 *             for variant_list_idx in range(variant_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch + variant_batch_size):             # <<<<<<<<<<<<<<
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:
 */
    __pyx_t_20 = ((__pyx_v_variant_batch_idx * plink2::kPglQuaterTransposeBatch) + __pyx_v_variant_batch_size);
    for (__pyx_t_21 = (__pyx_v_variant_batch_idx * plink2::kPglQuaterTransposeBatch); __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
      __pyx_v_variant_list_idx = __pyx_t_21;

      /* "pgenlib.pyx":1036
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 *             for variant_list_idx in range(variant_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch + variant_batch_size):
 *                 variant_idx = variant_idxs[variant_list_idx]             # <<<<<<<<<<<<<<
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_alleles_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 */
      __pyx_t_22 = __pyx_v_variant_list_idx;
      __pyx_t_15 = -1;
      if (unlikely(__pyx_t_22 >= (size_t)__pyx_pybuffernd_variant_idxs.diminfo[0].shape)) __pyx_t_15 = 0;
      if (unlikely(__pyx_t_15 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_15);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_variant_idx = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_variant_idxs.diminfo[0].strides));

      /* "pgenlib.pyx":1037
 *             for variant_list_idx in range(variant_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch + variant_batch_size):
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_alleles_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, vmaj_geno_iter, phasepresent, vmaj_phaseinfo_iter, &phasepresent_ct)
 */
      __pyx_t_12 = ((__pyx_v_variant_idx >= __pyx_v_raw_variant_ct) != 0);
      if (__pyx_t_12) {

        /* "pgenlib.pyx":1038
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_alleles_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")             # <<<<<<<<<<<<<<
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, vmaj_geno_iter, phasepresent, vmaj_phaseinfo_iter, &phasepresent_ct)
 *                 if reterr != kPglRetSuccess:
 */
        __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Add(__pyx_kp_s_read_alleles_list_variant_index, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_only); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_raw_variant_ct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_in_file_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":1037
 *             for variant_list_idx in range(variant_batch_idx * kPglQuaterTransposeBatch, variant_batch_idx * kPglQuaterTransposeBatch + variant_batch_size):
 *                 variant_idx = variant_idxs[variant_list_idx]
 *                 if variant_idx >= raw_variant_ct:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_alleles_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, vmaj_geno_iter, phasepresent, vmaj_phaseinfo_iter, &phasepresent_ct)
 */
      }

      /* "pgenlib.pyx":1039
 *                 if variant_idx >= raw_variant_ct:
 *                     raise RuntimeError("read_alleles_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, vmaj_geno_iter, phasepresent, vmaj_phaseinfo_iter, &phasepresent_ct)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_alleles_list() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::pgr_read_refalt1_genovec_hphase_subset_unsafe(__pyx_v_subset_include_vec, __pyx_v_subset_cumulative_popcounts, __pyx_v_subset_size, __pyx_v_variant_idx, __pyx_v_pgrp, __pyx_v_vmaj_geno_iter, __pyx_v_phasepresent, __pyx_v_vmaj_phaseinfo_iter, (&__pyx_v_phasepresent_ct));

      /* "pgenlib.pyx":1040
 *                     raise RuntimeError("read_alleles_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, vmaj_geno_iter, phasepresent, vmaj_phaseinfo_iter, &phasepresent_ct)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_alleles_list() error " + str(reterr))
 *                 if phasepresent_ct == 0:
 */
      __pyx_t_12 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_12) {

        /* "pgenlib.pyx":1041
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, vmaj_geno_iter, phasepresent, vmaj_phaseinfo_iter, &phasepresent_ct)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_alleles_list() error " + str(reterr))             # <<<<<<<<<<<<<<
 *                 if phasepresent_ct == 0:
 *                     fill_ulong_zero(sample_ctaw, vmaj_phaseinfo_iter)
 */
        __pyx_t_2 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Add(__pyx_kp_s_read_alleles_list_error, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":1040
 *                     raise RuntimeError("read_alleles_list() variant index too large (" + str(variant_idx) + "; only " + str(raw_variant_ct) + " in file)")
 *                 reterr = pgr_read_refalt1_genovec_hphase_subset_unsafe(subset_include_vec, subset_cumulative_popcounts, subset_size, variant_idx, pgrp, vmaj_geno_iter, phasepresent, vmaj_phaseinfo_iter, &phasepresent_ct)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("read_alleles_list() error " + str(reterr))
 *                 if phasepresent_ct == 0:
 */
      }

      /* "pgenlib.pyx":1042
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_alleles_list() error " + str(reterr))
 *                 if phasepresent_ct == 0:             # <<<<<<<<<<<<<<
 *                     fill_ulong_zero(sample_ctaw, vmaj_phaseinfo_iter)
 *                 # else:
 */
      __pyx_t_12 = ((__pyx_v_phasepresent_ct == 0) != 0);
      if (__pyx_t_12) {

        /* "pgenlib.pyx":1043
 *                     raise RuntimeError("read_alleles_list() error " + str(reterr))
 *                 if phasepresent_ct == 0:
 *                     fill_ulong_zero(sample_ctaw, vmaj_phaseinfo_iter)             # <<<<<<<<<<<<<<
 *                 # else:
 *                     # bitvec_and(phasepresent, sample_ctaw, vmaj_phaseinfo_iter)
 */
        plink2::fill_ulong_zero(__pyx_v_sample_ctaw, __pyx_v_vmaj_phaseinfo_iter);

        /* "pgenlib.pyx":1042
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("read_alleles_list() error " + str(reterr))
 *                 if phasepresent_ct == 0:             # <<<<<<<<<<<<<<
 *                     fill_ulong_zero(sample_ctaw, vmaj_phaseinfo_iter)
 *                 # else:
 */
      }

      /* "pgenlib.pyx":1046
 *                 # else:
 *                     # bitvec_and(phasepresent, sample_ctaw, vmaj_phaseinfo_iter)
 *                 vmaj_geno_iter = &(vmaj_geno_iter[sample_ctaw2])             # <<<<<<<<<<<<<<
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[sample_ctaw])
 *             sample_batch_size = kPglQuaterTransposeBatch
 */
      __pyx_v_vmaj_geno_iter = (&(__pyx_v_vmaj_geno_iter[__pyx_v_sample_ctaw2]));

      /* "pgenlib.pyx":1047
 *                     # bitvec_and(phasepresent, sample_ctaw, vmaj_phaseinfo_iter)
 *                 vmaj_geno_iter = &(vmaj_geno_iter[sample_ctaw2])
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[sample_ctaw])             # <<<<<<<<<<<<<<
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_geno_iter = multivar_vmaj_geno_buf
 */
      __pyx_v_vmaj_phaseinfo_iter = (&(__pyx_v_vmaj_phaseinfo_iter[__pyx_v_sample_ctaw]));
    }

    /* "pgenlib.pyx":1048
 *                 vmaj_geno_iter = &(vmaj_geno_iter[sample_ctaw2])
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[sample_ctaw])
 *             sample_batch_size = kPglQuaterTransposeBatch             # <<<<<<<<<<<<<<
 *             vmaj_geno_iter = multivar_vmaj_geno_buf
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 */
    __pyx_v_sample_batch_size = plink2::kPglQuaterTransposeBatch;

    /* "pgenlib.pyx":1049
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[sample_ctaw])
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_geno_iter = multivar_vmaj_geno_buf             # <<<<<<<<<<<<<<
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 */
    __pyx_v_vmaj_geno_iter = __pyx_v_multivar_vmaj_geno_buf;

    /* "pgenlib.pyx":1050
 *             sample_batch_size = kPglQuaterTransposeBatch
 *             vmaj_geno_iter = multivar_vmaj_geno_buf
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf             # <<<<<<<<<<<<<<
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:
 */
    __pyx_v_vmaj_phaseinfo_iter = __pyx_v_multivar_vmaj_phaseinfo_buf;

    /* "pgenlib.pyx":1051
 *             vmaj_geno_iter = multivar_vmaj_geno_buf
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 *             for sample_batch_idx in range(sample_batch_ct):             # <<<<<<<<<<<<<<
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 */
    __pyx_t_20 = __pyx_v_sample_batch_ct;
    for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
      __pyx_v_sample_batch_idx = __pyx_t_21;

      /* "pgenlib.pyx":1052
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:             # <<<<<<<<<<<<<<
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_geno_iter = multivar_smaj_geno_batch_buf
 */
      __pyx_t_12 = ((__pyx_v_sample_batch_idx == (__pyx_v_sample_batch_ct - 1)) != 0);
      if (__pyx_t_12) {

        /* "pgenlib.pyx":1053
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)             # <<<<<<<<<<<<<<
 *                 smaj_geno_iter = multivar_smaj_geno_batch_buf
 *                 smaj_phaseinfo_iter = multivar_smaj_phaseinfo_batch_buf
 */
        __pyx_t_19 = (__pyx_v_subset_size - 1);
        if (unlikely(plink2::kPglQuaterTransposeBatch == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_sample_batch_size = (1 + ((uint32_t)__Pyx_mod_long(__pyx_t_19, plink2::kPglQuaterTransposeBatch)));

        /* "pgenlib.pyx":1052
 *             vmaj_phaseinfo_iter = multivar_vmaj_phaseinfo_buf
 *             for sample_batch_idx in range(sample_batch_ct):
 *                 if sample_batch_idx == sample_batch_ct - 1:             # <<<<<<<<<<<<<<
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_geno_iter = multivar_smaj_geno_batch_buf
 */
      }

      /* "pgenlib.pyx":1054
 *                 if sample_batch_idx == sample_batch_ct - 1:
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_geno_iter = multivar_smaj_geno_batch_buf             # <<<<<<<<<<<<<<
 *                 smaj_phaseinfo_iter = multivar_smaj_phaseinfo_batch_buf
 *                 transpose_quaterblock(vmaj_geno_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_geno_iter, transpose_batch_buf)
 */
      __pyx_v_smaj_geno_iter = __pyx_v_multivar_smaj_geno_batch_buf;

      /* "pgenlib.pyx":1055
 *                     sample_batch_size = 1 + <uint32_t>((subset_size - 1) % kPglQuaterTransposeBatch)
 *                 smaj_geno_iter = multivar_smaj_geno_batch_buf
 *                 smaj_phaseinfo_iter = multivar_smaj_phaseinfo_batch_buf             # <<<<<<<<<<<<<<
 *                 transpose_quaterblock(vmaj_geno_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_geno_iter, transpose_batch_buf)
 *                 # todo: skip bitblock transpose when all phasepresent_ct values
 */
      __pyx_v_smaj_phaseinfo_iter = __pyx_v_multivar_smaj_phaseinfo_batch_buf;

      /* "pgenlib.pyx":1056
 *                 smaj_geno_iter = multivar_smaj_geno_batch_buf
 *                 smaj_phaseinfo_iter = multivar_smaj_phaseinfo_batch_buf
 *                 transpose_quaterblock(vmaj_geno_iter, sample_ctaw2, kPglQuaterTransposeWords, variant_batch_size, sample_batch_size, smaj_geno_iter, transpose_batch_buf)             # <<<<<<<<<<<<<<
 *                 # todo: skip bitblock transpose when all phasepresent_ct values
 *                 #       are zero, etc.
 */
      plink2::transpose_quaterblock(__pyx_v_vmaj_geno_iter, __pyx_v_sample_ctaw2, plink2::kPglQuaterTransposeWords, __pyx_v_variant_batch_size, __pyx_v_sample_batch_size, __pyx_v_smaj_geno_iter, __pyx_v_transpose_batch_buf);

      /* "pgenlib.pyx":1059
 *                 # todo: skip bitblock transpose when all phasepresent_ct values
 *                 #       are zero, etc.
 *                 transpose_bitblock(vmaj_phaseinfo_iter, sample_ctaw, <uint32_t>(kPglQuaterTransposeWords / 2), variant_batch_size, sample_batch_size, smaj_phaseinfo_iter, transpose_batch_buf)             # <<<<<<<<<<<<<<
 *                 for uii in range(sample_batch_size):
 *                     main_data_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords), variant_batch_idx * kPglQuaterTransposeBatch]))
 */
      plink2::transpose_bitblock(__pyx_v_vmaj_phaseinfo_iter, __pyx_v_sample_ctaw, ((uint32_t)__Pyx_div_long(plink2::kPglQuaterTransposeWords, 2)), __pyx_v_variant_batch_size, __pyx_v_sample_batch_size, __pyx_v_smaj_phaseinfo_iter, __pyx_v_transpose_batch_buf);

      /* "pgenlib.pyx":1060
 *                 #       are zero, etc.
 *                 transpose_bitblock(vmaj_phaseinfo_iter, sample_ctaw, <uint32_t>(kPglQuaterTransposeWords / 2), variant_batch_size, sample_batch_size, smaj_phaseinfo_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):             # <<<<<<<<<<<<<<
 *                     main_data_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords), variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     main_data1_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords) + 1, variant_batch_idx * kPglQuaterTransposeBatch]))
 */
      __pyx_t_23 = __pyx_v_sample_batch_size;
      for (__pyx_t_24 = 0; __pyx_t_24 < __pyx_t_23; __pyx_t_24+=1) {
        __pyx_v_uii = __pyx_t_24;

        /* "pgenlib.pyx":1061
 *                 transpose_bitblock(vmaj_phaseinfo_iter, sample_ctaw, <uint32_t>(kPglQuaterTransposeWords / 2), variant_batch_size, sample_batch_size, smaj_phaseinfo_iter, transpose_batch_buf)
 *                 for uii in range(sample_batch_size):
 *                     main_data_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords), variant_batch_idx * kPglQuaterTransposeBatch]))             # <<<<<<<<<<<<<<
 *                     main_data1_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords) + 1, variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     genoarr_phased_to_hap_codes(smaj_geno_iter, smaj_phaseinfo_iter, variant_batch_size, main_data_ptr, main_data1_ptr)
 */
        __pyx_t_25 = (2 * (__pyx_v_uii + (__pyx_v_sample_batch_idx * plink2::kPglQuaterTransposeWords)));
        __pyx_t_26 = (__pyx_v_variant_batch_idx * plink2::kPglQuaterTransposeBatch);
        __pyx_t_15 = -1;
        if (__pyx_t_25 < 0) {
          __pyx_t_25 += __pyx_pybuffernd_allele_int32_out.diminfo[0].shape;
          if (unlikely(__pyx_t_25 < 0)) __pyx_t_15 = 0;
        } else if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_allele_int32_out.diminfo[0].shape)) __pyx_t_15 = 0;
        if (unlikely(__pyx_t_26 >= (size_t)__pyx_pybuffernd_allele_int32_out.diminfo[1].shape)) __pyx_t_15 = 1;
        if (unlikely(__pyx_t_15 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_15);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_main_data_ptr = ((int32_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_allele_int32_out.diminfo[0].strides, __pyx_t_26, __pyx_pybuffernd_allele_int32_out.diminfo[1].strides))));

        /* "pgenlib.pyx":1062
 *                 for uii in range(sample_batch_size):
 *                     main_data_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords), variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     main_data1_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords) + 1, variant_batch_idx * kPglQuaterTransposeBatch]))             # <<<<<<<<<<<<<<
 *                     genoarr_phased_to_hap_codes(smaj_geno_iter, smaj_phaseinfo_iter, variant_batch_size, main_data_ptr, main_data1_ptr)
 *                     smaj_geno_iter = &(smaj_geno_iter[kPglQuaterTransposeWords])
 */
        __pyx_t_27 = ((2 * (__pyx_v_uii + (__pyx_v_sample_batch_idx * plink2::kPglQuaterTransposeWords))) + 1);
        __pyx_t_28 = (__pyx_v_variant_batch_idx * plink2::kPglQuaterTransposeBatch);
        __pyx_t_15 = -1;
        if (__pyx_t_27 < 0) {
          __pyx_t_27 += __pyx_pybuffernd_allele_int32_out.diminfo[0].shape;
          if (unlikely(__pyx_t_27 < 0)) __pyx_t_15 = 0;
        } else if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_allele_int32_out.diminfo[0].shape)) __pyx_t_15 = 0;
        if (unlikely(__pyx_t_28 >= (size_t)__pyx_pybuffernd_allele_int32_out.diminfo[1].shape)) __pyx_t_15 = 1;
        if (unlikely(__pyx_t_15 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_15);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1062; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_main_data1_ptr = ((int32_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_allele_int32_out.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_allele_int32_out.diminfo[1].strides))));

        /* "pgenlib.pyx":1063
 *                     main_data_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords), variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     main_data1_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords) + 1, variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     genoarr_phased_to_hap_codes(smaj_geno_iter, smaj_phaseinfo_iter, variant_batch_size, main_data_ptr, main_data1_ptr)             # <<<<<<<<<<<<<<
 *                     smaj_geno_iter = &(smaj_geno_iter[kPglQuaterTransposeWords])
 *                     smaj_phaseinfo_iter = &(smaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])
 */
        plink2::genoarr_phased_to_hap_codes(__pyx_v_smaj_geno_iter, __pyx_v_smaj_phaseinfo_iter, __pyx_v_variant_batch_size, __pyx_v_main_data_ptr, __pyx_v_main_data1_ptr);

        /* "pgenlib.pyx":1064
 *                     main_data1_ptr = <int32_t*>(&(allele_int32_out[2 * (uii + sample_batch_idx * kPglQuaterTransposeWords) + 1, variant_batch_idx * kPglQuaterTransposeBatch]))
 *                     genoarr_phased_to_hap_codes(smaj_geno_iter, smaj_phaseinfo_iter, variant_batch_size, main_data_ptr, main_data1_ptr)
 *                     smaj_geno_iter = &(smaj_geno_iter[kPglQuaterTransposeWords])             # <<<<<<<<<<<<<<
 *                     smaj_phaseinfo_iter = &(smaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])
 *                 vmaj_geno_iter = &(vmaj_geno_iter[kPglQuaterTransposeWords])
 */
        __pyx_v_smaj_geno_iter = (&(__pyx_v_smaj_geno_iter[plink2::kPglQuaterTransposeWords]));

        /* "pgenlib.pyx":1065
 *                     genoarr_phased_to_hap_codes(smaj_geno_iter, smaj_phaseinfo_iter, variant_batch_size, main_data_ptr, main_data1_ptr)
 *                     smaj_geno_iter = &(smaj_geno_iter[kPglQuaterTransposeWords])
 *                     smaj_phaseinfo_iter = &(smaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])             # <<<<<<<<<<<<<<
 *                 vmaj_geno_iter = &(vmaj_geno_iter[kPglQuaterTransposeWords])
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])
 */
        __pyx_v_smaj_phaseinfo_iter = (&(__pyx_v_smaj_phaseinfo_iter[__Pyx_div_long(plink2::kPglQuaterTransposeWords, 2)]));
      }

      /* "pgenlib.pyx":1066
 *                     smaj_geno_iter = &(smaj_geno_iter[kPglQuaterTransposeWords])
 *                     smaj_phaseinfo_iter = &(smaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])
 *                 vmaj_geno_iter = &(vmaj_geno_iter[kPglQuaterTransposeWords])             # <<<<<<<<<<<<<<
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])
 *         return
 */
      __pyx_v_vmaj_geno_iter = (&(__pyx_v_vmaj_geno_iter[plink2::kPglQuaterTransposeWords]));

      /* "pgenlib.pyx":1067
 *                     smaj_phaseinfo_iter = &(smaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])
 *                 vmaj_geno_iter = &(vmaj_geno_iter[kPglQuaterTransposeWords])
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])             # <<<<<<<<<<<<<<
 *         return
 * 
 */
      __pyx_v_vmaj_phaseinfo_iter = (&(__pyx_v_vmaj_phaseinfo_iter[__Pyx_div_long(plink2::kPglQuaterTransposeWords, 2)]));
    }
  }

  /* "pgenlib.pyx":1068
 *                 vmaj_geno_iter = &(vmaj_geno_iter[kPglQuaterTransposeWords])
 *                 vmaj_phaseinfo_iter = &(vmaj_phaseinfo_iter[kPglQuaterTransposeWords / 2])
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":970
 * 
 * 
 *     cpdef read_alleles_list(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_out, bint hap_maj = 0):             # <<<<<<<<<<<<<<
 *         # if hap_maj == False, allele_int32_out must have at least
 *         #   variant_idx_ct rows, 2 * sample_ct columns
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_25read_alleles_list(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_25read_alleles_list(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_variant_idxs = 0;
  PyArrayObject *__pyx_v_allele_int32_out = 0;
  int __pyx_v_hap_maj;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_alleles_list (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variant_idxs,&__pyx_n_s_allele_int32_out,&__pyx_n_s_hap_maj,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variant_idxs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allele_int32_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_alleles_list", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hap_maj);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_alleles_list") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_variant_idxs = ((PyArrayObject *)values[0]);
    __pyx_v_allele_int32_out = ((PyArrayObject *)values[1]);
    if (values[2]) {
      __pyx_v_hap_maj = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_hap_maj == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_hap_maj = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_alleles_list", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_variant_idxs), __pyx_ptype_5numpy_ndarray, 1, "variant_idxs", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_allele_int32_out), __pyx_ptype_5numpy_ndarray, 1, "allele_int32_out", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_24read_alleles_list(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self), __pyx_v_variant_idxs, __pyx_v_allele_int32_out, __pyx_v_hap_maj);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_24read_alleles_list(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_variant_idxs, PyArrayObject *__pyx_v_allele_int32_out, int __pyx_v_hap_maj) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32_out;
  __Pyx_Buffer __pyx_pybuffer_allele_int32_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_variant_idxs;
  __Pyx_Buffer __pyx_pybuffer_variant_idxs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_list __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_alleles_list", 0);
  __pyx_pybuffer_variant_idxs.pybuffer.buf = NULL;
  __pyx_pybuffer_variant_idxs.refcount = 0;
  __pyx_pybuffernd_variant_idxs.data = NULL;
  __pyx_pybuffernd_variant_idxs.rcbuffer = &__pyx_pybuffer_variant_idxs;
  __pyx_pybuffer_allele_int32_out.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32_out.refcount = 0;
  __pyx_pybuffernd_allele_int32_out.data = NULL;
  __pyx_pybuffernd_allele_int32_out.rcbuffer = &__pyx_pybuffer_allele_int32_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer, (PyObject*)__pyx_v_variant_idxs, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_variant_idxs.diminfo[0].strides = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_variant_idxs.diminfo[0].shape = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32_out.diminfo[0].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32_out.diminfo[0].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_allele_int32_out.diminfo[1].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_allele_int32_out.diminfo[1].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[1];
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.hap_maj = __pyx_v_hap_maj;
  __pyx_t_1 = __pyx_vtabptr_7pgenlib_PgenReader->read_alleles_list(__pyx_v_self, __pyx_v_variant_idxs, __pyx_v_allele_int32_out, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1071
 * 
 * 
 *     cpdef read_alleles_and_phasepresent_range(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_out, np.ndarray[np.uint8_t,mode="c",cast=True,ndim=2] phasepresent_out, bint hap_maj = 0):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_27read_alleles_and_phasepresent_range(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_alleles_and_phasepresent_range(CYTHON_UNUSED struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, CYTHON_UNUSED uint32_t __pyx_v_variant_idx_start, CYTHON_UNUSED uint32_t __pyx_v_variant_idx_end, CYTHON_UNUSED PyArrayObject *__pyx_v_allele_int32_out, CYTHON_UNUSED PyArrayObject *__pyx_v_phasepresent_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_and_phasepresent_range *__pyx_optional_args) {
  int __pyx_v_hap_maj = ((int)0);
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32_out;
  __Pyx_Buffer __pyx_pybuffer_allele_int32_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_phasepresent_out;
  __Pyx_Buffer __pyx_pybuffer_phasepresent_out;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_alleles_and_phasepresent_range", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_hap_maj = __pyx_optional_args->hap_maj;
    }
  }
  __pyx_pybuffer_allele_int32_out.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32_out.refcount = 0;
  __pyx_pybuffernd_allele_int32_out.data = NULL;
  __pyx_pybuffernd_allele_int32_out.rcbuffer = &__pyx_pybuffer_allele_int32_out;
  __pyx_pybuffer_phasepresent_out.pybuffer.buf = NULL;
  __pyx_pybuffer_phasepresent_out.refcount = 0;
  __pyx_pybuffernd_phasepresent_out.data = NULL;
  __pyx_pybuffernd_phasepresent_out.rcbuffer = &__pyx_pybuffer_phasepresent_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32_out.diminfo[0].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32_out.diminfo[0].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_allele_int32_out.diminfo[1].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_allele_int32_out.diminfo[1].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_phasepresent_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 1, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_phasepresent_out.diminfo[0].strides = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_phasepresent_out.diminfo[0].shape = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_phasepresent_out.diminfo[1].strides = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_phasepresent_out.diminfo[1].shape = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.shape[1];
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_alleles_and_phasepresent_ra); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_27read_alleles_and_phasepresent_range)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx_end); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_hap_maj); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_9 = PyTuple_New(5+__pyx_t_8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
      __Pyx_INCREF(((PyObject *)__pyx_v_allele_int32_out));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_allele_int32_out));
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, ((PyObject *)__pyx_v_allele_int32_out));
      __Pyx_INCREF(((PyObject *)__pyx_v_phasepresent_out));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_phasepresent_out));
      PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, ((PyObject *)__pyx_v_phasepresent_out));
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 4+__pyx_t_8, __pyx_t_5);
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1072
 * 
 *     cpdef read_alleles_and_phasepresent_range(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_out, np.ndarray[np.uint8_t,mode="c",cast=True,ndim=2] phasepresent_out, bint hap_maj = 0):
 *         pass             # <<<<<<<<<<<<<<
 * 
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles_and_phasepresent_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1071
 * 
 * 
 *     cpdef read_alleles_and_phasepresent_range(self, uint32_t variant_idx_start, uint32_t variant_idx_end, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_out, np.ndarray[np.uint8_t,mode="c",cast=True,ndim=2] phasepresent_out, bint hap_maj = 0):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_27read_alleles_and_phasepresent_range(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_27read_alleles_and_phasepresent_range(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint32_t __pyx_v_variant_idx_start;
  uint32_t __pyx_v_variant_idx_end;
  PyArrayObject *__pyx_v_allele_int32_out = 0;
  PyArrayObject *__pyx_v_phasepresent_out = 0;
  int __pyx_v_hap_maj;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_alleles_and_phasepresent_range (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variant_idx_start,&__pyx_n_s_variant_idx_end,&__pyx_n_s_allele_int32_out,&__pyx_n_s_phasepresent_out,&__pyx_n_s_hap_maj,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variant_idx_start)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variant_idx_end)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_alleles_and_phasepresent_range", 0, 4, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allele_int32_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_alleles_and_phasepresent_range", 0, 4, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phasepresent_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_alleles_and_phasepresent_range", 0, 4, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hap_maj);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_alleles_and_phasepresent_range") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_variant_idx_start = __Pyx_PyInt_As_uint32_t(values[0]); if (unlikely((__pyx_v_variant_idx_start == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_variant_idx_end = __Pyx_PyInt_As_uint32_t(values[1]); if (unlikely((__pyx_v_variant_idx_end == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_allele_int32_out = ((PyArrayObject *)values[2]);
    __pyx_v_phasepresent_out = ((PyArrayObject *)values[3]);
    if (values[4]) {
      __pyx_v_hap_maj = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_hap_maj == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_hap_maj = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_alleles_and_phasepresent_range", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles_and_phasepresent_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_allele_int32_out), __pyx_ptype_5numpy_ndarray, 1, "allele_int32_out", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phasepresent_out), __pyx_ptype_5numpy_ndarray, 1, "phasepresent_out", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_26read_alleles_and_phasepresent_range(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self), __pyx_v_variant_idx_start, __pyx_v_variant_idx_end, __pyx_v_allele_int32_out, __pyx_v_phasepresent_out, __pyx_v_hap_maj);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_26read_alleles_and_phasepresent_range(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx_start, uint32_t __pyx_v_variant_idx_end, PyArrayObject *__pyx_v_allele_int32_out, PyArrayObject *__pyx_v_phasepresent_out, int __pyx_v_hap_maj) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32_out;
  __Pyx_Buffer __pyx_pybuffer_allele_int32_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_phasepresent_out;
  __Pyx_Buffer __pyx_pybuffer_phasepresent_out;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_and_phasepresent_range __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_alleles_and_phasepresent_range", 0);
  __pyx_pybuffer_allele_int32_out.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32_out.refcount = 0;
  __pyx_pybuffernd_allele_int32_out.data = NULL;
  __pyx_pybuffernd_allele_int32_out.rcbuffer = &__pyx_pybuffer_allele_int32_out;
  __pyx_pybuffer_phasepresent_out.pybuffer.buf = NULL;
  __pyx_pybuffer_phasepresent_out.refcount = 0;
  __pyx_pybuffernd_phasepresent_out.data = NULL;
  __pyx_pybuffernd_phasepresent_out.rcbuffer = &__pyx_pybuffer_phasepresent_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32_out.diminfo[0].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32_out.diminfo[0].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_allele_int32_out.diminfo[1].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_allele_int32_out.diminfo[1].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_phasepresent_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 1, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_phasepresent_out.diminfo[0].strides = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_phasepresent_out.diminfo[0].shape = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_phasepresent_out.diminfo[1].strides = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_phasepresent_out.diminfo[1].shape = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.shape[1];
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.hap_maj = __pyx_v_hap_maj;
  __pyx_t_1 = __pyx_vtabptr_7pgenlib_PgenReader->read_alleles_and_phasepresent_range(__pyx_v_self, __pyx_v_variant_idx_start, __pyx_v_variant_idx_end, __pyx_v_allele_int32_out, __pyx_v_phasepresent_out, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles_and_phasepresent_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1075
 * 
 * 
 *     cpdef read_alleles_and_phasepresent_list(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_out, np.ndarray[np.uint8_t,cast=True,mode="c",ndim=2] phasepresent_out, bint hap_maj = 0):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_29read_alleles_and_phasepresent_list(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_read_alleles_and_phasepresent_list(CYTHON_UNUSED struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, CYTHON_UNUSED PyArrayObject *__pyx_v_variant_idxs, CYTHON_UNUSED PyArrayObject *__pyx_v_allele_int32_out, CYTHON_UNUSED PyArrayObject *__pyx_v_phasepresent_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_and_phasepresent_list *__pyx_optional_args) {
  int __pyx_v_hap_maj = ((int)0);
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32_out;
  __Pyx_Buffer __pyx_pybuffer_allele_int32_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_phasepresent_out;
  __Pyx_Buffer __pyx_pybuffer_phasepresent_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_variant_idxs;
  __Pyx_Buffer __pyx_pybuffer_variant_idxs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_alleles_and_phasepresent_list", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_hap_maj = __pyx_optional_args->hap_maj;
    }
  }
  __pyx_pybuffer_variant_idxs.pybuffer.buf = NULL;
  __pyx_pybuffer_variant_idxs.refcount = 0;
  __pyx_pybuffernd_variant_idxs.data = NULL;
  __pyx_pybuffernd_variant_idxs.rcbuffer = &__pyx_pybuffer_variant_idxs;
  __pyx_pybuffer_allele_int32_out.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32_out.refcount = 0;
  __pyx_pybuffernd_allele_int32_out.data = NULL;
  __pyx_pybuffernd_allele_int32_out.rcbuffer = &__pyx_pybuffer_allele_int32_out;
  __pyx_pybuffer_phasepresent_out.pybuffer.buf = NULL;
  __pyx_pybuffer_phasepresent_out.refcount = 0;
  __pyx_pybuffernd_phasepresent_out.data = NULL;
  __pyx_pybuffernd_phasepresent_out.rcbuffer = &__pyx_pybuffer_phasepresent_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer, (PyObject*)__pyx_v_variant_idxs, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_variant_idxs.diminfo[0].strides = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_variant_idxs.diminfo[0].shape = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32_out.diminfo[0].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32_out.diminfo[0].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_allele_int32_out.diminfo[1].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_allele_int32_out.diminfo[1].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_phasepresent_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 1, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_phasepresent_out.diminfo[0].strides = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_phasepresent_out.diminfo[0].shape = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_phasepresent_out.diminfo[1].strides = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_phasepresent_out.diminfo[1].shape = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.shape[1];
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_read_alleles_and_phasepresent_li); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_29read_alleles_and_phasepresent_list)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_hap_maj); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      __pyx_t_7 = PyTuple_New(4+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_variant_idxs));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_variant_idxs));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_variant_idxs));
      __Pyx_INCREF(((PyObject *)__pyx_v_allele_int32_out));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_allele_int32_out));
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, ((PyObject *)__pyx_v_allele_int32_out));
      __Pyx_INCREF(((PyObject *)__pyx_v_phasepresent_out));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_phasepresent_out));
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, ((PyObject *)__pyx_v_phasepresent_out));
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 3+__pyx_t_6, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1076
 * 
 *     cpdef read_alleles_and_phasepresent_list(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_out, np.ndarray[np.uint8_t,cast=True,mode="c",ndim=2] phasepresent_out, bint hap_maj = 0):
 *         pass             # <<<<<<<<<<<<<<
 * 
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles_and_phasepresent_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1075
 * 
 * 
 *     cpdef read_alleles_and_phasepresent_list(self, np.ndarray[np.uint32_t] variant_idxs, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_out, np.ndarray[np.uint8_t,cast=True,mode="c",ndim=2] phasepresent_out, bint hap_maj = 0):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_29read_alleles_and_phasepresent_list(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_29read_alleles_and_phasepresent_list(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_variant_idxs = 0;
  PyArrayObject *__pyx_v_allele_int32_out = 0;
  PyArrayObject *__pyx_v_phasepresent_out = 0;
  int __pyx_v_hap_maj;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_alleles_and_phasepresent_list (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variant_idxs,&__pyx_n_s_allele_int32_out,&__pyx_n_s_phasepresent_out,&__pyx_n_s_hap_maj,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variant_idxs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allele_int32_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_alleles_and_phasepresent_list", 0, 3, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phasepresent_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_alleles_and_phasepresent_list", 0, 3, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hap_maj);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_alleles_and_phasepresent_list") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_variant_idxs = ((PyArrayObject *)values[0]);
    __pyx_v_allele_int32_out = ((PyArrayObject *)values[1]);
    __pyx_v_phasepresent_out = ((PyArrayObject *)values[2]);
    if (values[3]) {
      __pyx_v_hap_maj = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_hap_maj == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_hap_maj = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_alleles_and_phasepresent_list", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles_and_phasepresent_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_variant_idxs), __pyx_ptype_5numpy_ndarray, 1, "variant_idxs", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_allele_int32_out), __pyx_ptype_5numpy_ndarray, 1, "allele_int32_out", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phasepresent_out), __pyx_ptype_5numpy_ndarray, 1, "phasepresent_out", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_28read_alleles_and_phasepresent_list(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self), __pyx_v_variant_idxs, __pyx_v_allele_int32_out, __pyx_v_phasepresent_out, __pyx_v_hap_maj);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_28read_alleles_and_phasepresent_list(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyArrayObject *__pyx_v_variant_idxs, PyArrayObject *__pyx_v_allele_int32_out, PyArrayObject *__pyx_v_phasepresent_out, int __pyx_v_hap_maj) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32_out;
  __Pyx_Buffer __pyx_pybuffer_allele_int32_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_phasepresent_out;
  __Pyx_Buffer __pyx_pybuffer_phasepresent_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_variant_idxs;
  __Pyx_Buffer __pyx_pybuffer_variant_idxs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_and_phasepresent_list __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_alleles_and_phasepresent_list", 0);
  __pyx_pybuffer_variant_idxs.pybuffer.buf = NULL;
  __pyx_pybuffer_variant_idxs.refcount = 0;
  __pyx_pybuffernd_variant_idxs.data = NULL;
  __pyx_pybuffernd_variant_idxs.rcbuffer = &__pyx_pybuffer_variant_idxs;
  __pyx_pybuffer_allele_int32_out.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32_out.refcount = 0;
  __pyx_pybuffernd_allele_int32_out.data = NULL;
  __pyx_pybuffernd_allele_int32_out.rcbuffer = &__pyx_pybuffer_allele_int32_out;
  __pyx_pybuffer_phasepresent_out.pybuffer.buf = NULL;
  __pyx_pybuffer_phasepresent_out.refcount = 0;
  __pyx_pybuffernd_phasepresent_out.data = NULL;
  __pyx_pybuffernd_phasepresent_out.rcbuffer = &__pyx_pybuffer_phasepresent_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer, (PyObject*)__pyx_v_variant_idxs, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_variant_idxs.diminfo[0].strides = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_variant_idxs.diminfo[0].shape = __pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32_out.diminfo[0].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32_out.diminfo[0].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_allele_int32_out.diminfo[1].strides = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_allele_int32_out.diminfo[1].shape = __pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_phasepresent_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 1, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_phasepresent_out.diminfo[0].strides = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_phasepresent_out.diminfo[0].shape = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_phasepresent_out.diminfo[1].strides = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_phasepresent_out.diminfo[1].shape = __pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer.shape[1];
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.hap_maj = __pyx_v_hap_maj;
  __pyx_t_1 = __pyx_vtabptr_7pgenlib_PgenReader->read_alleles_and_phasepresent_list(__pyx_v_self, __pyx_v_variant_idxs, __pyx_v_allele_int32_out, __pyx_v_phasepresent_out, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.read_alleles_and_phasepresent_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_out.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent_out.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_variant_idxs.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1079
 * 
 * 
 *     cpdef count(self, uint32_t variant_idx, np.ndarray[np.uint32_t,mode="c"] genocount_uint32_out, object allele_idx = 1):             # <<<<<<<<<<<<<<
 *         # todo: multiallelic variants
 *         if allele_idx is None:
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_31count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_count(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_genocount_uint32_out, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_count *__pyx_optional_args) {
  PyObject *__pyx_v_allele_idx = ((PyObject *)__pyx_int_1);
  uint32_t *__pyx_v_data_ptr;
  plink2::pglerr_t __pyx_v_reterr;
  uint32_t __pyx_v_tmp;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_genocount_uint32_out;
  __Pyx_Buffer __pyx_pybuffer_genocount_uint32_out;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_allele_idx = __pyx_optional_args->allele_idx;
    }
  }
  __Pyx_INCREF(__pyx_v_allele_idx);
  __pyx_pybuffer_genocount_uint32_out.pybuffer.buf = NULL;
  __pyx_pybuffer_genocount_uint32_out.refcount = 0;
  __pyx_pybuffernd_genocount_uint32_out.data = NULL;
  __pyx_pybuffernd_genocount_uint32_out.rcbuffer = &__pyx_pybuffer_genocount_uint32_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_genocount_uint32_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_genocount_uint32_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_genocount_uint32_out.diminfo[0].strides = __pyx_pybuffernd_genocount_uint32_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_genocount_uint32_out.diminfo[0].shape = __pyx_pybuffernd_genocount_uint32_out.rcbuffer->pybuffer.shape[0];
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_31count)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_variant_idx); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
      __Pyx_INCREF(((PyObject *)__pyx_v_genocount_uint32_out));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_genocount_uint32_out));
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, ((PyObject *)__pyx_v_genocount_uint32_out));
      __Pyx_INCREF(__pyx_v_allele_idx);
      __Pyx_GIVEREF(__pyx_v_allele_idx);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_allele_idx);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1081
 *     cpdef count(self, uint32_t variant_idx, np.ndarray[np.uint32_t,mode="c"] genocount_uint32_out, object allele_idx = 1):
 *         # todo: multiallelic variants
 *         if allele_idx is None:             # <<<<<<<<<<<<<<
 *             allele_idx = 1
 *         cdef uint32_t* data_ptr = <uint32_t*>(&(genocount_uint32_out[0]))
 */
  __pyx_t_8 = (__pyx_v_allele_idx == Py_None);
  __pyx_t_9 = (__pyx_t_8 != 0);
  if (__pyx_t_9) {

    /* "pgenlib.pyx":1082
 *         # todo: multiallelic variants
 *         if allele_idx is None:
 *             allele_idx = 1             # <<<<<<<<<<<<<<
 *         cdef uint32_t* data_ptr = <uint32_t*>(&(genocount_uint32_out[0]))
 *         cdef pglerr_t reterr = pgr_get_refalt1_genotype_counts(self._subset_include_vec, self._subset_include_interleaved_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, data_ptr)
 */
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_DECREF_SET(__pyx_v_allele_idx, __pyx_int_1);

    /* "pgenlib.pyx":1081
 *     cpdef count(self, uint32_t variant_idx, np.ndarray[np.uint32_t,mode="c"] genocount_uint32_out, object allele_idx = 1):
 *         # todo: multiallelic variants
 *         if allele_idx is None:             # <<<<<<<<<<<<<<
 *             allele_idx = 1
 *         cdef uint32_t* data_ptr = <uint32_t*>(&(genocount_uint32_out[0]))
 */
  }

  /* "pgenlib.pyx":1083
 *         if allele_idx is None:
 *             allele_idx = 1
 *         cdef uint32_t* data_ptr = <uint32_t*>(&(genocount_uint32_out[0]))             # <<<<<<<<<<<<<<
 *         cdef pglerr_t reterr = pgr_get_refalt1_genotype_counts(self._subset_include_vec, self._subset_include_interleaved_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, data_ptr)
 *         if reterr != kPglRetSuccess:
 */
  __pyx_t_10 = 0;
  __pyx_t_11 = -1;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_pybuffernd_genocount_uint32_out.diminfo[0].shape;
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
  } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_genocount_uint32_out.diminfo[0].shape)) __pyx_t_11 = 0;
  if (unlikely(__pyx_t_11 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_11);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_data_ptr = ((uint32_t *)(&(*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_genocount_uint32_out.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_genocount_uint32_out.diminfo[0].strides))));

  /* "pgenlib.pyx":1084
 *             allele_idx = 1
 *         cdef uint32_t* data_ptr = <uint32_t*>(&(genocount_uint32_out[0]))
 *         cdef pglerr_t reterr = pgr_get_refalt1_genotype_counts(self._subset_include_vec, self._subset_include_interleaved_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, data_ptr)             # <<<<<<<<<<<<<<
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("count() error " + str(reterr))
 */
  __pyx_v_reterr = plink2::pgr_get_refalt1_genotype_counts(__pyx_v_self->_subset_include_vec, __pyx_v_self->_subset_include_interleaved_vec, __pyx_v_self->_subset_cumulative_popcounts, __pyx_v_self->_subset_size, __pyx_v_variant_idx, __pyx_v_self->_state_ptr, __pyx_v_data_ptr);

  /* "pgenlib.pyx":1085
 *         cdef uint32_t* data_ptr = <uint32_t*>(&(genocount_uint32_out[0]))
 *         cdef pglerr_t reterr = pgr_get_refalt1_genotype_counts(self._subset_include_vec, self._subset_include_interleaved_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, data_ptr)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("count() error " + str(reterr))
 *         if allele_idx != 0:
 */
  __pyx_t_9 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
  if (__pyx_t_9) {

    /* "pgenlib.pyx":1086
 *         cdef pglerr_t reterr = pgr_get_refalt1_genotype_counts(self._subset_include_vec, self._subset_include_interleaved_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, data_ptr)
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("count() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         if allele_idx != 0:
 *             return
 */
    __pyx_t_1 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_count_error, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":1085
 *         cdef uint32_t* data_ptr = <uint32_t*>(&(genocount_uint32_out[0]))
 *         cdef pglerr_t reterr = pgr_get_refalt1_genotype_counts(self._subset_include_vec, self._subset_include_interleaved_vec, self._subset_cumulative_popcounts, self._subset_size, variant_idx, self._state_ptr, data_ptr)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("count() error " + str(reterr))
 *         if allele_idx != 0:
 */
  }

  /* "pgenlib.pyx":1087
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("count() error " + str(reterr))
 *         if allele_idx != 0:             # <<<<<<<<<<<<<<
 *             return
 *         cdef uint32_t tmp = data_ptr[0]
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_allele_idx, __pyx_int_0, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_9) {

    /* "pgenlib.pyx":1088
 *             raise RuntimeError("count() error " + str(reterr))
 *         if allele_idx != 0:
 *             return             # <<<<<<<<<<<<<<
 *         cdef uint32_t tmp = data_ptr[0]
 *         data_ptr[0] = data_ptr[2]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "pgenlib.pyx":1087
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("count() error " + str(reterr))
 *         if allele_idx != 0:             # <<<<<<<<<<<<<<
 *             return
 *         cdef uint32_t tmp = data_ptr[0]
 */
  }

  /* "pgenlib.pyx":1089
 *         if allele_idx != 0:
 *             return
 *         cdef uint32_t tmp = data_ptr[0]             # <<<<<<<<<<<<<<
 *         data_ptr[0] = data_ptr[2]
 *         data_ptr[2] = tmp
 */
  __pyx_v_tmp = (__pyx_v_data_ptr[0]);

  /* "pgenlib.pyx":1090
 *             return
 *         cdef uint32_t tmp = data_ptr[0]
 *         data_ptr[0] = data_ptr[2]             # <<<<<<<<<<<<<<
 *         data_ptr[2] = tmp
 *         return
 */
  (__pyx_v_data_ptr[0]) = (__pyx_v_data_ptr[2]);

  /* "pgenlib.pyx":1091
 *         cdef uint32_t tmp = data_ptr[0]
 *         data_ptr[0] = data_ptr[2]
 *         data_ptr[2] = tmp             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  (__pyx_v_data_ptr[2]) = __pyx_v_tmp;

  /* "pgenlib.pyx":1092
 *         data_ptr[0] = data_ptr[2]
 *         data_ptr[2] = tmp
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1079
 * 
 * 
 *     cpdef count(self, uint32_t variant_idx, np.ndarray[np.uint32_t,mode="c"] genocount_uint32_out, object allele_idx = 1):             # <<<<<<<<<<<<<<
 *         # todo: multiallelic variants
 *         if allele_idx is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_genocount_uint32_out.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_genocount_uint32_out.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_allele_idx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_31count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_31count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint32_t __pyx_v_variant_idx;
  PyArrayObject *__pyx_v_genocount_uint32_out = 0;
  PyObject *__pyx_v_allele_idx = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variant_idx,&__pyx_n_s_genocount_uint32_out,&__pyx_n_s_allele_idx,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_int_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variant_idx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_genocount_uint32_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("count", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allele_idx);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "count") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_variant_idx = __Pyx_PyInt_As_uint32_t(values[0]); if (unlikely((__pyx_v_variant_idx == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_genocount_uint32_out = ((PyArrayObject *)values[1]);
    __pyx_v_allele_idx = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("count", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenReader.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_genocount_uint32_out), __pyx_ptype_5numpy_ndarray, 1, "genocount_uint32_out", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_30count(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self), __pyx_v_variant_idx, __pyx_v_genocount_uint32_out, __pyx_v_allele_idx);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_30count(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, uint32_t __pyx_v_variant_idx, PyArrayObject *__pyx_v_genocount_uint32_out, PyObject *__pyx_v_allele_idx) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_genocount_uint32_out;
  __Pyx_Buffer __pyx_pybuffer_genocount_uint32_out;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_7pgenlib_10PgenReader_count __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count", 0);
  __pyx_pybuffer_genocount_uint32_out.pybuffer.buf = NULL;
  __pyx_pybuffer_genocount_uint32_out.refcount = 0;
  __pyx_pybuffernd_genocount_uint32_out.data = NULL;
  __pyx_pybuffernd_genocount_uint32_out.rcbuffer = &__pyx_pybuffer_genocount_uint32_out;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_genocount_uint32_out.rcbuffer->pybuffer, (PyObject*)__pyx_v_genocount_uint32_out, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_genocount_uint32_out.diminfo[0].strides = __pyx_pybuffernd_genocount_uint32_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_genocount_uint32_out.diminfo[0].shape = __pyx_pybuffernd_genocount_uint32_out.rcbuffer->pybuffer.shape[0];
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.allele_idx = __pyx_v_allele_idx;
  __pyx_t_1 = __pyx_vtabptr_7pgenlib_PgenReader->count(__pyx_v_self, __pyx_v_variant_idx, __pyx_v_genocount_uint32_out, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_genocount_uint32_out.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenReader.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_genocount_uint32_out.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1095
 * 
 * 
 *     cpdef change_sample_subset(self, object sample_subset = None):             # <<<<<<<<<<<<<<
 *         if sample_subset is not None:
 *             self.set_sample_subset_internal(sample_subset)
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_33change_sample_subset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_change_sample_subset(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_change_sample_subset *__pyx_optional_args) {
  PyObject *__pyx_v_sample_subset = ((PyObject *)Py_None);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  uint32_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("change_sample_subset", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_sample_subset = __pyx_optional_args->sample_subset;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_change_sample_subset); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_33change_sample_subset)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_sample_subset); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_sample_subset);
        __Pyx_GIVEREF(__pyx_v_sample_subset);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_sample_subset);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1096
 * 
 *     cpdef change_sample_subset(self, object sample_subset = None):
 *         if sample_subset is not None:             # <<<<<<<<<<<<<<
 *             self.set_sample_subset_internal(sample_subset)
 *         else:
 */
  __pyx_t_6 = (__pyx_v_sample_subset != Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "pgenlib.pyx":1097
 *     cpdef change_sample_subset(self, object sample_subset = None):
 *         if sample_subset is not None:
 *             self.set_sample_subset_internal(sample_subset)             # <<<<<<<<<<<<<<
 *         else:
 *             self._subset_size = self._info_ptr[0].raw_sample_ct
 */
    if (!(likely(((__pyx_v_sample_subset) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_sample_subset, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = ((struct __pyx_vtabstruct_7pgenlib_PgenReader *)__pyx_v_self->__pyx_vtab)->set_sample_subset_internal(__pyx_v_self, ((PyArrayObject *)__pyx_v_sample_subset)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pgenlib.pyx":1096
 * 
 *     cpdef change_sample_subset(self, object sample_subset = None):
 *         if sample_subset is not None:             # <<<<<<<<<<<<<<
 *             self.set_sample_subset_internal(sample_subset)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pgenlib.pyx":1099
 *             self.set_sample_subset_internal(sample_subset)
 *         else:
 *             self._subset_size = self._info_ptr[0].raw_sample_ct             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  /*else*/ {
    __pyx_t_8 = (__pyx_v_self->_info_ptr[0]).raw_sample_ct;
    __pyx_v_self->_subset_size = __pyx_t_8;
  }
  __pyx_L3:;

  /* "pgenlib.pyx":1100
 *         else:
 *             self._subset_size = self._info_ptr[0].raw_sample_ct
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1095
 * 
 * 
 *     cpdef change_sample_subset(self, object sample_subset = None):             # <<<<<<<<<<<<<<
 *         if sample_subset is not None:
 *             self.set_sample_subset_internal(sample_subset)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pgenlib.PgenReader.change_sample_subset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_33change_sample_subset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_33change_sample_subset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sample_subset = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("change_sample_subset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sample_subset,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sample_subset);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "change_sample_subset") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sample_subset = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("change_sample_subset", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenReader.change_sample_subset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_32change_sample_subset(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self), __pyx_v_sample_subset);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_32change_sample_subset(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyObject *__pyx_v_sample_subset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_7pgenlib_10PgenReader_change_sample_subset __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("change_sample_subset", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.sample_subset = __pyx_v_sample_subset;
  __pyx_t_1 = __pyx_vtabptr_7pgenlib_PgenReader->change_sample_subset(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pgenlib.PgenReader.change_sample_subset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1103
 * 
 * 
 *     cpdef close(self):             # <<<<<<<<<<<<<<
 *         # don't bother propagating file close errors for now
 *         if self._info_ptr:
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_35close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader_close(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_close); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_35close)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1105
 *     cpdef close(self):
 *         # don't bother propagating file close errors for now
 *         if self._info_ptr:             # <<<<<<<<<<<<<<
 *             pgfi_cleanup(self._info_ptr)
 *             if self._info_ptr[0].vrtypes:
 */
  __pyx_t_5 = (__pyx_v_self->_info_ptr != 0);
  if (__pyx_t_5) {

    /* "pgenlib.pyx":1106
 *         # don't bother propagating file close errors for now
 *         if self._info_ptr:
 *             pgfi_cleanup(self._info_ptr)             # <<<<<<<<<<<<<<
 *             if self._info_ptr[0].vrtypes:
 *                 aligned_free(self._info_ptr[0].vrtypes)
 */
    plink2::pgfi_cleanup(__pyx_v_self->_info_ptr);

    /* "pgenlib.pyx":1107
 *         if self._info_ptr:
 *             pgfi_cleanup(self._info_ptr)
 *             if self._info_ptr[0].vrtypes:             # <<<<<<<<<<<<<<
 *                 aligned_free(self._info_ptr[0].vrtypes)
 *                 if self._state_ptr:
 */
    __pyx_t_5 = ((__pyx_v_self->_info_ptr[0]).vrtypes != 0);
    if (__pyx_t_5) {

      /* "pgenlib.pyx":1108
 *             pgfi_cleanup(self._info_ptr)
 *             if self._info_ptr[0].vrtypes:
 *                 aligned_free(self._info_ptr[0].vrtypes)             # <<<<<<<<<<<<<<
 *                 if self._state_ptr:
 *                     pgr_cleanup(self._state_ptr)
 */
      plink2::aligned_free((__pyx_v_self->_info_ptr[0]).vrtypes);

      /* "pgenlib.pyx":1109
 *             if self._info_ptr[0].vrtypes:
 *                 aligned_free(self._info_ptr[0].vrtypes)
 *                 if self._state_ptr:             # <<<<<<<<<<<<<<
 *                     pgr_cleanup(self._state_ptr)
 *                     if self._state_ptr[0].fread_buf:
 */
      __pyx_t_5 = (__pyx_v_self->_state_ptr != 0);
      if (__pyx_t_5) {

        /* "pgenlib.pyx":1110
 *                 aligned_free(self._info_ptr[0].vrtypes)
 *                 if self._state_ptr:
 *                     pgr_cleanup(self._state_ptr)             # <<<<<<<<<<<<<<
 *                     if self._state_ptr[0].fread_buf:
 *                         aligned_free(self._state_ptr[0].fread_buf)
 */
        plink2::pgr_cleanup(__pyx_v_self->_state_ptr);

        /* "pgenlib.pyx":1111
 *                 if self._state_ptr:
 *                     pgr_cleanup(self._state_ptr)
 *                     if self._state_ptr[0].fread_buf:             # <<<<<<<<<<<<<<
 *                         aligned_free(self._state_ptr[0].fread_buf)
 *                     PyMem_Free(self._state_ptr)
 */
        __pyx_t_5 = ((__pyx_v_self->_state_ptr[0]).fread_buf != 0);
        if (__pyx_t_5) {

          /* "pgenlib.pyx":1112
 *                     pgr_cleanup(self._state_ptr)
 *                     if self._state_ptr[0].fread_buf:
 *                         aligned_free(self._state_ptr[0].fread_buf)             # <<<<<<<<<<<<<<
 *                     PyMem_Free(self._state_ptr)
 *                     self._state_ptr = NULL
 */
          plink2::aligned_free((__pyx_v_self->_state_ptr[0]).fread_buf);

          /* "pgenlib.pyx":1111
 *                 if self._state_ptr:
 *                     pgr_cleanup(self._state_ptr)
 *                     if self._state_ptr[0].fread_buf:             # <<<<<<<<<<<<<<
 *                         aligned_free(self._state_ptr[0].fread_buf)
 *                     PyMem_Free(self._state_ptr)
 */
        }

        /* "pgenlib.pyx":1113
 *                     if self._state_ptr[0].fread_buf:
 *                         aligned_free(self._state_ptr[0].fread_buf)
 *                     PyMem_Free(self._state_ptr)             # <<<<<<<<<<<<<<
 *                     self._state_ptr = NULL
 *             PyMem_Free(self._info_ptr)
 */
        PyMem_Free(__pyx_v_self->_state_ptr);

        /* "pgenlib.pyx":1114
 *                         aligned_free(self._state_ptr[0].fread_buf)
 *                     PyMem_Free(self._state_ptr)
 *                     self._state_ptr = NULL             # <<<<<<<<<<<<<<
 *             PyMem_Free(self._info_ptr)
 *             self._info_ptr = NULL
 */
        __pyx_v_self->_state_ptr = NULL;

        /* "pgenlib.pyx":1109
 *             if self._info_ptr[0].vrtypes:
 *                 aligned_free(self._info_ptr[0].vrtypes)
 *                 if self._state_ptr:             # <<<<<<<<<<<<<<
 *                     pgr_cleanup(self._state_ptr)
 *                     if self._state_ptr[0].fread_buf:
 */
      }

      /* "pgenlib.pyx":1107
 *         if self._info_ptr:
 *             pgfi_cleanup(self._info_ptr)
 *             if self._info_ptr[0].vrtypes:             # <<<<<<<<<<<<<<
 *                 aligned_free(self._info_ptr[0].vrtypes)
 *                 if self._state_ptr:
 */
    }

    /* "pgenlib.pyx":1115
 *                     PyMem_Free(self._state_ptr)
 *                     self._state_ptr = NULL
 *             PyMem_Free(self._info_ptr)             # <<<<<<<<<<<<<<
 *             self._info_ptr = NULL
 *         return
 */
    PyMem_Free(__pyx_v_self->_info_ptr);

    /* "pgenlib.pyx":1116
 *                     self._state_ptr = NULL
 *             PyMem_Free(self._info_ptr)
 *             self._info_ptr = NULL             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_v_self->_info_ptr = NULL;

    /* "pgenlib.pyx":1105
 *     cpdef close(self):
 *         # don't bother propagating file close errors for now
 *         if self._info_ptr:             # <<<<<<<<<<<<<<
 *             pgfi_cleanup(self._info_ptr)
 *             if self._info_ptr[0].vrtypes:
 */
  }

  /* "pgenlib.pyx":1117
 *             PyMem_Free(self._info_ptr)
 *             self._info_ptr = NULL
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1103
 * 
 * 
 *     cpdef close(self):             # <<<<<<<<<<<<<<
 *         # don't bother propagating file close errors for now
 *         if self._info_ptr:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pgenlib.PgenReader.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_35close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_35close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_34close(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_34close(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenReader_close(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pgenlib.PgenReader.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1120
 * 
 * 
 *     cpdef __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.close()
 *         return
 */

static PyObject *__pyx_pw_7pgenlib_10PgenReader_37__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenReader___exit__(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_exit); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_37__exit__)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_exc_type);
      __Pyx_GIVEREF(__pyx_v_exc_type);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_exc_type);
      __Pyx_INCREF(__pyx_v_exc_val);
      __Pyx_GIVEREF(__pyx_v_exc_val);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_exc_val);
      __Pyx_INCREF(__pyx_v_exc_tb);
      __Pyx_GIVEREF(__pyx_v_exc_tb);
      PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_exc_tb);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1121
 * 
 *     cpdef __exit__(self, exc_type, exc_val, exc_tb):
 *         self.close()             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7pgenlib_PgenReader *)__pyx_v_self->__pyx_vtab)->close(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pgenlib.pyx":1122
 *     cpdef __exit__(self, exc_type, exc_val, exc_tb):
 *         self.close()
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1120
 * 
 * 
 *     cpdef __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.close()
 *         return
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pgenlib.PgenReader.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenReader_37__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenReader_37__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_exc_type = 0;
  PyObject *__pyx_v_exc_val = 0;
  PyObject *__pyx_v_exc_tb = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc_type,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_tb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exc_type = values[0];
    __pyx_v_exc_val = values[1];
    __pyx_v_exc_tb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenReader.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pgenlib_10PgenReader_36__exit__(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self), __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenReader_36__exit__(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self, PyObject *__pyx_v_exc_type, PyObject *__pyx_v_exc_val, PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenReader___exit__(__pyx_v_self, __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pgenlib.PgenReader.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1125
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._info_ptr:
 *             pgfi_cleanup(self._info_ptr)
 */

/* Python wrapper */
static void __pyx_pw_7pgenlib_10PgenReader_39__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7pgenlib_10PgenReader_39__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7pgenlib_10PgenReader_38__dealloc__(((struct __pyx_obj_7pgenlib_PgenReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7pgenlib_10PgenReader_38__dealloc__(struct __pyx_obj_7pgenlib_PgenReader *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pgenlib.pyx":1126
 * 
 *     def __dealloc__(self):
 *         if self._info_ptr:             # <<<<<<<<<<<<<<
 *             pgfi_cleanup(self._info_ptr)
 *             if self._info_ptr[0].vrtypes:
 */
  __pyx_t_1 = (__pyx_v_self->_info_ptr != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":1127
 *     def __dealloc__(self):
 *         if self._info_ptr:
 *             pgfi_cleanup(self._info_ptr)             # <<<<<<<<<<<<<<
 *             if self._info_ptr[0].vrtypes:
 *                 aligned_free(self._info_ptr[0].vrtypes)
 */
    plink2::pgfi_cleanup(__pyx_v_self->_info_ptr);

    /* "pgenlib.pyx":1128
 *         if self._info_ptr:
 *             pgfi_cleanup(self._info_ptr)
 *             if self._info_ptr[0].vrtypes:             # <<<<<<<<<<<<<<
 *                 aligned_free(self._info_ptr[0].vrtypes)
 *                 if self._state_ptr:
 */
    __pyx_t_1 = ((__pyx_v_self->_info_ptr[0]).vrtypes != 0);
    if (__pyx_t_1) {

      /* "pgenlib.pyx":1129
 *             pgfi_cleanup(self._info_ptr)
 *             if self._info_ptr[0].vrtypes:
 *                 aligned_free(self._info_ptr[0].vrtypes)             # <<<<<<<<<<<<<<
 *                 if self._state_ptr:
 *                     pgr_cleanup(self._state_ptr)
 */
      plink2::aligned_free((__pyx_v_self->_info_ptr[0]).vrtypes);

      /* "pgenlib.pyx":1130
 *             if self._info_ptr[0].vrtypes:
 *                 aligned_free(self._info_ptr[0].vrtypes)
 *                 if self._state_ptr:             # <<<<<<<<<<<<<<
 *                     pgr_cleanup(self._state_ptr)
 *                     if self._state_ptr[0].fread_buf:
 */
      __pyx_t_1 = (__pyx_v_self->_state_ptr != 0);
      if (__pyx_t_1) {

        /* "pgenlib.pyx":1131
 *                 aligned_free(self._info_ptr[0].vrtypes)
 *                 if self._state_ptr:
 *                     pgr_cleanup(self._state_ptr)             # <<<<<<<<<<<<<<
 *                     if self._state_ptr[0].fread_buf:
 *                         aligned_free(self._state_ptr[0].fread_buf)
 */
        plink2::pgr_cleanup(__pyx_v_self->_state_ptr);

        /* "pgenlib.pyx":1132
 *                 if self._state_ptr:
 *                     pgr_cleanup(self._state_ptr)
 *                     if self._state_ptr[0].fread_buf:             # <<<<<<<<<<<<<<
 *                         aligned_free(self._state_ptr[0].fread_buf)
 *                     PyMem_Free(self._state_ptr)
 */
        __pyx_t_1 = ((__pyx_v_self->_state_ptr[0]).fread_buf != 0);
        if (__pyx_t_1) {

          /* "pgenlib.pyx":1133
 *                     pgr_cleanup(self._state_ptr)
 *                     if self._state_ptr[0].fread_buf:
 *                         aligned_free(self._state_ptr[0].fread_buf)             # <<<<<<<<<<<<<<
 *                     PyMem_Free(self._state_ptr)
 *             PyMem_Free(self._info_ptr)
 */
          plink2::aligned_free((__pyx_v_self->_state_ptr[0]).fread_buf);

          /* "pgenlib.pyx":1132
 *                 if self._state_ptr:
 *                     pgr_cleanup(self._state_ptr)
 *                     if self._state_ptr[0].fread_buf:             # <<<<<<<<<<<<<<
 *                         aligned_free(self._state_ptr[0].fread_buf)
 *                     PyMem_Free(self._state_ptr)
 */
        }

        /* "pgenlib.pyx":1134
 *                     if self._state_ptr[0].fread_buf:
 *                         aligned_free(self._state_ptr[0].fread_buf)
 *                     PyMem_Free(self._state_ptr)             # <<<<<<<<<<<<<<
 *             PyMem_Free(self._info_ptr)
 *         return
 */
        PyMem_Free(__pyx_v_self->_state_ptr);

        /* "pgenlib.pyx":1130
 *             if self._info_ptr[0].vrtypes:
 *                 aligned_free(self._info_ptr[0].vrtypes)
 *                 if self._state_ptr:             # <<<<<<<<<<<<<<
 *                     pgr_cleanup(self._state_ptr)
 *                     if self._state_ptr[0].fread_buf:
 */
      }

      /* "pgenlib.pyx":1128
 *         if self._info_ptr:
 *             pgfi_cleanup(self._info_ptr)
 *             if self._info_ptr[0].vrtypes:             # <<<<<<<<<<<<<<
 *                 aligned_free(self._info_ptr[0].vrtypes)
 *                 if self._state_ptr:
 */
    }

    /* "pgenlib.pyx":1135
 *                         aligned_free(self._state_ptr[0].fread_buf)
 *                     PyMem_Free(self._state_ptr)
 *             PyMem_Free(self._info_ptr)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    PyMem_Free(__pyx_v_self->_info_ptr);

    /* "pgenlib.pyx":1126
 * 
 *     def __dealloc__(self):
 *         if self._info_ptr:             # <<<<<<<<<<<<<<
 *             pgfi_cleanup(self._info_ptr)
 *             if self._info_ptr[0].vrtypes:
 */
  }

  /* "pgenlib.pyx":1136
 *                     PyMem_Free(self._state_ptr)
 *             PyMem_Free(self._info_ptr)
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "pgenlib.pyx":1125
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._info_ptr:
 *             pgfi_cleanup(self._info_ptr)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pgenlib.pyx":1140
 * 
 * 
 * cdef bytes_to_bits_internal(np.ndarray[np.uint8_t,mode="c",cast=True] boolbytes, uint32_t sample_ct, uintptr_t* bitarr):             # <<<<<<<<<<<<<<
 *     bytes_to_bits_unsafe(boolbytes, sample_ct, bitarr)
 * 
 */

static PyObject *__pyx_f_7pgenlib_bytes_to_bits_internal(PyArrayObject *__pyx_v_boolbytes, uint32_t __pyx_v_sample_ct, uintptr_t *__pyx_v_bitarr) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_boolbytes;
  __Pyx_Buffer __pyx_pybuffer_boolbytes;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint8_t const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bytes_to_bits_internal", 0);
  __pyx_pybuffer_boolbytes.pybuffer.buf = NULL;
  __pyx_pybuffer_boolbytes.refcount = 0;
  __pyx_pybuffernd_boolbytes.data = NULL;
  __pyx_pybuffernd_boolbytes.rcbuffer = &__pyx_pybuffer_boolbytes;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_boolbytes.rcbuffer->pybuffer, (PyObject*)__pyx_v_boolbytes, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 1, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_boolbytes.diminfo[0].strides = __pyx_pybuffernd_boolbytes.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_boolbytes.diminfo[0].shape = __pyx_pybuffernd_boolbytes.rcbuffer->pybuffer.shape[0];

  /* "pgenlib.pyx":1141
 * 
 * cdef bytes_to_bits_internal(np.ndarray[np.uint8_t,mode="c",cast=True] boolbytes, uint32_t sample_ct, uintptr_t* bitarr):
 *     bytes_to_bits_unsafe(boolbytes, sample_ct, bitarr)             # <<<<<<<<<<<<<<
 * 
 * cdef class PgenWriter:
 */
  __pyx_t_1 = __Pyx_PyObject_AsUString(((PyObject *)__pyx_v_boolbytes)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  plink2::bytes_to_bits_unsafe(__pyx_t_1, __pyx_v_sample_ct, __pyx_v_bitarr);

  /* "pgenlib.pyx":1140
 * 
 * 
 * cdef bytes_to_bits_internal(np.ndarray[np.uint8_t,mode="c",cast=True] boolbytes, uint32_t sample_ct, uintptr_t* bitarr):             # <<<<<<<<<<<<<<
 *     bytes_to_bits_unsafe(boolbytes, sample_ct, bitarr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_boolbytes.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.bytes_to_bits_internal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_boolbytes.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1154
 * 
 * 
 *     def __cinit__(self, bytes filename, uint32_t sample_ct,             # <<<<<<<<<<<<<<
 *                   uint32_t variant_ct, object nonref_flags,
 *                   object allele_idx_offsets = None,
 */

/* Python wrapper */
static int __pyx_pw_7pgenlib_10PgenWriter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pgenlib_10PgenWriter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  uint32_t __pyx_v_sample_ct;
  uint32_t __pyx_v_variant_ct;
  PyObject *__pyx_v_nonref_flags = 0;
  PyObject *__pyx_v_allele_idx_offsets = 0;
  int __pyx_v_hardcall_phase_present;
  int __pyx_v_dosage_present;
  int __pyx_v_dosage_phase_present;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_sample_ct,&__pyx_n_s_variant_ct,&__pyx_n_s_nonref_flags,&__pyx_n_s_allele_idx_offsets,&__pyx_n_s_hardcall_phase_present,&__pyx_n_s_dosage_present,&__pyx_n_s_dosage_phase_present,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};

    /* "pgenlib.pyx":1156
 *     def __cinit__(self, bytes filename, uint32_t sample_ct,
 *                   uint32_t variant_ct, object nonref_flags,
 *                   object allele_idx_offsets = None,             # <<<<<<<<<<<<<<
 *                   bint hardcall_phase_present = False,
 *                   bint dosage_present = False,
 */
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sample_ct)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 8, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variant_ct)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 8, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nonref_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 8, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allele_idx_offsets);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hardcall_phase_present);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dosage_present);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dosage_phase_present);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = ((PyObject*)values[0]);
    __pyx_v_sample_ct = __Pyx_PyInt_As_uint32_t(values[1]); if (unlikely((__pyx_v_sample_ct == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_variant_ct = __Pyx_PyInt_As_uint32_t(values[2]); if (unlikely((__pyx_v_variant_ct == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_nonref_flags = values[3];
    __pyx_v_allele_idx_offsets = values[4];
    if (values[5]) {
      __pyx_v_hardcall_phase_present = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_hardcall_phase_present == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pgenlib.pyx":1157
 *                   uint32_t variant_ct, object nonref_flags,
 *                   object allele_idx_offsets = None,
 *                   bint hardcall_phase_present = False,             # <<<<<<<<<<<<<<
 *                   bint dosage_present = False,
 *                   bint dosage_phase_present = False):
 */
      __pyx_v_hardcall_phase_present = ((int)0);
    }
    if (values[6]) {
      __pyx_v_dosage_present = __Pyx_PyObject_IsTrue(values[6]); if (unlikely((__pyx_v_dosage_present == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pgenlib.pyx":1158
 *                   object allele_idx_offsets = None,
 *                   bint hardcall_phase_present = False,
 *                   bint dosage_present = False,             # <<<<<<<<<<<<<<
 *                   bint dosage_phase_present = False):
 *         if dosage_phase_present and not dosage_present:
 */
      __pyx_v_dosage_present = ((int)0);
    }
    if (values[7]) {
      __pyx_v_dosage_phase_present = __Pyx_PyObject_IsTrue(values[7]); if (unlikely((__pyx_v_dosage_phase_present == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pgenlib.pyx":1159
 *                   bint hardcall_phase_present = False,
 *                   bint dosage_present = False,
 *                   bint dosage_phase_present = False):             # <<<<<<<<<<<<<<
 *         if dosage_phase_present and not dosage_present:
 *             raise RuntimeError("Invalid arguments for PgenWriter constructor (dosage_phase_present true but dosage_present false).")
 */
      __pyx_v_dosage_phase_present = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 8, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenWriter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyBytes_Type), 1, "filename", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenWriter___cinit__(((struct __pyx_obj_7pgenlib_PgenWriter *)__pyx_v_self), __pyx_v_filename, __pyx_v_sample_ct, __pyx_v_variant_ct, __pyx_v_nonref_flags, __pyx_v_allele_idx_offsets, __pyx_v_hardcall_phase_present, __pyx_v_dosage_present, __pyx_v_dosage_phase_present);

  /* "pgenlib.pyx":1154
 * 
 * 
 *     def __cinit__(self, bytes filename, uint32_t sample_ct,             # <<<<<<<<<<<<<<
 *                   uint32_t variant_ct, object nonref_flags,
 *                   object allele_idx_offsets = None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pgenlib_10PgenWriter___cinit__(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyObject *__pyx_v_filename, uint32_t __pyx_v_sample_ct, uint32_t __pyx_v_variant_ct, PyObject *__pyx_v_nonref_flags, PyObject *__pyx_v_allele_idx_offsets, int __pyx_v_hardcall_phase_present, int __pyx_v_dosage_present, int __pyx_v_dosage_phase_present) {
  PyObject *__pyx_v_uii = NULL;
  uint32_t __pyx_v_nonref_flags_storage;
  uint32_t __pyx_v_bitvec_cacheline_ct;
  char const *__pyx_v_fname;
  plink2::pgen_global_flags_t __pyx_v_phase_dosage_gflags;
  uintptr_t __pyx_v_alloc_cacheline_ct;
  uint32_t __pyx_v_max_vrec_len;
  plink2::pglerr_t __pyx_v_reterr;
  uint32_t __pyx_v_genovec_cacheline_ct;
  uint32_t __pyx_v_dosage_vals_cacheline_ct;
  unsigned char *__pyx_v_spgw_alloc;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  char const *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pgenlib.pyx":1160
 *                   bint dosage_present = False,
 *                   bint dosage_phase_present = False):
 *         if dosage_phase_present and not dosage_present:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Invalid arguments for PgenWriter constructor (dosage_phase_present true but dosage_present false).")
 *         if allele_idx_offsets is not None:
 */
  __pyx_t_2 = (__pyx_v_dosage_phase_present != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_dosage_present != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pgenlib.pyx":1161
 *                   bint dosage_phase_present = False):
 *         if dosage_phase_present and not dosage_present:
 *             raise RuntimeError("Invalid arguments for PgenWriter constructor (dosage_phase_present true but dosage_present false).")             # <<<<<<<<<<<<<<
 *         if allele_idx_offsets is not None:
 *             for uii in range(variant_ct + 1):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":1160
 *                   bint dosage_present = False,
 *                   bint dosage_phase_present = False):
 *         if dosage_phase_present and not dosage_present:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Invalid arguments for PgenWriter constructor (dosage_phase_present true but dosage_present false).")
 *         if allele_idx_offsets is not None:
 */
  }

  /* "pgenlib.pyx":1162
 *         if dosage_phase_present and not dosage_present:
 *             raise RuntimeError("Invalid arguments for PgenWriter constructor (dosage_phase_present true but dosage_present false).")
 *         if allele_idx_offsets is not None:             # <<<<<<<<<<<<<<
 *             for uii in range(variant_ct + 1):
 *                 if allele_idx_offsets[uii] != uii * 2:
 */
  __pyx_t_1 = (__pyx_v_allele_idx_offsets != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pgenlib.pyx":1163
 *             raise RuntimeError("Invalid arguments for PgenWriter constructor (dosage_phase_present true but dosage_present false).")
 *         if allele_idx_offsets is not None:
 *             for uii in range(variant_ct + 1):             # <<<<<<<<<<<<<<
 *                 if allele_idx_offsets[uii] != uii * 2:
 *                     raise RuntimeError("Multiallelic variants aren't supported by PgenWriter yet.")
 */
    __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_variant_ct + 1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_uii, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pgenlib.pyx":1164
 *         if allele_idx_offsets is not None:
 *             for uii in range(variant_ct + 1):
 *                 if allele_idx_offsets[uii] != uii * 2:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("Multiallelic variants aren't supported by PgenWriter yet.")
 * 
 */
      __pyx_t_3 = PyObject_GetItem(__pyx_v_allele_idx_offsets, __pyx_v_uii); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1164; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyNumber_Multiply(__pyx_v_uii, __pyx_int_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_3, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_2) {

        /* "pgenlib.pyx":1165
 *             for uii in range(variant_ct + 1):
 *                 if allele_idx_offsets[uii] != uii * 2:
 *                     raise RuntimeError("Multiallelic variants aren't supported by PgenWriter yet.")             # <<<<<<<<<<<<<<
 * 
 *         self._state_ptr = <st_pgen_writer_t*>PyMem_Malloc(sizeof(st_pgen_writer_t))
 */
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":1164
 *         if allele_idx_offsets is not None:
 *             for uii in range(variant_ct + 1):
 *                 if allele_idx_offsets[uii] != uii * 2:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("Multiallelic variants aren't supported by PgenWriter yet.")
 * 
 */
      }

      /* "pgenlib.pyx":1163
 *             raise RuntimeError("Invalid arguments for PgenWriter constructor (dosage_phase_present true but dosage_present false).")
 *         if allele_idx_offsets is not None:
 *             for uii in range(variant_ct + 1):             # <<<<<<<<<<<<<<
 *                 if allele_idx_offsets[uii] != uii * 2:
 *                     raise RuntimeError("Multiallelic variants aren't supported by PgenWriter yet.")
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pgenlib.pyx":1162
 *         if dosage_phase_present and not dosage_present:
 *             raise RuntimeError("Invalid arguments for PgenWriter constructor (dosage_phase_present true but dosage_present false).")
 *         if allele_idx_offsets is not None:             # <<<<<<<<<<<<<<
 *             for uii in range(variant_ct + 1):
 *                 if allele_idx_offsets[uii] != uii * 2:
 */
  }

  /* "pgenlib.pyx":1167
 *                     raise RuntimeError("Multiallelic variants aren't supported by PgenWriter yet.")
 * 
 *         self._state_ptr = <st_pgen_writer_t*>PyMem_Malloc(sizeof(st_pgen_writer_t))             # <<<<<<<<<<<<<<
 *         if not self._state_ptr:
 *             raise MemoryError()
 */
  __pyx_v_self->_state_ptr = ((plink2::st_pgen_writer_t *)PyMem_Malloc((sizeof(plink2::st_pgen_writer_t))));

  /* "pgenlib.pyx":1168
 * 
 *         self._state_ptr = <st_pgen_writer_t*>PyMem_Malloc(sizeof(st_pgen_writer_t))
 *         if not self._state_ptr:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._nonref_flags = NULL
 */
  __pyx_t_2 = ((!(__pyx_v_self->_state_ptr != 0)) != 0);
  if (__pyx_t_2) {

    /* "pgenlib.pyx":1169
 *         self._state_ptr = <st_pgen_writer_t*>PyMem_Malloc(sizeof(st_pgen_writer_t))
 *         if not self._state_ptr:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._nonref_flags = NULL
 *         cdef uint32_t nonref_flags_storage = 0
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":1168
 * 
 *         self._state_ptr = <st_pgen_writer_t*>PyMem_Malloc(sizeof(st_pgen_writer_t))
 *         if not self._state_ptr:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._nonref_flags = NULL
 */
  }

  /* "pgenlib.pyx":1170
 *         if not self._state_ptr:
 *             raise MemoryError()
 *         self._nonref_flags = NULL             # <<<<<<<<<<<<<<
 *         cdef uint32_t nonref_flags_storage = 0
 *         cdef uint32_t bitvec_cacheline_ct = DIV_UP(sample_ct, kBitsPerCacheline)
 */
  __pyx_v_self->_nonref_flags = NULL;

  /* "pgenlib.pyx":1171
 *             raise MemoryError()
 *         self._nonref_flags = NULL
 *         cdef uint32_t nonref_flags_storage = 0             # <<<<<<<<<<<<<<
 *         cdef uint32_t bitvec_cacheline_ct = DIV_UP(sample_ct, kBitsPerCacheline)
 *         if nonref_flags is not None:
 */
  __pyx_v_nonref_flags_storage = 0;

  /* "pgenlib.pyx":1172
 *         self._nonref_flags = NULL
 *         cdef uint32_t nonref_flags_storage = 0
 *         cdef uint32_t bitvec_cacheline_ct = DIV_UP(sample_ct, kBitsPerCacheline)             # <<<<<<<<<<<<<<
 *         if nonref_flags is not None:
 *             if type(nonref_flags) == type(True):
 */
  __pyx_v_bitvec_cacheline_ct = DIV_UP(__pyx_v_sample_ct, plink2::kBitsPerCacheline);

  /* "pgenlib.pyx":1173
 *         cdef uint32_t nonref_flags_storage = 0
 *         cdef uint32_t bitvec_cacheline_ct = DIV_UP(sample_ct, kBitsPerCacheline)
 *         if nonref_flags is not None:             # <<<<<<<<<<<<<<
 *             if type(nonref_flags) == type(True):
 *                 if nonref_flags:
 */
  __pyx_t_2 = (__pyx_v_nonref_flags != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":1174
 *         cdef uint32_t bitvec_cacheline_ct = DIV_UP(sample_ct, kBitsPerCacheline)
 *         if nonref_flags is not None:
 *             if type(nonref_flags) == type(True):             # <<<<<<<<<<<<<<
 *                 if nonref_flags:
 *                     nonref_flags_storage = 2
 */
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_nonref_flags)), ((PyObject *)Py_TYPE(Py_True)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "pgenlib.pyx":1175
 *         if nonref_flags is not None:
 *             if type(nonref_flags) == type(True):
 *                 if nonref_flags:             # <<<<<<<<<<<<<<
 *                     nonref_flags_storage = 2
 *                 else:
 */
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_nonref_flags); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (__pyx_t_1) {

        /* "pgenlib.pyx":1176
 *             if type(nonref_flags) == type(True):
 *                 if nonref_flags:
 *                     nonref_flags_storage = 2             # <<<<<<<<<<<<<<
 *                 else:
 *                     nonref_flags_storage = 1
 */
        __pyx_v_nonref_flags_storage = 2;

        /* "pgenlib.pyx":1175
 *         if nonref_flags is not None:
 *             if type(nonref_flags) == type(True):
 *                 if nonref_flags:             # <<<<<<<<<<<<<<
 *                     nonref_flags_storage = 2
 *                 else:
 */
        goto __pyx_L13;
      }

      /* "pgenlib.pyx":1178
 *                     nonref_flags_storage = 2
 *                 else:
 *                     nonref_flags_storage = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 nonref_flags_storage = 3
 */
      /*else*/ {
        __pyx_v_nonref_flags_storage = 1;
      }
      __pyx_L13:;

      /* "pgenlib.pyx":1174
 *         cdef uint32_t bitvec_cacheline_ct = DIV_UP(sample_ct, kBitsPerCacheline)
 *         if nonref_flags is not None:
 *             if type(nonref_flags) == type(True):             # <<<<<<<<<<<<<<
 *                 if nonref_flags:
 *                     nonref_flags_storage = 2
 */
      goto __pyx_L12;
    }

    /* "pgenlib.pyx":1180
 *                     nonref_flags_storage = 1
 *             else:
 *                 nonref_flags_storage = 3             # <<<<<<<<<<<<<<
 *                 if cachealigned_malloc(bitvec_cacheline_ct * kCacheline, &(self._nonref_flags)):
 *                     raise MemoryError()
 */
    /*else*/ {
      __pyx_v_nonref_flags_storage = 3;

      /* "pgenlib.pyx":1181
 *             else:
 *                 nonref_flags_storage = 3
 *                 if cachealigned_malloc(bitvec_cacheline_ct * kCacheline, &(self._nonref_flags)):             # <<<<<<<<<<<<<<
 *                     raise MemoryError()
 *                 bytes_to_bits_internal(nonref_flags, sample_ct, self._nonref_flags)
 */
      __pyx_t_1 = (plink2::cachealigned_malloc((__pyx_v_bitvec_cacheline_ct * plink2::kCacheline), (&__pyx_v_self->_nonref_flags)) != 0);
      if (__pyx_t_1) {

        /* "pgenlib.pyx":1182
 *                 nonref_flags_storage = 3
 *                 if cachealigned_malloc(bitvec_cacheline_ct * kCacheline, &(self._nonref_flags)):
 *                     raise MemoryError()             # <<<<<<<<<<<<<<
 *                 bytes_to_bits_internal(nonref_flags, sample_ct, self._nonref_flags)
 *         cdef const char* fname = <const char*>filename
 */
        PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":1181
 *             else:
 *                 nonref_flags_storage = 3
 *                 if cachealigned_malloc(bitvec_cacheline_ct * kCacheline, &(self._nonref_flags)):             # <<<<<<<<<<<<<<
 *                     raise MemoryError()
 *                 bytes_to_bits_internal(nonref_flags, sample_ct, self._nonref_flags)
 */
      }

      /* "pgenlib.pyx":1183
 *                 if cachealigned_malloc(bitvec_cacheline_ct * kCacheline, &(self._nonref_flags)):
 *                     raise MemoryError()
 *                 bytes_to_bits_internal(nonref_flags, sample_ct, self._nonref_flags)             # <<<<<<<<<<<<<<
 *         cdef const char* fname = <const char*>filename
 *         cdef pgen_global_flags_t phase_dosage_gflags = kfPgenGlobal0
 */
      if (!(likely(((__pyx_v_nonref_flags) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_nonref_flags, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_4 = __pyx_f_7pgenlib_bytes_to_bits_internal(((PyArrayObject *)__pyx_v_nonref_flags), __pyx_v_sample_ct, __pyx_v_self->_nonref_flags); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_L12:;

    /* "pgenlib.pyx":1173
 *         cdef uint32_t nonref_flags_storage = 0
 *         cdef uint32_t bitvec_cacheline_ct = DIV_UP(sample_ct, kBitsPerCacheline)
 *         if nonref_flags is not None:             # <<<<<<<<<<<<<<
 *             if type(nonref_flags) == type(True):
 *                 if nonref_flags:
 */
  }

  /* "pgenlib.pyx":1184
 *                     raise MemoryError()
 *                 bytes_to_bits_internal(nonref_flags, sample_ct, self._nonref_flags)
 *         cdef const char* fname = <const char*>filename             # <<<<<<<<<<<<<<
 *         cdef pgen_global_flags_t phase_dosage_gflags = kfPgenGlobal0
 *         if hardcall_phase_present:
 */
  __pyx_t_9 = __Pyx_PyObject_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_fname = ((char const *)__pyx_t_9);

  /* "pgenlib.pyx":1185
 *                 bytes_to_bits_internal(nonref_flags, sample_ct, self._nonref_flags)
 *         cdef const char* fname = <const char*>filename
 *         cdef pgen_global_flags_t phase_dosage_gflags = kfPgenGlobal0             # <<<<<<<<<<<<<<
 *         if hardcall_phase_present:
 *             phase_dosage_gflags |= kfPgenGlobalHardcallPhasePresent
 */
  __pyx_v_phase_dosage_gflags = plink2::kfPgenGlobal0;

  /* "pgenlib.pyx":1186
 *         cdef const char* fname = <const char*>filename
 *         cdef pgen_global_flags_t phase_dosage_gflags = kfPgenGlobal0
 *         if hardcall_phase_present:             # <<<<<<<<<<<<<<
 *             phase_dosage_gflags |= kfPgenGlobalHardcallPhasePresent
 *         if dosage_present:
 */
  __pyx_t_1 = (__pyx_v_hardcall_phase_present != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":1187
 *         cdef pgen_global_flags_t phase_dosage_gflags = kfPgenGlobal0
 *         if hardcall_phase_present:
 *             phase_dosage_gflags |= kfPgenGlobalHardcallPhasePresent             # <<<<<<<<<<<<<<
 *         if dosage_present:
 *             phase_dosage_gflags |= kfPgenGlobalDosagePresent
 */
    __pyx_v_phase_dosage_gflags = (__pyx_v_phase_dosage_gflags | plink2::kfPgenGlobalHardcallPhasePresent);

    /* "pgenlib.pyx":1186
 *         cdef const char* fname = <const char*>filename
 *         cdef pgen_global_flags_t phase_dosage_gflags = kfPgenGlobal0
 *         if hardcall_phase_present:             # <<<<<<<<<<<<<<
 *             phase_dosage_gflags |= kfPgenGlobalHardcallPhasePresent
 *         if dosage_present:
 */
  }

  /* "pgenlib.pyx":1188
 *         if hardcall_phase_present:
 *             phase_dosage_gflags |= kfPgenGlobalHardcallPhasePresent
 *         if dosage_present:             # <<<<<<<<<<<<<<
 *             phase_dosage_gflags |= kfPgenGlobalDosagePresent
 *         assert not dosage_phase_present
 */
  __pyx_t_1 = (__pyx_v_dosage_present != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":1189
 *             phase_dosage_gflags |= kfPgenGlobalHardcallPhasePresent
 *         if dosage_present:
 *             phase_dosage_gflags |= kfPgenGlobalDosagePresent             # <<<<<<<<<<<<<<
 *         assert not dosage_phase_present
 *         cdef uintptr_t alloc_cacheline_ct
 */
    __pyx_v_phase_dosage_gflags = (__pyx_v_phase_dosage_gflags | plink2::kfPgenGlobalDosagePresent);

    /* "pgenlib.pyx":1188
 *         if hardcall_phase_present:
 *             phase_dosage_gflags |= kfPgenGlobalHardcallPhasePresent
 *         if dosage_present:             # <<<<<<<<<<<<<<
 *             phase_dosage_gflags |= kfPgenGlobalDosagePresent
 *         assert not dosage_phase_present
 */
  }

  /* "pgenlib.pyx":1190
 *         if dosage_present:
 *             phase_dosage_gflags |= kfPgenGlobalDosagePresent
 *         assert not dosage_phase_present             # <<<<<<<<<<<<<<
 *         cdef uintptr_t alloc_cacheline_ct
 *         cdef uint32_t max_vrec_len
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((!(__pyx_v_dosage_phase_present != 0)) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "pgenlib.pyx":1193
 *         cdef uintptr_t alloc_cacheline_ct
 *         cdef uint32_t max_vrec_len
 *         cdef pglerr_t reterr = spgw_init_phase1(fname, NULL, self._nonref_flags, variant_ct, sample_ct, phase_dosage_gflags, nonref_flags_storage, self._state_ptr, &alloc_cacheline_ct, &max_vrec_len)             # <<<<<<<<<<<<<<
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("spgw_init_phase1() error " + str(reterr))
 */
  __pyx_v_reterr = plink2::spgw_init_phase1(__pyx_v_fname, NULL, __pyx_v_self->_nonref_flags, __pyx_v_variant_ct, __pyx_v_sample_ct, __pyx_v_phase_dosage_gflags, __pyx_v_nonref_flags_storage, __pyx_v_self->_state_ptr, (&__pyx_v_alloc_cacheline_ct), (&__pyx_v_max_vrec_len));

  /* "pgenlib.pyx":1194
 *         cdef uint32_t max_vrec_len
 *         cdef pglerr_t reterr = spgw_init_phase1(fname, NULL, self._nonref_flags, variant_ct, sample_ct, phase_dosage_gflags, nonref_flags_storage, self._state_ptr, &alloc_cacheline_ct, &max_vrec_len)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("spgw_init_phase1() error " + str(reterr))
 *         cdef uint32_t genovec_cacheline_ct = DIV_UP(sample_ct, kQuatersPerCacheline)
 */
  __pyx_t_1 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":1195
 *         cdef pglerr_t reterr = spgw_init_phase1(fname, NULL, self._nonref_flags, variant_ct, sample_ct, phase_dosage_gflags, nonref_flags_storage, self._state_ptr, &alloc_cacheline_ct, &max_vrec_len)
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("spgw_init_phase1() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         cdef uint32_t genovec_cacheline_ct = DIV_UP(sample_ct, kQuatersPerCacheline)
 *         cdef uint32_t dosage_vals_cacheline_ct = DIV_UP(sample_ct, (2 * kInt32PerCacheline))
 */
    __pyx_t_4 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_kp_s_spgw_init_phase1_error, __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":1194
 *         cdef uint32_t max_vrec_len
 *         cdef pglerr_t reterr = spgw_init_phase1(fname, NULL, self._nonref_flags, variant_ct, sample_ct, phase_dosage_gflags, nonref_flags_storage, self._state_ptr, &alloc_cacheline_ct, &max_vrec_len)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("spgw_init_phase1() error " + str(reterr))
 *         cdef uint32_t genovec_cacheline_ct = DIV_UP(sample_ct, kQuatersPerCacheline)
 */
  }

  /* "pgenlib.pyx":1196
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("spgw_init_phase1() error " + str(reterr))
 *         cdef uint32_t genovec_cacheline_ct = DIV_UP(sample_ct, kQuatersPerCacheline)             # <<<<<<<<<<<<<<
 *         cdef uint32_t dosage_vals_cacheline_ct = DIV_UP(sample_ct, (2 * kInt32PerCacheline))
 *         cdef unsigned char* spgw_alloc
 */
  __pyx_v_genovec_cacheline_ct = DIV_UP(__pyx_v_sample_ct, plink2::kQuatersPerCacheline);

  /* "pgenlib.pyx":1197
 *             raise RuntimeError("spgw_init_phase1() error " + str(reterr))
 *         cdef uint32_t genovec_cacheline_ct = DIV_UP(sample_ct, kQuatersPerCacheline)
 *         cdef uint32_t dosage_vals_cacheline_ct = DIV_UP(sample_ct, (2 * kInt32PerCacheline))             # <<<<<<<<<<<<<<
 *         cdef unsigned char* spgw_alloc
 *         if cachealigned_malloc((alloc_cacheline_ct + genovec_cacheline_ct + 3 * bitvec_cacheline_ct + dosage_vals_cacheline_ct) * kCacheline, &spgw_alloc):
 */
  __pyx_v_dosage_vals_cacheline_ct = DIV_UP(__pyx_v_sample_ct, (2 * plink2::kInt32PerCacheline));

  /* "pgenlib.pyx":1199
 *         cdef uint32_t dosage_vals_cacheline_ct = DIV_UP(sample_ct, (2 * kInt32PerCacheline))
 *         cdef unsigned char* spgw_alloc
 *         if cachealigned_malloc((alloc_cacheline_ct + genovec_cacheline_ct + 3 * bitvec_cacheline_ct + dosage_vals_cacheline_ct) * kCacheline, &spgw_alloc):             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         spgw_init_phase2(max_vrec_len, self._state_ptr, spgw_alloc)
 */
  __pyx_t_1 = (plink2::cachealigned_malloc(((((__pyx_v_alloc_cacheline_ct + __pyx_v_genovec_cacheline_ct) + (3 * __pyx_v_bitvec_cacheline_ct)) + __pyx_v_dosage_vals_cacheline_ct) * plink2::kCacheline), (&__pyx_v_spgw_alloc)) != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":1200
 *         cdef unsigned char* spgw_alloc
 *         if cachealigned_malloc((alloc_cacheline_ct + genovec_cacheline_ct + 3 * bitvec_cacheline_ct + dosage_vals_cacheline_ct) * kCacheline, &spgw_alloc):
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         spgw_init_phase2(max_vrec_len, self._state_ptr, spgw_alloc)
 *         self._genovec = <uintptr_t*>(&(spgw_alloc[alloc_cacheline_ct * kCacheline]))
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":1199
 *         cdef uint32_t dosage_vals_cacheline_ct = DIV_UP(sample_ct, (2 * kInt32PerCacheline))
 *         cdef unsigned char* spgw_alloc
 *         if cachealigned_malloc((alloc_cacheline_ct + genovec_cacheline_ct + 3 * bitvec_cacheline_ct + dosage_vals_cacheline_ct) * kCacheline, &spgw_alloc):             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         spgw_init_phase2(max_vrec_len, self._state_ptr, spgw_alloc)
 */
  }

  /* "pgenlib.pyx":1201
 *         if cachealigned_malloc((alloc_cacheline_ct + genovec_cacheline_ct + 3 * bitvec_cacheline_ct + dosage_vals_cacheline_ct) * kCacheline, &spgw_alloc):
 *             raise MemoryError()
 *         spgw_init_phase2(max_vrec_len, self._state_ptr, spgw_alloc)             # <<<<<<<<<<<<<<
 *         self._genovec = <uintptr_t*>(&(spgw_alloc[alloc_cacheline_ct * kCacheline]))
 *         self._phasepresent = <uintptr_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct) * kCacheline]))
 */
  plink2::spgw_init_phase2(__pyx_v_max_vrec_len, __pyx_v_self->_state_ptr, __pyx_v_spgw_alloc);

  /* "pgenlib.pyx":1202
 *             raise MemoryError()
 *         spgw_init_phase2(max_vrec_len, self._state_ptr, spgw_alloc)
 *         self._genovec = <uintptr_t*>(&(spgw_alloc[alloc_cacheline_ct * kCacheline]))             # <<<<<<<<<<<<<<
 *         self._phasepresent = <uintptr_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct) * kCacheline]))
 *         self._phaseinfo = <uintptr_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct + bitvec_cacheline_ct) * kCacheline]))
 */
  __pyx_v_self->_genovec = ((uintptr_t *)(&(__pyx_v_spgw_alloc[(__pyx_v_alloc_cacheline_ct * plink2::kCacheline)])));

  /* "pgenlib.pyx":1203
 *         spgw_init_phase2(max_vrec_len, self._state_ptr, spgw_alloc)
 *         self._genovec = <uintptr_t*>(&(spgw_alloc[alloc_cacheline_ct * kCacheline]))
 *         self._phasepresent = <uintptr_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct) * kCacheline]))             # <<<<<<<<<<<<<<
 *         self._phaseinfo = <uintptr_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct + bitvec_cacheline_ct) * kCacheline]))
 *         self._dosage_present = <uintptr_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct + 2 * bitvec_cacheline_ct) * kCacheline]))
 */
  __pyx_v_self->_phasepresent = ((uintptr_t *)(&(__pyx_v_spgw_alloc[((__pyx_v_alloc_cacheline_ct + __pyx_v_genovec_cacheline_ct) * plink2::kCacheline)])));

  /* "pgenlib.pyx":1204
 *         self._genovec = <uintptr_t*>(&(spgw_alloc[alloc_cacheline_ct * kCacheline]))
 *         self._phasepresent = <uintptr_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct) * kCacheline]))
 *         self._phaseinfo = <uintptr_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct + bitvec_cacheline_ct) * kCacheline]))             # <<<<<<<<<<<<<<
 *         self._dosage_present = <uintptr_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct + 2 * bitvec_cacheline_ct) * kCacheline]))
 *         self._dosage_vals = <uint16_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct + 3 * bitvec_cacheline_ct) * kCacheline]))
 */
  __pyx_v_self->_phaseinfo = ((uintptr_t *)(&(__pyx_v_spgw_alloc[(((__pyx_v_alloc_cacheline_ct + __pyx_v_genovec_cacheline_ct) + __pyx_v_bitvec_cacheline_ct) * plink2::kCacheline)])));

  /* "pgenlib.pyx":1205
 *         self._phasepresent = <uintptr_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct) * kCacheline]))
 *         self._phaseinfo = <uintptr_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct + bitvec_cacheline_ct) * kCacheline]))
 *         self._dosage_present = <uintptr_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct + 2 * bitvec_cacheline_ct) * kCacheline]))             # <<<<<<<<<<<<<<
 *         self._dosage_vals = <uint16_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct + 3 * bitvec_cacheline_ct) * kCacheline]))
 *         return
 */
  __pyx_v_self->_dosage_present = ((uintptr_t *)(&(__pyx_v_spgw_alloc[(((__pyx_v_alloc_cacheline_ct + __pyx_v_genovec_cacheline_ct) + (2 * __pyx_v_bitvec_cacheline_ct)) * plink2::kCacheline)])));

  /* "pgenlib.pyx":1206
 *         self._phaseinfo = <uintptr_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct + bitvec_cacheline_ct) * kCacheline]))
 *         self._dosage_present = <uintptr_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct + 2 * bitvec_cacheline_ct) * kCacheline]))
 *         self._dosage_vals = <uint16_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct + 3 * bitvec_cacheline_ct) * kCacheline]))             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_v_self->_dosage_vals = ((uint16_t *)(&(__pyx_v_spgw_alloc[(((__pyx_v_alloc_cacheline_ct + __pyx_v_genovec_cacheline_ct) + (3 * __pyx_v_bitvec_cacheline_ct)) * plink2::kCacheline)])));

  /* "pgenlib.pyx":1207
 *         self._dosage_present = <uintptr_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct + 2 * bitvec_cacheline_ct) * kCacheline]))
 *         self._dosage_vals = <uint16_t*>(&(spgw_alloc[(alloc_cacheline_ct + genovec_cacheline_ct + 3 * bitvec_cacheline_ct) * kCacheline]))
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "pgenlib.pyx":1154
 * 
 * 
 *     def __cinit__(self, bytes filename, uint32_t sample_ct,             # <<<<<<<<<<<<<<
 *                   uint32_t variant_ct, object nonref_flags,
 *                   object allele_idx_offsets = None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pgenlib.PgenWriter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_uii);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1210
 * 
 * 
 *     cpdef __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

static PyObject *__pyx_pw_7pgenlib_10PgenWriter_3__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter___enter__(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__enter__", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_3__enter__)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1211
 * 
 *     cpdef __enter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pgenlib.pyx":1210
 * 
 * 
 *     cpdef __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pgenlib.PgenWriter.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_3__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_3__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pgenlib_10PgenWriter_2__enter__(((struct __pyx_obj_7pgenlib_PgenWriter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenWriter_2__enter__(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__enter__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenWriter___enter__(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pgenlib.PgenWriter.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1214
 * 
 * 
 *     cpdef append_biallelic(self, np.ndarray[np.int8_t,mode="c"] geno_int8):             # <<<<<<<<<<<<<<
 *         cdef int8_t* genobytes = &(geno_int8[0])
 *         bytes_to_genoarr_unsafe(genobytes, self._state_ptr[0].pwc.sample_ct, self._genovec)
 */

static PyObject *__pyx_pw_7pgenlib_10PgenWriter_5append_biallelic(PyObject *__pyx_v_self, PyObject *__pyx_v_geno_int8); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_biallelic(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_geno_int8, int __pyx_skip_dispatch) {
  int8_t *__pyx_v_genobytes;
  plink2::pglerr_t __pyx_v_reterr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_geno_int8;
  __Pyx_Buffer __pyx_pybuffer_geno_int8;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_biallelic", 0);
  __pyx_pybuffer_geno_int8.pybuffer.buf = NULL;
  __pyx_pybuffer_geno_int8.refcount = 0;
  __pyx_pybuffernd_geno_int8.data = NULL;
  __pyx_pybuffernd_geno_int8.rcbuffer = &__pyx_pybuffer_geno_int8;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_geno_int8.rcbuffer->pybuffer, (PyObject*)__pyx_v_geno_int8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_geno_int8.diminfo[0].strides = __pyx_pybuffernd_geno_int8.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_geno_int8.diminfo[0].shape = __pyx_pybuffernd_geno_int8.rcbuffer->pybuffer.shape[0];
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_append_biallelic); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_5append_biallelic)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_geno_int8)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_geno_int8));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_geno_int8));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_geno_int8));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1215
 * 
 *     cpdef append_biallelic(self, np.ndarray[np.int8_t,mode="c"] geno_int8):
 *         cdef int8_t* genobytes = &(geno_int8[0])             # <<<<<<<<<<<<<<
 *         bytes_to_genoarr_unsafe(genobytes, self._state_ptr[0].pwc.sample_ct, self._genovec)
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec(self._genovec, self._state_ptr)
 */
  __pyx_t_6 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_pybuffernd_geno_int8.diminfo[0].shape;
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_geno_int8.diminfo[0].shape)) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_genobytes = (&(*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_int8_t *, __pyx_pybuffernd_geno_int8.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_geno_int8.diminfo[0].strides)));

  /* "pgenlib.pyx":1216
 *     cpdef append_biallelic(self, np.ndarray[np.int8_t,mode="c"] geno_int8):
 *         cdef int8_t* genobytes = &(geno_int8[0])
 *         bytes_to_genoarr_unsafe(genobytes, self._state_ptr[0].pwc.sample_ct, self._genovec)             # <<<<<<<<<<<<<<
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec(self._genovec, self._state_ptr)
 *         if reterr != kPglRetSuccess:
 */
  plink2::bytes_to_genoarr_unsafe(__pyx_v_genobytes, (__pyx_v_self->_state_ptr[0]).pwc.sample_ct, __pyx_v_self->_genovec);

  /* "pgenlib.pyx":1217
 *         cdef int8_t* genobytes = &(geno_int8[0])
 *         bytes_to_genoarr_unsafe(genobytes, self._state_ptr[0].pwc.sample_ct, self._genovec)
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec(self._genovec, self._state_ptr)             # <<<<<<<<<<<<<<
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("append_biallelic() error " + str(reterr))
 */
  __pyx_v_reterr = plink2::spgw_append_biallelic_genovec(__pyx_v_self->_genovec, __pyx_v_self->_state_ptr);

  /* "pgenlib.pyx":1218
 *         bytes_to_genoarr_unsafe(genobytes, self._state_ptr[0].pwc.sample_ct, self._genovec)
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec(self._genovec, self._state_ptr)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("append_biallelic() error " + str(reterr))
 *         return
 */
  __pyx_t_8 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
  if (__pyx_t_8) {

    /* "pgenlib.pyx":1219
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec(self._genovec, self._state_ptr)
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("append_biallelic() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_append_biallelic_error, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":1218
 *         bytes_to_genoarr_unsafe(genobytes, self._state_ptr[0].pwc.sample_ct, self._genovec)
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec(self._genovec, self._state_ptr)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("append_biallelic() error " + str(reterr))
 *         return
 */
  }

  /* "pgenlib.pyx":1220
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("append_biallelic() error " + str(reterr))
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1214
 * 
 * 
 *     cpdef append_biallelic(self, np.ndarray[np.int8_t,mode="c"] geno_int8):             # <<<<<<<<<<<<<<
 *         cdef int8_t* genobytes = &(geno_int8[0])
 *         bytes_to_genoarr_unsafe(genobytes, self._state_ptr[0].pwc.sample_ct, self._genovec)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int8.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_biallelic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int8.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_5append_biallelic(PyObject *__pyx_v_self, PyObject *__pyx_v_geno_int8); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_5append_biallelic(PyObject *__pyx_v_self, PyObject *__pyx_v_geno_int8) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append_biallelic (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geno_int8), __pyx_ptype_5numpy_ndarray, 1, "geno_int8", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenWriter_4append_biallelic(((struct __pyx_obj_7pgenlib_PgenWriter *)__pyx_v_self), ((PyArrayObject *)__pyx_v_geno_int8));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenWriter_4append_biallelic(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_geno_int8) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_geno_int8;
  __Pyx_Buffer __pyx_pybuffer_geno_int8;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_biallelic", 0);
  __pyx_pybuffer_geno_int8.pybuffer.buf = NULL;
  __pyx_pybuffer_geno_int8.refcount = 0;
  __pyx_pybuffernd_geno_int8.data = NULL;
  __pyx_pybuffernd_geno_int8.rcbuffer = &__pyx_pybuffer_geno_int8;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_geno_int8.rcbuffer->pybuffer, (PyObject*)__pyx_v_geno_int8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_geno_int8.diminfo[0].strides = __pyx_pybuffernd_geno_int8.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_geno_int8.diminfo[0].shape = __pyx_pybuffernd_geno_int8.rcbuffer->pybuffer.shape[0];
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenWriter_append_biallelic(__pyx_v_self, __pyx_v_geno_int8, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int8.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_biallelic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int8.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1223
 * 
 * 
 *     cpdef append_alleles(self, np.ndarray[np.int32_t,mode="c"] allele_int32, bint all_phased = False):             # <<<<<<<<<<<<<<
 *         cdef int32_t* allele_codes = <int32_t*>(&(allele_int32[0]))
 *         cdef uintptr_t* genovec = self._genovec
 */

static PyObject *__pyx_pw_7pgenlib_10PgenWriter_7append_alleles(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_alleles(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_allele_int32, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenWriter_append_alleles *__pyx_optional_args) {
  int __pyx_v_all_phased = ((int)0);
  int32_t *__pyx_v_allele_codes;
  uintptr_t *__pyx_v_genovec;
  plink2::pglerr_t __pyx_v_reterr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32;
  __Pyx_Buffer __pyx_pybuffer_allele_int32;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  uintptr_t *__pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_alleles", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_all_phased = __pyx_optional_args->all_phased;
    }
  }
  __pyx_pybuffer_allele_int32.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32.refcount = 0;
  __pyx_pybuffernd_allele_int32.data = NULL;
  __pyx_pybuffernd_allele_int32.rcbuffer = &__pyx_pybuffer_allele_int32;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32.diminfo[0].strides = __pyx_pybuffernd_allele_int32.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32.diminfo[0].shape = __pyx_pybuffernd_allele_int32.rcbuffer->pybuffer.shape[0];
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_append_alleles); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_7append_alleles)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_all_phased); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_allele_int32));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_allele_int32));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_allele_int32));
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1224
 * 
 *     cpdef append_alleles(self, np.ndarray[np.int32_t,mode="c"] allele_int32, bint all_phased = False):
 *         cdef int32_t* allele_codes = <int32_t*>(&(allele_int32[0]))             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef pglerr_t reterr
 */
  __pyx_t_8 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_pybuffernd_allele_int32.diminfo[0].shape;
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_8 >= __pyx_pybuffernd_allele_int32.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_allele_codes = ((int32_t *)(&(*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_allele_int32.rcbuffer->pybuffer.buf, __pyx_t_8, __pyx_pybuffernd_allele_int32.diminfo[0].strides))));

  /* "pgenlib.pyx":1225
 *     cpdef append_alleles(self, np.ndarray[np.int32_t,mode="c"] allele_int32, bint all_phased = False):
 *         cdef int32_t* allele_codes = <int32_t*>(&(allele_int32[0]))
 *         cdef uintptr_t* genovec = self._genovec             # <<<<<<<<<<<<<<
 *         cdef pglerr_t reterr
 *         if not all_phased:
 */
  __pyx_t_10 = __pyx_v_self->_genovec;
  __pyx_v_genovec = __pyx_t_10;

  /* "pgenlib.pyx":1227
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef pglerr_t reterr
 *         if not all_phased:             # <<<<<<<<<<<<<<
 *             allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, NULL, NULL)
 *             reterr = spgw_append_biallelic_genovec(genovec, self._state_ptr)
 */
  __pyx_t_11 = ((!(__pyx_v_all_phased != 0)) != 0);
  if (__pyx_t_11) {

    /* "pgenlib.pyx":1228
 *         cdef pglerr_t reterr
 *         if not all_phased:
 *             allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, NULL, NULL)             # <<<<<<<<<<<<<<
 *             reterr = spgw_append_biallelic_genovec(genovec, self._state_ptr)
 *         else:
 */
    plink2::allele_codes_to_genoarr_unsafe(__pyx_v_allele_codes, NULL, (__pyx_v_self->_state_ptr[0]).pwc.sample_ct, __pyx_v_genovec, NULL, NULL);

    /* "pgenlib.pyx":1229
 *         if not all_phased:
 *             allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, NULL, NULL)
 *             reterr = spgw_append_biallelic_genovec(genovec, self._state_ptr)             # <<<<<<<<<<<<<<
 *         else:
 *             allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, self._phasepresent, self._phaseinfo)
 */
    __pyx_v_reterr = plink2::spgw_append_biallelic_genovec(__pyx_v_genovec, __pyx_v_self->_state_ptr);

    /* "pgenlib.pyx":1227
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef pglerr_t reterr
 *         if not all_phased:             # <<<<<<<<<<<<<<
 *             allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, NULL, NULL)
 *             reterr = spgw_append_biallelic_genovec(genovec, self._state_ptr)
 */
    goto __pyx_L3;
  }

  /* "pgenlib.pyx":1231
 *             reterr = spgw_append_biallelic_genovec(genovec, self._state_ptr)
 *         else:
 *             allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, self._phasepresent, self._phaseinfo)             # <<<<<<<<<<<<<<
 *             reterr = spgw_append_biallelic_genovec_hphase(genovec, self._phasepresent, self._phaseinfo, self._state_ptr)
 *         if reterr != kPglRetSuccess:
 */
  /*else*/ {
    plink2::allele_codes_to_genoarr_unsafe(__pyx_v_allele_codes, NULL, (__pyx_v_self->_state_ptr[0]).pwc.sample_ct, __pyx_v_genovec, __pyx_v_self->_phasepresent, __pyx_v_self->_phaseinfo);

    /* "pgenlib.pyx":1232
 *         else:
 *             allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, self._phasepresent, self._phaseinfo)
 *             reterr = spgw_append_biallelic_genovec_hphase(genovec, self._phasepresent, self._phaseinfo, self._state_ptr)             # <<<<<<<<<<<<<<
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("append_alleles() error " + str(reterr))
 */
    __pyx_v_reterr = plink2::spgw_append_biallelic_genovec_hphase(__pyx_v_genovec, __pyx_v_self->_phasepresent, __pyx_v_self->_phaseinfo, __pyx_v_self->_state_ptr);
  }
  __pyx_L3:;

  /* "pgenlib.pyx":1233
 *             allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, self._phasepresent, self._phaseinfo)
 *             reterr = spgw_append_biallelic_genovec_hphase(genovec, self._phasepresent, self._phaseinfo, self._state_ptr)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("append_alleles() error " + str(reterr))
 *         return
 */
  __pyx_t_11 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
  if (__pyx_t_11) {

    /* "pgenlib.pyx":1234
 *             reterr = spgw_append_biallelic_genovec_hphase(genovec, self._phasepresent, self._phaseinfo, self._state_ptr)
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("append_alleles() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_append_alleles_error, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":1233
 *             allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, self._phasepresent, self._phaseinfo)
 *             reterr = spgw_append_biallelic_genovec_hphase(genovec, self._phasepresent, self._phaseinfo, self._state_ptr)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("append_alleles() error " + str(reterr))
 *         return
 */
  }

  /* "pgenlib.pyx":1235
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("append_alleles() error " + str(reterr))
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1223
 * 
 * 
 *     cpdef append_alleles(self, np.ndarray[np.int32_t,mode="c"] allele_int32, bint all_phased = False):             # <<<<<<<<<<<<<<
 *         cdef int32_t* allele_codes = <int32_t*>(&(allele_int32[0]))
 *         cdef uintptr_t* genovec = self._genovec
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_alleles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_7append_alleles(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_7append_alleles(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_allele_int32 = 0;
  int __pyx_v_all_phased;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append_alleles (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allele_int32,&__pyx_n_s_all_phased,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allele_int32)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_all_phased);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "append_alleles") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allele_int32 = ((PyArrayObject *)values[0]);
    if (values[1]) {
      __pyx_v_all_phased = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_all_phased == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_all_phased = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("append_alleles", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_alleles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_allele_int32), __pyx_ptype_5numpy_ndarray, 1, "allele_int32", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenWriter_6append_alleles(((struct __pyx_obj_7pgenlib_PgenWriter *)__pyx_v_self), __pyx_v_allele_int32, __pyx_v_all_phased);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenWriter_6append_alleles(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_allele_int32, int __pyx_v_all_phased) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32;
  __Pyx_Buffer __pyx_pybuffer_allele_int32;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_7pgenlib_10PgenWriter_append_alleles __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_alleles", 0);
  __pyx_pybuffer_allele_int32.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32.refcount = 0;
  __pyx_pybuffernd_allele_int32.data = NULL;
  __pyx_pybuffernd_allele_int32.rcbuffer = &__pyx_pybuffer_allele_int32;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32.diminfo[0].strides = __pyx_pybuffernd_allele_int32.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32.diminfo[0].shape = __pyx_pybuffernd_allele_int32.rcbuffer->pybuffer.shape[0];
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.all_phased = __pyx_v_all_phased;
  __pyx_t_1 = __pyx_vtabptr_7pgenlib_PgenWriter->append_alleles(__pyx_v_self, __pyx_v_allele_int32, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_alleles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1238
 * 
 * 
 *     cpdef append_partially_phased(self, np.ndarray[np.int32_t,mode="c"] allele_int32, np.ndarray[np.uint8_t,cast=True] phasepresent):             # <<<<<<<<<<<<<<
 *         cdef int32_t* allele_codes = <int32_t*>(&(allele_int32[0]))
 *         cdef unsigned char* phasepresent_bytes = <unsigned char*>(&(phasepresent[0]))
 */

static PyObject *__pyx_pw_7pgenlib_10PgenWriter_9append_partially_phased(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_partially_phased(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_allele_int32, PyArrayObject *__pyx_v_phasepresent, int __pyx_skip_dispatch) {
  int32_t *__pyx_v_allele_codes;
  unsigned char *__pyx_v_phasepresent_bytes;
  uintptr_t *__pyx_v_genovec;
  uintptr_t *__pyx_v_phasepresent_buf;
  uintptr_t *__pyx_v_phaseinfo;
  plink2::pglerr_t __pyx_v_reterr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32;
  __Pyx_Buffer __pyx_pybuffer_allele_int32;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_phasepresent;
  __Pyx_Buffer __pyx_pybuffer_phasepresent;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  uintptr_t *__pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_partially_phased", 0);
  __pyx_pybuffer_allele_int32.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32.refcount = 0;
  __pyx_pybuffernd_allele_int32.data = NULL;
  __pyx_pybuffernd_allele_int32.rcbuffer = &__pyx_pybuffer_allele_int32;
  __pyx_pybuffer_phasepresent.pybuffer.buf = NULL;
  __pyx_pybuffer_phasepresent.refcount = 0;
  __pyx_pybuffernd_phasepresent.data = NULL;
  __pyx_pybuffernd_phasepresent.rcbuffer = &__pyx_pybuffer_phasepresent;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32.diminfo[0].strides = __pyx_pybuffernd_allele_int32.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32.diminfo[0].shape = __pyx_pybuffernd_allele_int32.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_phasepresent.rcbuffer->pybuffer, (PyObject*)__pyx_v_phasepresent, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 1, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_phasepresent.diminfo[0].strides = __pyx_pybuffernd_phasepresent.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_phasepresent.diminfo[0].shape = __pyx_pybuffernd_phasepresent.rcbuffer->pybuffer.shape[0];
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_append_partially_phased); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_9append_partially_phased)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_allele_int32));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_allele_int32));
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_allele_int32));
      __Pyx_INCREF(((PyObject *)__pyx_v_phasepresent));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_phasepresent));
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_phasepresent));
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1239
 * 
 *     cpdef append_partially_phased(self, np.ndarray[np.int32_t,mode="c"] allele_int32, np.ndarray[np.uint8_t,cast=True] phasepresent):
 *         cdef int32_t* allele_codes = <int32_t*>(&(allele_int32[0]))             # <<<<<<<<<<<<<<
 *         cdef unsigned char* phasepresent_bytes = <unsigned char*>(&(phasepresent[0]))
 *         cdef uintptr_t* genovec = self._genovec
 */
  __pyx_t_7 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_allele_int32.diminfo[0].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_allele_int32.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_allele_codes = ((int32_t *)(&(*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_allele_int32.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_allele_int32.diminfo[0].strides))));

  /* "pgenlib.pyx":1240
 *     cpdef append_partially_phased(self, np.ndarray[np.int32_t,mode="c"] allele_int32, np.ndarray[np.uint8_t,cast=True] phasepresent):
 *         cdef int32_t* allele_codes = <int32_t*>(&(allele_int32[0]))
 *         cdef unsigned char* phasepresent_bytes = <unsigned char*>(&(phasepresent[0]))             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* phasepresent_buf = self._phasepresent
 */
  __pyx_t_9 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd_phasepresent.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_phasepresent.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_phasepresent_bytes = ((unsigned char *)(&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_phasepresent.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_phasepresent.diminfo[0].strides))));

  /* "pgenlib.pyx":1241
 *         cdef int32_t* allele_codes = <int32_t*>(&(allele_int32[0]))
 *         cdef unsigned char* phasepresent_bytes = <unsigned char*>(&(phasepresent[0]))
 *         cdef uintptr_t* genovec = self._genovec             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* phasepresent_buf = self._phasepresent
 *         cdef uintptr_t* phaseinfo = self._phaseinfo
 */
  __pyx_t_10 = __pyx_v_self->_genovec;
  __pyx_v_genovec = __pyx_t_10;

  /* "pgenlib.pyx":1242
 *         cdef unsigned char* phasepresent_bytes = <unsigned char*>(&(phasepresent[0]))
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* phasepresent_buf = self._phasepresent             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* phaseinfo = self._phaseinfo
 *         allele_codes_to_genoarr_unsafe(allele_codes, phasepresent_bytes, self._state_ptr[0].pwc.sample_ct, genovec, phasepresent_buf, phaseinfo)
 */
  __pyx_t_10 = __pyx_v_self->_phasepresent;
  __pyx_v_phasepresent_buf = __pyx_t_10;

  /* "pgenlib.pyx":1243
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* phasepresent_buf = self._phasepresent
 *         cdef uintptr_t* phaseinfo = self._phaseinfo             # <<<<<<<<<<<<<<
 *         allele_codes_to_genoarr_unsafe(allele_codes, phasepresent_bytes, self._state_ptr[0].pwc.sample_ct, genovec, phasepresent_buf, phaseinfo)
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec_hphase(genovec, phasepresent_buf, phaseinfo, self._state_ptr)
 */
  __pyx_t_10 = __pyx_v_self->_phaseinfo;
  __pyx_v_phaseinfo = __pyx_t_10;

  /* "pgenlib.pyx":1244
 *         cdef uintptr_t* phasepresent_buf = self._phasepresent
 *         cdef uintptr_t* phaseinfo = self._phaseinfo
 *         allele_codes_to_genoarr_unsafe(allele_codes, phasepresent_bytes, self._state_ptr[0].pwc.sample_ct, genovec, phasepresent_buf, phaseinfo)             # <<<<<<<<<<<<<<
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec_hphase(genovec, phasepresent_buf, phaseinfo, self._state_ptr)
 *         if reterr != kPglRetSuccess:
 */
  plink2::allele_codes_to_genoarr_unsafe(__pyx_v_allele_codes, __pyx_v_phasepresent_bytes, (__pyx_v_self->_state_ptr[0]).pwc.sample_ct, __pyx_v_genovec, __pyx_v_phasepresent_buf, __pyx_v_phaseinfo);

  /* "pgenlib.pyx":1245
 *         cdef uintptr_t* phaseinfo = self._phaseinfo
 *         allele_codes_to_genoarr_unsafe(allele_codes, phasepresent_bytes, self._state_ptr[0].pwc.sample_ct, genovec, phasepresent_buf, phaseinfo)
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec_hphase(genovec, phasepresent_buf, phaseinfo, self._state_ptr)             # <<<<<<<<<<<<<<
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("append_partially_phased() error " + str(reterr))
 */
  __pyx_v_reterr = plink2::spgw_append_biallelic_genovec_hphase(__pyx_v_genovec, __pyx_v_phasepresent_buf, __pyx_v_phaseinfo, __pyx_v_self->_state_ptr);

  /* "pgenlib.pyx":1246
 *         allele_codes_to_genoarr_unsafe(allele_codes, phasepresent_bytes, self._state_ptr[0].pwc.sample_ct, genovec, phasepresent_buf, phaseinfo)
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec_hphase(genovec, phasepresent_buf, phaseinfo, self._state_ptr)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("append_partially_phased() error " + str(reterr))
 *         return
 */
  __pyx_t_11 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
  if (__pyx_t_11) {

    /* "pgenlib.pyx":1247
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec_hphase(genovec, phasepresent_buf, phaseinfo, self._state_ptr)
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("append_partially_phased() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_append_partially_phased_error, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":1246
 *         allele_codes_to_genoarr_unsafe(allele_codes, phasepresent_bytes, self._state_ptr[0].pwc.sample_ct, genovec, phasepresent_buf, phaseinfo)
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec_hphase(genovec, phasepresent_buf, phaseinfo, self._state_ptr)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("append_partially_phased() error " + str(reterr))
 *         return
 */
  }

  /* "pgenlib.pyx":1248
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("append_partially_phased() error " + str(reterr))
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1238
 * 
 * 
 *     cpdef append_partially_phased(self, np.ndarray[np.int32_t,mode="c"] allele_int32, np.ndarray[np.uint8_t,cast=True] phasepresent):             # <<<<<<<<<<<<<<
 *         cdef int32_t* allele_codes = <int32_t*>(&(allele_int32[0]))
 *         cdef unsigned char* phasepresent_bytes = <unsigned char*>(&(phasepresent[0]))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_partially_phased", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_9append_partially_phased(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_9append_partially_phased(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_allele_int32 = 0;
  PyArrayObject *__pyx_v_phasepresent = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append_partially_phased (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allele_int32,&__pyx_n_s_phasepresent,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allele_int32)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phasepresent)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("append_partially_phased", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "append_partially_phased") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_allele_int32 = ((PyArrayObject *)values[0]);
    __pyx_v_phasepresent = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("append_partially_phased", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_partially_phased", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_allele_int32), __pyx_ptype_5numpy_ndarray, 1, "allele_int32", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phasepresent), __pyx_ptype_5numpy_ndarray, 1, "phasepresent", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenWriter_8append_partially_phased(((struct __pyx_obj_7pgenlib_PgenWriter *)__pyx_v_self), __pyx_v_allele_int32, __pyx_v_phasepresent);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenWriter_8append_partially_phased(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_allele_int32, PyArrayObject *__pyx_v_phasepresent) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32;
  __Pyx_Buffer __pyx_pybuffer_allele_int32;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_phasepresent;
  __Pyx_Buffer __pyx_pybuffer_phasepresent;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_partially_phased", 0);
  __pyx_pybuffer_allele_int32.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32.refcount = 0;
  __pyx_pybuffernd_allele_int32.data = NULL;
  __pyx_pybuffernd_allele_int32.rcbuffer = &__pyx_pybuffer_allele_int32;
  __pyx_pybuffer_phasepresent.pybuffer.buf = NULL;
  __pyx_pybuffer_phasepresent.refcount = 0;
  __pyx_pybuffernd_phasepresent.data = NULL;
  __pyx_pybuffernd_phasepresent.rcbuffer = &__pyx_pybuffer_phasepresent;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32.diminfo[0].strides = __pyx_pybuffernd_allele_int32.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32.diminfo[0].shape = __pyx_pybuffernd_allele_int32.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_phasepresent.rcbuffer->pybuffer, (PyObject*)__pyx_v_phasepresent, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 1, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_phasepresent.diminfo[0].strides = __pyx_pybuffernd_phasepresent.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_phasepresent.diminfo[0].shape = __pyx_pybuffernd_phasepresent.rcbuffer->pybuffer.shape[0];
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenWriter_append_partially_phased(__pyx_v_self, __pyx_v_allele_int32, __pyx_v_phasepresent, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_partially_phased", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1251
 * 
 * 
 *     cdef append_dosages_internal32(self, np.ndarray[np.float32_t,mode="c"] floatarr):             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* dosage_present = self._dosage_present
 */

static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_dosages_internal32(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_floatarr) {
  uintptr_t *__pyx_v_genovec;
  uintptr_t *__pyx_v_dosage_present;
  uint16_t *__pyx_v_dosage_vals;
  uint32_t __pyx_v_dosage_ct;
  plink2::pglerr_t __pyx_v_reterr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_floatarr;
  __Pyx_Buffer __pyx_pybuffer_floatarr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uintptr_t *__pyx_t_1;
  uint16_t *__pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_dosages_internal32", 0);
  __pyx_pybuffer_floatarr.pybuffer.buf = NULL;
  __pyx_pybuffer_floatarr.refcount = 0;
  __pyx_pybuffernd_floatarr.data = NULL;
  __pyx_pybuffernd_floatarr.rcbuffer = &__pyx_pybuffer_floatarr;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_floatarr.rcbuffer->pybuffer, (PyObject*)__pyx_v_floatarr, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_floatarr.diminfo[0].strides = __pyx_pybuffernd_floatarr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_floatarr.diminfo[0].shape = __pyx_pybuffernd_floatarr.rcbuffer->pybuffer.shape[0];

  /* "pgenlib.pyx":1252
 * 
 *     cdef append_dosages_internal32(self, np.ndarray[np.float32_t,mode="c"] floatarr):
 *         cdef uintptr_t* genovec = self._genovec             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* dosage_present = self._dosage_present
 *         cdef uint16_t* dosage_vals = self._dosage_vals
 */
  __pyx_t_1 = __pyx_v_self->_genovec;
  __pyx_v_genovec = __pyx_t_1;

  /* "pgenlib.pyx":1253
 *     cdef append_dosages_internal32(self, np.ndarray[np.float32_t,mode="c"] floatarr):
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* dosage_present = self._dosage_present             # <<<<<<<<<<<<<<
 *         cdef uint16_t* dosage_vals = self._dosage_vals
 *         cdef uint32_t dosage_ct
 */
  __pyx_t_1 = __pyx_v_self->_dosage_present;
  __pyx_v_dosage_present = __pyx_t_1;

  /* "pgenlib.pyx":1254
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* dosage_present = self._dosage_present
 *         cdef uint16_t* dosage_vals = self._dosage_vals             # <<<<<<<<<<<<<<
 *         cdef uint32_t dosage_ct
 *         floats_to_dosage16(<float*>(&(floatarr[0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)
 */
  __pyx_t_2 = __pyx_v_self->_dosage_vals;
  __pyx_v_dosage_vals = __pyx_t_2;

  /* "pgenlib.pyx":1256
 *         cdef uint16_t* dosage_vals = self._dosage_vals
 *         cdef uint32_t dosage_ct
 *         floats_to_dosage16(<float*>(&(floatarr[0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)             # <<<<<<<<<<<<<<
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 *         if reterr != kPglRetSuccess:
 */
  __pyx_t_3 = 0;
  __pyx_t_4 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_pybuffernd_floatarr.diminfo[0].shape;
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_pybuffernd_floatarr.diminfo[0].shape)) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  plink2::floats_to_dosage16(((float *)(&(*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_floatarr.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_floatarr.diminfo[0].strides)))), (__pyx_v_self->_state_ptr[0]).pwc.sample_ct, 0x199A, __pyx_v_genovec, __pyx_v_dosage_present, __pyx_v_dosage_vals, (&__pyx_v_dosage_ct));

  /* "pgenlib.pyx":1257
 *         cdef uint32_t dosage_ct
 *         floats_to_dosage16(<float*>(&(floatarr[0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)             # <<<<<<<<<<<<<<
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("append_dosages() error " + str(reterr))
 */
  __pyx_v_reterr = plink2::spgw_append_biallelic_genovec_dosage16(__pyx_v_genovec, __pyx_v_dosage_present, __pyx_v_dosage_vals, __pyx_v_dosage_ct, __pyx_v_self->_state_ptr);

  /* "pgenlib.pyx":1258
 *         floats_to_dosage16(<float*>(&(floatarr[0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("append_dosages() error " + str(reterr))
 *         return
 */
  __pyx_t_5 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
  if (__pyx_t_5) {

    /* "pgenlib.pyx":1259
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("append_dosages() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_t_6 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_kp_s_append_dosages_error, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":1258
 *         floats_to_dosage16(<float*>(&(floatarr[0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("append_dosages() error " + str(reterr))
 *         return
 */
  }

  /* "pgenlib.pyx":1260
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("append_dosages() error " + str(reterr))
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cdef append_dosages_internal64(self, np.ndarray[np.float64_t,mode="c"] doublearr):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1251
 * 
 * 
 *     cdef append_dosages_internal32(self, np.ndarray[np.float32_t,mode="c"] floatarr):             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* dosage_present = self._dosage_present
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_floatarr.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_dosages_internal32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_floatarr.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1262
 *         return
 * 
 *     cdef append_dosages_internal64(self, np.ndarray[np.float64_t,mode="c"] doublearr):             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* dosage_present = self._dosage_present
 */

static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_dosages_internal64(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_doublearr) {
  uintptr_t *__pyx_v_genovec;
  uintptr_t *__pyx_v_dosage_present;
  uint16_t *__pyx_v_dosage_vals;
  uint32_t __pyx_v_dosage_ct;
  plink2::pglerr_t __pyx_v_reterr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_doublearr;
  __Pyx_Buffer __pyx_pybuffer_doublearr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uintptr_t *__pyx_t_1;
  uint16_t *__pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_dosages_internal64", 0);
  __pyx_pybuffer_doublearr.pybuffer.buf = NULL;
  __pyx_pybuffer_doublearr.refcount = 0;
  __pyx_pybuffernd_doublearr.data = NULL;
  __pyx_pybuffernd_doublearr.rcbuffer = &__pyx_pybuffer_doublearr;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_doublearr.rcbuffer->pybuffer, (PyObject*)__pyx_v_doublearr, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_doublearr.diminfo[0].strides = __pyx_pybuffernd_doublearr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_doublearr.diminfo[0].shape = __pyx_pybuffernd_doublearr.rcbuffer->pybuffer.shape[0];

  /* "pgenlib.pyx":1263
 * 
 *     cdef append_dosages_internal64(self, np.ndarray[np.float64_t,mode="c"] doublearr):
 *         cdef uintptr_t* genovec = self._genovec             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* dosage_present = self._dosage_present
 *         cdef uint16_t* dosage_vals = self._dosage_vals
 */
  __pyx_t_1 = __pyx_v_self->_genovec;
  __pyx_v_genovec = __pyx_t_1;

  /* "pgenlib.pyx":1264
 *     cdef append_dosages_internal64(self, np.ndarray[np.float64_t,mode="c"] doublearr):
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* dosage_present = self._dosage_present             # <<<<<<<<<<<<<<
 *         cdef uint16_t* dosage_vals = self._dosage_vals
 *         cdef uint32_t dosage_ct
 */
  __pyx_t_1 = __pyx_v_self->_dosage_present;
  __pyx_v_dosage_present = __pyx_t_1;

  /* "pgenlib.pyx":1265
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* dosage_present = self._dosage_present
 *         cdef uint16_t* dosage_vals = self._dosage_vals             # <<<<<<<<<<<<<<
 *         cdef uint32_t dosage_ct
 *         doubles_to_dosage16(<double*>(&(doublearr[0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)
 */
  __pyx_t_2 = __pyx_v_self->_dosage_vals;
  __pyx_v_dosage_vals = __pyx_t_2;

  /* "pgenlib.pyx":1267
 *         cdef uint16_t* dosage_vals = self._dosage_vals
 *         cdef uint32_t dosage_ct
 *         doubles_to_dosage16(<double*>(&(doublearr[0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)             # <<<<<<<<<<<<<<
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 *         if reterr != kPglRetSuccess:
 */
  __pyx_t_3 = 0;
  __pyx_t_4 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_pybuffernd_doublearr.diminfo[0].shape;
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_pybuffernd_doublearr.diminfo[0].shape)) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  plink2::doubles_to_dosage16(((double *)(&(*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_doublearr.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_doublearr.diminfo[0].strides)))), (__pyx_v_self->_state_ptr[0]).pwc.sample_ct, 0x199A, __pyx_v_genovec, __pyx_v_dosage_present, __pyx_v_dosage_vals, (&__pyx_v_dosage_ct));

  /* "pgenlib.pyx":1268
 *         cdef uint32_t dosage_ct
 *         doubles_to_dosage16(<double*>(&(doublearr[0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)             # <<<<<<<<<<<<<<
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("append_dosages() error " + str(reterr))
 */
  __pyx_v_reterr = plink2::spgw_append_biallelic_genovec_dosage16(__pyx_v_genovec, __pyx_v_dosage_present, __pyx_v_dosage_vals, __pyx_v_dosage_ct, __pyx_v_self->_state_ptr);

  /* "pgenlib.pyx":1269
 *         doubles_to_dosage16(<double*>(&(doublearr[0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("append_dosages() error " + str(reterr))
 *         return
 */
  __pyx_t_5 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
  if (__pyx_t_5) {

    /* "pgenlib.pyx":1270
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("append_dosages() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_t_6 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_kp_s_append_dosages_error, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pgenlib.pyx":1269
 *         doubles_to_dosage16(<double*>(&(doublearr[0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)
 *         cdef pglerr_t reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 *         if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("append_dosages() error " + str(reterr))
 *         return
 */
  }

  /* "pgenlib.pyx":1271
 *         if reterr != kPglRetSuccess:
 *             raise RuntimeError("append_dosages() error " + str(reterr))
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cpdef append_dosages(self, np.ndarray floatarr):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1262
 *         return
 * 
 *     cdef append_dosages_internal64(self, np.ndarray[np.float64_t,mode="c"] doublearr):             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* dosage_present = self._dosage_present
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_doublearr.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_dosages_internal64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_doublearr.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1273
 *         return
 * 
 *     cpdef append_dosages(self, np.ndarray floatarr):             # <<<<<<<<<<<<<<
 *         if floatarr.dtype == np.float32:
 *             self.append_dosages_internal32(floatarr)
 */

static PyObject *__pyx_pw_7pgenlib_10PgenWriter_11append_dosages(PyObject *__pyx_v_self, PyObject *__pyx_v_floatarr); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_dosages(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_floatarr, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_dosages", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_append_dosages); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_11append_dosages)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_floatarr)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_floatarr));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_floatarr));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_floatarr));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1274
 * 
 *     cpdef append_dosages(self, np.ndarray floatarr):
 *         if floatarr.dtype == np.float32:             # <<<<<<<<<<<<<<
 *             self.append_dosages_internal32(floatarr)
 *         elif floatarr.dtype == np.float64:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_floatarr), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "pgenlib.pyx":1275
 *     cpdef append_dosages(self, np.ndarray floatarr):
 *         if floatarr.dtype == np.float32:
 *             self.append_dosages_internal32(floatarr)             # <<<<<<<<<<<<<<
 *         elif floatarr.dtype == np.float64:
 *             self.append_dosages_internal64(floatarr)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7pgenlib_PgenWriter *)__pyx_v_self->__pyx_vtab)->append_dosages_internal32(__pyx_v_self, ((PyArrayObject *)__pyx_v_floatarr)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pgenlib.pyx":1274
 * 
 *     cpdef append_dosages(self, np.ndarray floatarr):
 *         if floatarr.dtype == np.float32:             # <<<<<<<<<<<<<<
 *             self.append_dosages_internal32(floatarr)
 *         elif floatarr.dtype == np.float64:
 */
    goto __pyx_L3;
  }

  /* "pgenlib.pyx":1276
 *         if floatarr.dtype == np.float32:
 *             self.append_dosages_internal32(floatarr)
 *         elif floatarr.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             self.append_dosages_internal64(floatarr)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_floatarr), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {

    /* "pgenlib.pyx":1277
 *             self.append_dosages_internal32(floatarr)
 *         elif floatarr.dtype == np.float64:
 *             self.append_dosages_internal64(floatarr)             # <<<<<<<<<<<<<<
 *         else:
 *             raise RuntimeError("Invalid append_dosages() dosage array element type (float32 or float64 expected).")
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_7pgenlib_PgenWriter *)__pyx_v_self->__pyx_vtab)->append_dosages_internal64(__pyx_v_self, ((PyArrayObject *)__pyx_v_floatarr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pgenlib.pyx":1276
 *         if floatarr.dtype == np.float32:
 *             self.append_dosages_internal32(floatarr)
 *         elif floatarr.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             self.append_dosages_internal64(floatarr)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pgenlib.pyx":1279
 *             self.append_dosages_internal64(floatarr)
 *         else:
 *             raise RuntimeError("Invalid append_dosages() dosage array element type (float32 or float64 expected).")             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "pgenlib.pyx":1280
 *         else:
 *             raise RuntimeError("Invalid append_dosages() dosage array element type (float32 or float64 expected).")
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1273
 *         return
 * 
 *     cpdef append_dosages(self, np.ndarray floatarr):             # <<<<<<<<<<<<<<
 *         if floatarr.dtype == np.float32:
 *             self.append_dosages_internal32(floatarr)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_dosages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_11append_dosages(PyObject *__pyx_v_self, PyObject *__pyx_v_floatarr); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_11append_dosages(PyObject *__pyx_v_self, PyObject *__pyx_v_floatarr) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append_dosages (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_floatarr), __pyx_ptype_5numpy_ndarray, 1, "floatarr", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenWriter_10append_dosages(((struct __pyx_obj_7pgenlib_PgenWriter *)__pyx_v_self), ((PyArrayObject *)__pyx_v_floatarr));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenWriter_10append_dosages(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_floatarr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_dosages", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenWriter_append_dosages(__pyx_v_self, __pyx_v_floatarr, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_dosages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1283
 * 
 * 
 *     cpdef append_biallelic_batch(self, np.ndarray[np.int8_t,mode="c",ndim=2] geno_int8_batch):             # <<<<<<<<<<<<<<
 *         cdef uint32_t batch_size = <uint32_t>geno_int8_batch.shape[0]
 *         cdef int8_t* genobytes
 */

static PyObject *__pyx_pw_7pgenlib_10PgenWriter_13append_biallelic_batch(PyObject *__pyx_v_self, PyObject *__pyx_v_geno_int8_batch); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_biallelic_batch(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_geno_int8_batch, int __pyx_skip_dispatch) {
  uint32_t __pyx_v_batch_size;
  int8_t *__pyx_v_genobytes;
  uint32_t __pyx_v_uii;
  plink2::pglerr_t __pyx_v_reterr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_geno_int8_batch;
  __Pyx_Buffer __pyx_pybuffer_geno_int8_batch;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  uint32_t __pyx_t_6;
  uint32_t __pyx_t_7;
  size_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_biallelic_batch", 0);
  __pyx_pybuffer_geno_int8_batch.pybuffer.buf = NULL;
  __pyx_pybuffer_geno_int8_batch.refcount = 0;
  __pyx_pybuffernd_geno_int8_batch.data = NULL;
  __pyx_pybuffernd_geno_int8_batch.rcbuffer = &__pyx_pybuffer_geno_int8_batch;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_geno_int8_batch.rcbuffer->pybuffer, (PyObject*)__pyx_v_geno_int8_batch, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_geno_int8_batch.diminfo[0].strides = __pyx_pybuffernd_geno_int8_batch.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_geno_int8_batch.diminfo[0].shape = __pyx_pybuffernd_geno_int8_batch.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_geno_int8_batch.diminfo[1].strides = __pyx_pybuffernd_geno_int8_batch.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_geno_int8_batch.diminfo[1].shape = __pyx_pybuffernd_geno_int8_batch.rcbuffer->pybuffer.shape[1];
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_append_biallelic_batch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_13append_biallelic_batch)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_geno_int8_batch)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_geno_int8_batch));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_geno_int8_batch));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_geno_int8_batch));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1284
 * 
 *     cpdef append_biallelic_batch(self, np.ndarray[np.int8_t,mode="c",ndim=2] geno_int8_batch):
 *         cdef uint32_t batch_size = <uint32_t>geno_int8_batch.shape[0]             # <<<<<<<<<<<<<<
 *         cdef int8_t* genobytes
 *         cdef uint32_t uii
 */
  __pyx_v_batch_size = ((uint32_t)(__pyx_v_geno_int8_batch->dimensions[0]));

  /* "pgenlib.pyx":1288
 *         cdef uint32_t uii
 *         cdef pglerr_t reterr
 *         for uii in range(batch_size):             # <<<<<<<<<<<<<<
 *             genobytes = &(geno_int8_batch[uii, 0])
 *             bytes_to_genoarr_unsafe(genobytes, self._state_ptr[0].pwc.sample_ct, self._genovec)
 */
  __pyx_t_6 = __pyx_v_batch_size;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_uii = __pyx_t_7;

    /* "pgenlib.pyx":1289
 *         cdef pglerr_t reterr
 *         for uii in range(batch_size):
 *             genobytes = &(geno_int8_batch[uii, 0])             # <<<<<<<<<<<<<<
 *             bytes_to_genoarr_unsafe(genobytes, self._state_ptr[0].pwc.sample_ct, self._genovec)
 *             reterr = spgw_append_biallelic_genovec(self._genovec, self._state_ptr)
 */
    __pyx_t_8 = __pyx_v_uii;
    __pyx_t_9 = 0;
    __pyx_t_10 = -1;
    if (unlikely(__pyx_t_8 >= (size_t)__pyx_pybuffernd_geno_int8_batch.diminfo[0].shape)) __pyx_t_10 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_pybuffernd_geno_int8_batch.diminfo[1].shape;
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_geno_int8_batch.diminfo[1].shape)) __pyx_t_10 = 1;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_genobytes = (&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int8_t *, __pyx_pybuffernd_geno_int8_batch.rcbuffer->pybuffer.buf, __pyx_t_8, __pyx_pybuffernd_geno_int8_batch.diminfo[0].strides, __pyx_t_9, __pyx_pybuffernd_geno_int8_batch.diminfo[1].strides)));

    /* "pgenlib.pyx":1290
 *         for uii in range(batch_size):
 *             genobytes = &(geno_int8_batch[uii, 0])
 *             bytes_to_genoarr_unsafe(genobytes, self._state_ptr[0].pwc.sample_ct, self._genovec)             # <<<<<<<<<<<<<<
 *             reterr = spgw_append_biallelic_genovec(self._genovec, self._state_ptr)
 *             if reterr != kPglRetSuccess:
 */
    plink2::bytes_to_genoarr_unsafe(__pyx_v_genobytes, (__pyx_v_self->_state_ptr[0]).pwc.sample_ct, __pyx_v_self->_genovec);

    /* "pgenlib.pyx":1291
 *             genobytes = &(geno_int8_batch[uii, 0])
 *             bytes_to_genoarr_unsafe(genobytes, self._state_ptr[0].pwc.sample_ct, self._genovec)
 *             reterr = spgw_append_biallelic_genovec(self._genovec, self._state_ptr)             # <<<<<<<<<<<<<<
 *             if reterr != kPglRetSuccess:
 *                 raise RuntimeError("append_biallelic_batch() error " + str(reterr))
 */
    __pyx_v_reterr = plink2::spgw_append_biallelic_genovec(__pyx_v_self->_genovec, __pyx_v_self->_state_ptr);

    /* "pgenlib.pyx":1292
 *             bytes_to_genoarr_unsafe(genobytes, self._state_ptr[0].pwc.sample_ct, self._genovec)
 *             reterr = spgw_append_biallelic_genovec(self._genovec, self._state_ptr)
 *             if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("append_biallelic_batch() error " + str(reterr))
 *         return
 */
    __pyx_t_11 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
    if (__pyx_t_11) {

      /* "pgenlib.pyx":1293
 *             reterr = spgw_append_biallelic_genovec(self._genovec, self._state_ptr)
 *             if reterr != kPglRetSuccess:
 *                 raise RuntimeError("append_biallelic_batch() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         return
 * 
 */
      __pyx_t_1 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_kp_s_append_biallelic_batch_error, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":1292
 *             bytes_to_genoarr_unsafe(genobytes, self._state_ptr[0].pwc.sample_ct, self._genovec)
 *             reterr = spgw_append_biallelic_genovec(self._genovec, self._state_ptr)
 *             if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("append_biallelic_batch() error " + str(reterr))
 *         return
 */
    }
  }

  /* "pgenlib.pyx":1294
 *             if reterr != kPglRetSuccess:
 *                 raise RuntimeError("append_biallelic_batch() error " + str(reterr))
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1283
 * 
 * 
 *     cpdef append_biallelic_batch(self, np.ndarray[np.int8_t,mode="c",ndim=2] geno_int8_batch):             # <<<<<<<<<<<<<<
 *         cdef uint32_t batch_size = <uint32_t>geno_int8_batch.shape[0]
 *         cdef int8_t* genobytes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int8_batch.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_biallelic_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int8_batch.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_13append_biallelic_batch(PyObject *__pyx_v_self, PyObject *__pyx_v_geno_int8_batch); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_13append_biallelic_batch(PyObject *__pyx_v_self, PyObject *__pyx_v_geno_int8_batch) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append_biallelic_batch (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geno_int8_batch), __pyx_ptype_5numpy_ndarray, 1, "geno_int8_batch", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenWriter_12append_biallelic_batch(((struct __pyx_obj_7pgenlib_PgenWriter *)__pyx_v_self), ((PyArrayObject *)__pyx_v_geno_int8_batch));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenWriter_12append_biallelic_batch(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_geno_int8_batch) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_geno_int8_batch;
  __Pyx_Buffer __pyx_pybuffer_geno_int8_batch;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_biallelic_batch", 0);
  __pyx_pybuffer_geno_int8_batch.pybuffer.buf = NULL;
  __pyx_pybuffer_geno_int8_batch.refcount = 0;
  __pyx_pybuffernd_geno_int8_batch.data = NULL;
  __pyx_pybuffernd_geno_int8_batch.rcbuffer = &__pyx_pybuffer_geno_int8_batch;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_geno_int8_batch.rcbuffer->pybuffer, (PyObject*)__pyx_v_geno_int8_batch, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_geno_int8_batch.diminfo[0].strides = __pyx_pybuffernd_geno_int8_batch.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_geno_int8_batch.diminfo[0].shape = __pyx_pybuffernd_geno_int8_batch.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_geno_int8_batch.diminfo[1].strides = __pyx_pybuffernd_geno_int8_batch.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_geno_int8_batch.diminfo[1].shape = __pyx_pybuffernd_geno_int8_batch.rcbuffer->pybuffer.shape[1];
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenWriter_append_biallelic_batch(__pyx_v_self, __pyx_v_geno_int8_batch, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int8_batch.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_biallelic_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_geno_int8_batch.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1297
 * 
 * 
 *     cpdef append_alleles_batch(self, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_batch, bint all_phased = False):             # <<<<<<<<<<<<<<
 *         cdef uint32_t batch_size = <uint32_t>allele_int32_batch.shape[0]
 *         cdef uintptr_t* genovec = self._genovec
 */

static PyObject *__pyx_pw_7pgenlib_10PgenWriter_15append_alleles_batch(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_alleles_batch(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_allele_int32_batch, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenWriter_append_alleles_batch *__pyx_optional_args) {
  int __pyx_v_all_phased = ((int)0);
  uint32_t __pyx_v_batch_size;
  uintptr_t *__pyx_v_genovec;
  int32_t *__pyx_v_allele_codes;
  uint32_t __pyx_v_uii;
  plink2::pglerr_t __pyx_v_reterr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32_batch;
  __Pyx_Buffer __pyx_pybuffer_allele_int32_batch;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  uintptr_t *__pyx_t_8;
  int __pyx_t_9;
  uint32_t __pyx_t_10;
  uint32_t __pyx_t_11;
  size_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  size_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_alleles_batch", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_all_phased = __pyx_optional_args->all_phased;
    }
  }
  __pyx_pybuffer_allele_int32_batch.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32_batch.refcount = 0;
  __pyx_pybuffernd_allele_int32_batch.data = NULL;
  __pyx_pybuffernd_allele_int32_batch.rcbuffer = &__pyx_pybuffer_allele_int32_batch;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32_batch, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32_batch.diminfo[0].strides = __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32_batch.diminfo[0].shape = __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_allele_int32_batch.diminfo[1].strides = __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_allele_int32_batch.diminfo[1].shape = __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.shape[1];
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_append_alleles_batch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_15append_alleles_batch)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_all_phased); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_allele_int32_batch));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_allele_int32_batch));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_allele_int32_batch));
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1298
 * 
 *     cpdef append_alleles_batch(self, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_batch, bint all_phased = False):
 *         cdef uint32_t batch_size = <uint32_t>allele_int32_batch.shape[0]             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef int32_t* allele_codes
 */
  __pyx_v_batch_size = ((uint32_t)(__pyx_v_allele_int32_batch->dimensions[0]));

  /* "pgenlib.pyx":1299
 *     cpdef append_alleles_batch(self, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_batch, bint all_phased = False):
 *         cdef uint32_t batch_size = <uint32_t>allele_int32_batch.shape[0]
 *         cdef uintptr_t* genovec = self._genovec             # <<<<<<<<<<<<<<
 *         cdef int32_t* allele_codes
 *         cdef uint32_t uii
 */
  __pyx_t_8 = __pyx_v_self->_genovec;
  __pyx_v_genovec = __pyx_t_8;

  /* "pgenlib.pyx":1303
 *         cdef uint32_t uii
 *         cdef pglerr_t reterr
 *         if not all_phased:             # <<<<<<<<<<<<<<
 *             for uii in range(batch_size):
 *                 allele_codes = <int32_t*>(&(allele_int32_batch[uii, 0]))
 */
  __pyx_t_9 = ((!(__pyx_v_all_phased != 0)) != 0);
  if (__pyx_t_9) {

    /* "pgenlib.pyx":1304
 *         cdef pglerr_t reterr
 *         if not all_phased:
 *             for uii in range(batch_size):             # <<<<<<<<<<<<<<
 *                 allele_codes = <int32_t*>(&(allele_int32_batch[uii, 0]))
 *                 allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, NULL, NULL)
 */
    __pyx_t_10 = __pyx_v_batch_size;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_uii = __pyx_t_11;

      /* "pgenlib.pyx":1305
 *         if not all_phased:
 *             for uii in range(batch_size):
 *                 allele_codes = <int32_t*>(&(allele_int32_batch[uii, 0]))             # <<<<<<<<<<<<<<
 *                 allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, NULL, NULL)
 *                 reterr = spgw_append_biallelic_genovec(genovec, self._state_ptr)
 */
      __pyx_t_12 = __pyx_v_uii;
      __pyx_t_13 = 0;
      __pyx_t_14 = -1;
      if (unlikely(__pyx_t_12 >= (size_t)__pyx_pybuffernd_allele_int32_batch.diminfo[0].shape)) __pyx_t_14 = 0;
      if (__pyx_t_13 < 0) {
        __pyx_t_13 += __pyx_pybuffernd_allele_int32_batch.diminfo[1].shape;
        if (unlikely(__pyx_t_13 < 0)) __pyx_t_14 = 1;
      } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_allele_int32_batch.diminfo[1].shape)) __pyx_t_14 = 1;
      if (unlikely(__pyx_t_14 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_14);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_allele_codes = ((int32_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_allele_int32_batch.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_allele_int32_batch.diminfo[1].strides))));

      /* "pgenlib.pyx":1306
 *             for uii in range(batch_size):
 *                 allele_codes = <int32_t*>(&(allele_int32_batch[uii, 0]))
 *                 allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, NULL, NULL)             # <<<<<<<<<<<<<<
 *                 reterr = spgw_append_biallelic_genovec(genovec, self._state_ptr)
 *                 if reterr != kPglRetSuccess:
 */
      plink2::allele_codes_to_genoarr_unsafe(__pyx_v_allele_codes, NULL, (__pyx_v_self->_state_ptr[0]).pwc.sample_ct, __pyx_v_genovec, NULL, NULL);

      /* "pgenlib.pyx":1307
 *                 allele_codes = <int32_t*>(&(allele_int32_batch[uii, 0]))
 *                 allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, NULL, NULL)
 *                 reterr = spgw_append_biallelic_genovec(genovec, self._state_ptr)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("append_alleles_batch() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::spgw_append_biallelic_genovec(__pyx_v_genovec, __pyx_v_self->_state_ptr);

      /* "pgenlib.pyx":1308
 *                 allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, NULL, NULL)
 *                 reterr = spgw_append_biallelic_genovec(genovec, self._state_ptr)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("append_alleles_batch() error " + str(reterr))
 *         else:
 */
      __pyx_t_9 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_9) {

        /* "pgenlib.pyx":1309
 *                 reterr = spgw_append_biallelic_genovec(genovec, self._state_ptr)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("append_alleles_batch() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         else:
 *             for uii in range(batch_size):
 */
        __pyx_t_1 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Add(__pyx_kp_s_append_alleles_batch_error, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":1308
 *                 allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, NULL, NULL)
 *                 reterr = spgw_append_biallelic_genovec(genovec, self._state_ptr)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("append_alleles_batch() error " + str(reterr))
 *         else:
 */
      }
    }

    /* "pgenlib.pyx":1303
 *         cdef uint32_t uii
 *         cdef pglerr_t reterr
 *         if not all_phased:             # <<<<<<<<<<<<<<
 *             for uii in range(batch_size):
 *                 allele_codes = <int32_t*>(&(allele_int32_batch[uii, 0]))
 */
    goto __pyx_L3;
  }

  /* "pgenlib.pyx":1311
 *                     raise RuntimeError("append_alleles_batch() error " + str(reterr))
 *         else:
 *             for uii in range(batch_size):             # <<<<<<<<<<<<<<
 *                 allele_codes = <int32_t*>(&(allele_int32_batch[uii, 0]))
 *                 allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, self._phasepresent, self._phaseinfo)
 */
  /*else*/ {
    __pyx_t_10 = __pyx_v_batch_size;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_uii = __pyx_t_11;

      /* "pgenlib.pyx":1312
 *         else:
 *             for uii in range(batch_size):
 *                 allele_codes = <int32_t*>(&(allele_int32_batch[uii, 0]))             # <<<<<<<<<<<<<<
 *                 allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, self._phasepresent, self._phaseinfo)
 *                 reterr = spgw_append_biallelic_genovec_hphase(genovec, self._phasepresent, self._phaseinfo, self._state_ptr)
 */
      __pyx_t_15 = __pyx_v_uii;
      __pyx_t_16 = 0;
      __pyx_t_14 = -1;
      if (unlikely(__pyx_t_15 >= (size_t)__pyx_pybuffernd_allele_int32_batch.diminfo[0].shape)) __pyx_t_14 = 0;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_pybuffernd_allele_int32_batch.diminfo[1].shape;
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_14 = 1;
      } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_allele_int32_batch.diminfo[1].shape)) __pyx_t_14 = 1;
      if (unlikely(__pyx_t_14 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_14);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_allele_codes = ((int32_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_allele_int32_batch.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_allele_int32_batch.diminfo[1].strides))));

      /* "pgenlib.pyx":1313
 *             for uii in range(batch_size):
 *                 allele_codes = <int32_t*>(&(allele_int32_batch[uii, 0]))
 *                 allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, self._phasepresent, self._phaseinfo)             # <<<<<<<<<<<<<<
 *                 reterr = spgw_append_biallelic_genovec_hphase(genovec, self._phasepresent, self._phaseinfo, self._state_ptr)
 *                 if reterr != kPglRetSuccess:
 */
      plink2::allele_codes_to_genoarr_unsafe(__pyx_v_allele_codes, NULL, (__pyx_v_self->_state_ptr[0]).pwc.sample_ct, __pyx_v_genovec, __pyx_v_self->_phasepresent, __pyx_v_self->_phaseinfo);

      /* "pgenlib.pyx":1314
 *                 allele_codes = <int32_t*>(&(allele_int32_batch[uii, 0]))
 *                 allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, self._phasepresent, self._phaseinfo)
 *                 reterr = spgw_append_biallelic_genovec_hphase(genovec, self._phasepresent, self._phaseinfo, self._state_ptr)             # <<<<<<<<<<<<<<
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("append_alleles_batch() error " + str(reterr))
 */
      __pyx_v_reterr = plink2::spgw_append_biallelic_genovec_hphase(__pyx_v_genovec, __pyx_v_self->_phasepresent, __pyx_v_self->_phaseinfo, __pyx_v_self->_state_ptr);

      /* "pgenlib.pyx":1315
 *                 allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, self._phasepresent, self._phaseinfo)
 *                 reterr = spgw_append_biallelic_genovec_hphase(genovec, self._phasepresent, self._phaseinfo, self._state_ptr)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("append_alleles_batch() error " + str(reterr))
 *         return
 */
      __pyx_t_9 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
      if (__pyx_t_9) {

        /* "pgenlib.pyx":1316
 *                 reterr = spgw_append_biallelic_genovec_hphase(genovec, self._phasepresent, self._phaseinfo, self._state_ptr)
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("append_alleles_batch() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         return
 * 
 */
        __pyx_t_2 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Add(__pyx_kp_s_append_alleles_batch_error, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "pgenlib.pyx":1315
 *                 allele_codes_to_genoarr_unsafe(allele_codes, NULL, self._state_ptr[0].pwc.sample_ct, genovec, self._phasepresent, self._phaseinfo)
 *                 reterr = spgw_append_biallelic_genovec_hphase(genovec, self._phasepresent, self._phaseinfo, self._state_ptr)
 *                 if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("append_alleles_batch() error " + str(reterr))
 *         return
 */
      }
    }
  }
  __pyx_L3:;

  /* "pgenlib.pyx":1317
 *                 if reterr != kPglRetSuccess:
 *                     raise RuntimeError("append_alleles_batch() error " + str(reterr))
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1297
 * 
 * 
 *     cpdef append_alleles_batch(self, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_batch, bint all_phased = False):             # <<<<<<<<<<<<<<
 *         cdef uint32_t batch_size = <uint32_t>allele_int32_batch.shape[0]
 *         cdef uintptr_t* genovec = self._genovec
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_alleles_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_15append_alleles_batch(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_15append_alleles_batch(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_allele_int32_batch = 0;
  int __pyx_v_all_phased;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append_alleles_batch (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allele_int32_batch,&__pyx_n_s_all_phased,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allele_int32_batch)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_all_phased);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "append_alleles_batch") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allele_int32_batch = ((PyArrayObject *)values[0]);
    if (values[1]) {
      __pyx_v_all_phased = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_all_phased == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_all_phased = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("append_alleles_batch", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_alleles_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_allele_int32_batch), __pyx_ptype_5numpy_ndarray, 1, "allele_int32_batch", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenWriter_14append_alleles_batch(((struct __pyx_obj_7pgenlib_PgenWriter *)__pyx_v_self), __pyx_v_allele_int32_batch, __pyx_v_all_phased);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenWriter_14append_alleles_batch(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_allele_int32_batch, int __pyx_v_all_phased) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32_batch;
  __Pyx_Buffer __pyx_pybuffer_allele_int32_batch;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_7pgenlib_10PgenWriter_append_alleles_batch __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_alleles_batch", 0);
  __pyx_pybuffer_allele_int32_batch.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32_batch.refcount = 0;
  __pyx_pybuffernd_allele_int32_batch.data = NULL;
  __pyx_pybuffernd_allele_int32_batch.rcbuffer = &__pyx_pybuffer_allele_int32_batch;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32_batch, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32_batch.diminfo[0].strides = __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32_batch.diminfo[0].shape = __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_allele_int32_batch.diminfo[1].strides = __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_allele_int32_batch.diminfo[1].shape = __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.shape[1];
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.all_phased = __pyx_v_all_phased;
  __pyx_t_1 = __pyx_vtabptr_7pgenlib_PgenWriter->append_alleles_batch(__pyx_v_self, __pyx_v_allele_int32_batch, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_alleles_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1320
 * 
 * 
 *     cpdef append_partially_phased_batch(self, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_batch, np.ndarray[np.uint8_t,mode="c",cast=True,ndim=2] phasepresent_batch):             # <<<<<<<<<<<<<<
 *         cdef uint32_t batch_size = <uint32_t>allele_int32_batch.shape[0]
 *         cdef uintptr_t* genovec = self._genovec
 */

static PyObject *__pyx_pw_7pgenlib_10PgenWriter_17append_partially_phased_batch(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_partially_phased_batch(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_allele_int32_batch, PyArrayObject *__pyx_v_phasepresent_batch, int __pyx_skip_dispatch) {
  uint32_t __pyx_v_batch_size;
  uintptr_t *__pyx_v_genovec;
  uintptr_t *__pyx_v_phasepresent_buf;
  uintptr_t *__pyx_v_phaseinfo;
  int32_t *__pyx_v_allele_codes;
  unsigned char *__pyx_v_phasepresent_bytes;
  uint32_t __pyx_v_uii;
  plink2::pglerr_t __pyx_v_reterr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32_batch;
  __Pyx_Buffer __pyx_pybuffer_allele_int32_batch;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_phasepresent_batch;
  __Pyx_Buffer __pyx_pybuffer_phasepresent_batch;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  uintptr_t *__pyx_t_7;
  uint32_t __pyx_t_8;
  uint32_t __pyx_t_9;
  size_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  size_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_partially_phased_batch", 0);
  __pyx_pybuffer_allele_int32_batch.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32_batch.refcount = 0;
  __pyx_pybuffernd_allele_int32_batch.data = NULL;
  __pyx_pybuffernd_allele_int32_batch.rcbuffer = &__pyx_pybuffer_allele_int32_batch;
  __pyx_pybuffer_phasepresent_batch.pybuffer.buf = NULL;
  __pyx_pybuffer_phasepresent_batch.refcount = 0;
  __pyx_pybuffernd_phasepresent_batch.data = NULL;
  __pyx_pybuffernd_phasepresent_batch.rcbuffer = &__pyx_pybuffer_phasepresent_batch;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32_batch, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32_batch.diminfo[0].strides = __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32_batch.diminfo[0].shape = __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_allele_int32_batch.diminfo[1].strides = __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_allele_int32_batch.diminfo[1].shape = __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_phasepresent_batch.rcbuffer->pybuffer, (PyObject*)__pyx_v_phasepresent_batch, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 1, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_phasepresent_batch.diminfo[0].strides = __pyx_pybuffernd_phasepresent_batch.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_phasepresent_batch.diminfo[0].shape = __pyx_pybuffernd_phasepresent_batch.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_phasepresent_batch.diminfo[1].strides = __pyx_pybuffernd_phasepresent_batch.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_phasepresent_batch.diminfo[1].shape = __pyx_pybuffernd_phasepresent_batch.rcbuffer->pybuffer.shape[1];
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_append_partially_phased_batch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_17append_partially_phased_batch)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_allele_int32_batch));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_allele_int32_batch));
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_allele_int32_batch));
      __Pyx_INCREF(((PyObject *)__pyx_v_phasepresent_batch));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_phasepresent_batch));
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_phasepresent_batch));
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1321
 * 
 *     cpdef append_partially_phased_batch(self, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_batch, np.ndarray[np.uint8_t,mode="c",cast=True,ndim=2] phasepresent_batch):
 *         cdef uint32_t batch_size = <uint32_t>allele_int32_batch.shape[0]             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* phasepresent_buf = self._phasepresent
 */
  __pyx_v_batch_size = ((uint32_t)(__pyx_v_allele_int32_batch->dimensions[0]));

  /* "pgenlib.pyx":1322
 *     cpdef append_partially_phased_batch(self, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_batch, np.ndarray[np.uint8_t,mode="c",cast=True,ndim=2] phasepresent_batch):
 *         cdef uint32_t batch_size = <uint32_t>allele_int32_batch.shape[0]
 *         cdef uintptr_t* genovec = self._genovec             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* phasepresent_buf = self._phasepresent
 *         cdef uintptr_t* phaseinfo = self._phaseinfo
 */
  __pyx_t_7 = __pyx_v_self->_genovec;
  __pyx_v_genovec = __pyx_t_7;

  /* "pgenlib.pyx":1323
 *         cdef uint32_t batch_size = <uint32_t>allele_int32_batch.shape[0]
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* phasepresent_buf = self._phasepresent             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* phaseinfo = self._phaseinfo
 *         cdef int32_t* allele_codes
 */
  __pyx_t_7 = __pyx_v_self->_phasepresent;
  __pyx_v_phasepresent_buf = __pyx_t_7;

  /* "pgenlib.pyx":1324
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* phasepresent_buf = self._phasepresent
 *         cdef uintptr_t* phaseinfo = self._phaseinfo             # <<<<<<<<<<<<<<
 *         cdef int32_t* allele_codes
 *         cdef unsigned char* phasepresent_bytes
 */
  __pyx_t_7 = __pyx_v_self->_phaseinfo;
  __pyx_v_phaseinfo = __pyx_t_7;

  /* "pgenlib.pyx":1329
 *         cdef uint32_t uii
 *         cdef pglerr_t reterr
 *         for uii in range(batch_size):             # <<<<<<<<<<<<<<
 *             allele_codes = <int32_t*>(&(allele_int32_batch[uii, 0]))
 *             phasepresent_bytes = <unsigned char*>(&(phasepresent_batch[uii, 0]))
 */
  __pyx_t_8 = __pyx_v_batch_size;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_uii = __pyx_t_9;

    /* "pgenlib.pyx":1330
 *         cdef pglerr_t reterr
 *         for uii in range(batch_size):
 *             allele_codes = <int32_t*>(&(allele_int32_batch[uii, 0]))             # <<<<<<<<<<<<<<
 *             phasepresent_bytes = <unsigned char*>(&(phasepresent_batch[uii, 0]))
 *             allele_codes_to_genoarr_unsafe(allele_codes, phasepresent_bytes, self._state_ptr[0].pwc.sample_ct, genovec, phasepresent_buf, phaseinfo)
 */
    __pyx_t_10 = __pyx_v_uii;
    __pyx_t_11 = 0;
    __pyx_t_12 = -1;
    if (unlikely(__pyx_t_10 >= (size_t)__pyx_pybuffernd_allele_int32_batch.diminfo[0].shape)) __pyx_t_12 = 0;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_pybuffernd_allele_int32_batch.diminfo[1].shape;
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 1;
    } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_allele_int32_batch.diminfo[1].shape)) __pyx_t_12 = 1;
    if (unlikely(__pyx_t_12 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_12);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_allele_codes = ((int32_t *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_allele_int32_batch.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_allele_int32_batch.diminfo[1].strides))));

    /* "pgenlib.pyx":1331
 *         for uii in range(batch_size):
 *             allele_codes = <int32_t*>(&(allele_int32_batch[uii, 0]))
 *             phasepresent_bytes = <unsigned char*>(&(phasepresent_batch[uii, 0]))             # <<<<<<<<<<<<<<
 *             allele_codes_to_genoarr_unsafe(allele_codes, phasepresent_bytes, self._state_ptr[0].pwc.sample_ct, genovec, phasepresent_buf, phaseinfo)
 *             reterr = spgw_append_biallelic_genovec_hphase(genovec, phasepresent_buf, phaseinfo, self._state_ptr)
 */
    __pyx_t_13 = __pyx_v_uii;
    __pyx_t_14 = 0;
    __pyx_t_12 = -1;
    if (unlikely(__pyx_t_13 >= (size_t)__pyx_pybuffernd_phasepresent_batch.diminfo[0].shape)) __pyx_t_12 = 0;
    if (__pyx_t_14 < 0) {
      __pyx_t_14 += __pyx_pybuffernd_phasepresent_batch.diminfo[1].shape;
      if (unlikely(__pyx_t_14 < 0)) __pyx_t_12 = 1;
    } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_phasepresent_batch.diminfo[1].shape)) __pyx_t_12 = 1;
    if (unlikely(__pyx_t_12 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_12);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_phasepresent_bytes = ((unsigned char *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_phasepresent_batch.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_phasepresent_batch.diminfo[0].strides, __pyx_t_14, __pyx_pybuffernd_phasepresent_batch.diminfo[1].strides))));

    /* "pgenlib.pyx":1332
 *             allele_codes = <int32_t*>(&(allele_int32_batch[uii, 0]))
 *             phasepresent_bytes = <unsigned char*>(&(phasepresent_batch[uii, 0]))
 *             allele_codes_to_genoarr_unsafe(allele_codes, phasepresent_bytes, self._state_ptr[0].pwc.sample_ct, genovec, phasepresent_buf, phaseinfo)             # <<<<<<<<<<<<<<
 *             reterr = spgw_append_biallelic_genovec_hphase(genovec, phasepresent_buf, phaseinfo, self._state_ptr)
 *             if reterr != kPglRetSuccess:
 */
    plink2::allele_codes_to_genoarr_unsafe(__pyx_v_allele_codes, __pyx_v_phasepresent_bytes, (__pyx_v_self->_state_ptr[0]).pwc.sample_ct, __pyx_v_genovec, __pyx_v_phasepresent_buf, __pyx_v_phaseinfo);

    /* "pgenlib.pyx":1333
 *             phasepresent_bytes = <unsigned char*>(&(phasepresent_batch[uii, 0]))
 *             allele_codes_to_genoarr_unsafe(allele_codes, phasepresent_bytes, self._state_ptr[0].pwc.sample_ct, genovec, phasepresent_buf, phaseinfo)
 *             reterr = spgw_append_biallelic_genovec_hphase(genovec, phasepresent_buf, phaseinfo, self._state_ptr)             # <<<<<<<<<<<<<<
 *             if reterr != kPglRetSuccess:
 *                 raise RuntimeError("append_partially_phased_batch() error " + str(reterr))
 */
    __pyx_v_reterr = plink2::spgw_append_biallelic_genovec_hphase(__pyx_v_genovec, __pyx_v_phasepresent_buf, __pyx_v_phaseinfo, __pyx_v_self->_state_ptr);

    /* "pgenlib.pyx":1334
 *             allele_codes_to_genoarr_unsafe(allele_codes, phasepresent_bytes, self._state_ptr[0].pwc.sample_ct, genovec, phasepresent_buf, phaseinfo)
 *             reterr = spgw_append_biallelic_genovec_hphase(genovec, phasepresent_buf, phaseinfo, self._state_ptr)
 *             if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("append_partially_phased_batch() error " + str(reterr))
 *         return
 */
    __pyx_t_15 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
    if (__pyx_t_15) {

      /* "pgenlib.pyx":1335
 *             reterr = spgw_append_biallelic_genovec_hphase(genovec, phasepresent_buf, phaseinfo, self._state_ptr)
 *             if reterr != kPglRetSuccess:
 *                 raise RuntimeError("append_partially_phased_batch() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         return
 * 
 */
      __pyx_t_1 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_kp_s_append_partially_phased_batch_er, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":1334
 *             allele_codes_to_genoarr_unsafe(allele_codes, phasepresent_bytes, self._state_ptr[0].pwc.sample_ct, genovec, phasepresent_buf, phaseinfo)
 *             reterr = spgw_append_biallelic_genovec_hphase(genovec, phasepresent_buf, phaseinfo, self._state_ptr)
 *             if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("append_partially_phased_batch() error " + str(reterr))
 *         return
 */
    }
  }

  /* "pgenlib.pyx":1336
 *             if reterr != kPglRetSuccess:
 *                 raise RuntimeError("append_partially_phased_batch() error " + str(reterr))
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1320
 * 
 * 
 *     cpdef append_partially_phased_batch(self, np.ndarray[np.int32_t,mode="c",ndim=2] allele_int32_batch, np.ndarray[np.uint8_t,mode="c",cast=True,ndim=2] phasepresent_batch):             # <<<<<<<<<<<<<<
 *         cdef uint32_t batch_size = <uint32_t>allele_int32_batch.shape[0]
 *         cdef uintptr_t* genovec = self._genovec
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent_batch.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_partially_phased_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent_batch.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_17append_partially_phased_batch(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_17append_partially_phased_batch(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_allele_int32_batch = 0;
  PyArrayObject *__pyx_v_phasepresent_batch = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append_partially_phased_batch (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allele_int32_batch,&__pyx_n_s_phasepresent_batch,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allele_int32_batch)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phasepresent_batch)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("append_partially_phased_batch", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1320; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "append_partially_phased_batch") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1320; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_allele_int32_batch = ((PyArrayObject *)values[0]);
    __pyx_v_phasepresent_batch = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("append_partially_phased_batch", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1320; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_partially_phased_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_allele_int32_batch), __pyx_ptype_5numpy_ndarray, 1, "allele_int32_batch", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phasepresent_batch), __pyx_ptype_5numpy_ndarray, 1, "phasepresent_batch", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenWriter_16append_partially_phased_batch(((struct __pyx_obj_7pgenlib_PgenWriter *)__pyx_v_self), __pyx_v_allele_int32_batch, __pyx_v_phasepresent_batch);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenWriter_16append_partially_phased_batch(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_allele_int32_batch, PyArrayObject *__pyx_v_phasepresent_batch) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_allele_int32_batch;
  __Pyx_Buffer __pyx_pybuffer_allele_int32_batch;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_phasepresent_batch;
  __Pyx_Buffer __pyx_pybuffer_phasepresent_batch;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_partially_phased_batch", 0);
  __pyx_pybuffer_allele_int32_batch.pybuffer.buf = NULL;
  __pyx_pybuffer_allele_int32_batch.refcount = 0;
  __pyx_pybuffernd_allele_int32_batch.data = NULL;
  __pyx_pybuffernd_allele_int32_batch.rcbuffer = &__pyx_pybuffer_allele_int32_batch;
  __pyx_pybuffer_phasepresent_batch.pybuffer.buf = NULL;
  __pyx_pybuffer_phasepresent_batch.refcount = 0;
  __pyx_pybuffernd_phasepresent_batch.data = NULL;
  __pyx_pybuffernd_phasepresent_batch.rcbuffer = &__pyx_pybuffer_phasepresent_batch;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer, (PyObject*)__pyx_v_allele_int32_batch, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_allele_int32_batch.diminfo[0].strides = __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_allele_int32_batch.diminfo[0].shape = __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_allele_int32_batch.diminfo[1].strides = __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_allele_int32_batch.diminfo[1].shape = __pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_phasepresent_batch.rcbuffer->pybuffer, (PyObject*)__pyx_v_phasepresent_batch, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 1, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_phasepresent_batch.diminfo[0].strides = __pyx_pybuffernd_phasepresent_batch.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_phasepresent_batch.diminfo[0].shape = __pyx_pybuffernd_phasepresent_batch.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_phasepresent_batch.diminfo[1].strides = __pyx_pybuffernd_phasepresent_batch.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_phasepresent_batch.diminfo[1].shape = __pyx_pybuffernd_phasepresent_batch.rcbuffer->pybuffer.shape[1];
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenWriter_append_partially_phased_batch(__pyx_v_self, __pyx_v_allele_int32_batch, __pyx_v_phasepresent_batch, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent_batch.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_partially_phased_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_allele_int32_batch.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_phasepresent_batch.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1339
 * 
 * 
 *     cdef append_dosages_batch_internal32(self, np.ndarray[np.float32_t,mode="c",ndim=2] floatarr_batch):             # <<<<<<<<<<<<<<
 *         cdef uint32_t batch_size = <uint32_t>floatarr_batch.shape[0]
 *         cdef uintptr_t* genovec = self._genovec
 */

static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_dosages_batch_internal32(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_floatarr_batch) {
  uint32_t __pyx_v_batch_size;
  uintptr_t *__pyx_v_genovec;
  uintptr_t *__pyx_v_dosage_present;
  uint16_t *__pyx_v_dosage_vals;
  uint32_t __pyx_v_dosage_ct;
  uint32_t __pyx_v_uii;
  plink2::pglerr_t __pyx_v_reterr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_floatarr_batch;
  __Pyx_Buffer __pyx_pybuffer_floatarr_batch;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uintptr_t *__pyx_t_1;
  uint16_t *__pyx_t_2;
  uint32_t __pyx_t_3;
  uint32_t __pyx_t_4;
  size_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_dosages_batch_internal32", 0);
  __pyx_pybuffer_floatarr_batch.pybuffer.buf = NULL;
  __pyx_pybuffer_floatarr_batch.refcount = 0;
  __pyx_pybuffernd_floatarr_batch.data = NULL;
  __pyx_pybuffernd_floatarr_batch.rcbuffer = &__pyx_pybuffer_floatarr_batch;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_floatarr_batch.rcbuffer->pybuffer, (PyObject*)__pyx_v_floatarr_batch, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_floatarr_batch.diminfo[0].strides = __pyx_pybuffernd_floatarr_batch.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_floatarr_batch.diminfo[0].shape = __pyx_pybuffernd_floatarr_batch.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_floatarr_batch.diminfo[1].strides = __pyx_pybuffernd_floatarr_batch.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_floatarr_batch.diminfo[1].shape = __pyx_pybuffernd_floatarr_batch.rcbuffer->pybuffer.shape[1];

  /* "pgenlib.pyx":1340
 * 
 *     cdef append_dosages_batch_internal32(self, np.ndarray[np.float32_t,mode="c",ndim=2] floatarr_batch):
 *         cdef uint32_t batch_size = <uint32_t>floatarr_batch.shape[0]             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* dosage_present = self._dosage_present
 */
  __pyx_v_batch_size = ((uint32_t)(__pyx_v_floatarr_batch->dimensions[0]));

  /* "pgenlib.pyx":1341
 *     cdef append_dosages_batch_internal32(self, np.ndarray[np.float32_t,mode="c",ndim=2] floatarr_batch):
 *         cdef uint32_t batch_size = <uint32_t>floatarr_batch.shape[0]
 *         cdef uintptr_t* genovec = self._genovec             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* dosage_present = self._dosage_present
 *         cdef uint16_t* dosage_vals = self._dosage_vals
 */
  __pyx_t_1 = __pyx_v_self->_genovec;
  __pyx_v_genovec = __pyx_t_1;

  /* "pgenlib.pyx":1342
 *         cdef uint32_t batch_size = <uint32_t>floatarr_batch.shape[0]
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* dosage_present = self._dosage_present             # <<<<<<<<<<<<<<
 *         cdef uint16_t* dosage_vals = self._dosage_vals
 *         cdef uint32_t dosage_ct
 */
  __pyx_t_1 = __pyx_v_self->_dosage_present;
  __pyx_v_dosage_present = __pyx_t_1;

  /* "pgenlib.pyx":1343
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* dosage_present = self._dosage_present
 *         cdef uint16_t* dosage_vals = self._dosage_vals             # <<<<<<<<<<<<<<
 *         cdef uint32_t dosage_ct
 *         cdef uint32_t uii
 */
  __pyx_t_2 = __pyx_v_self->_dosage_vals;
  __pyx_v_dosage_vals = __pyx_t_2;

  /* "pgenlib.pyx":1347
 *         cdef uint32_t uii
 *         cdef pglerr_t reterr
 *         for uii in range(batch_size):             # <<<<<<<<<<<<<<
 *             floats_to_dosage16(<float*>(&(floatarr_batch[uii, 0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)
 *             reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 */
  __pyx_t_3 = __pyx_v_batch_size;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_uii = __pyx_t_4;

    /* "pgenlib.pyx":1348
 *         cdef pglerr_t reterr
 *         for uii in range(batch_size):
 *             floats_to_dosage16(<float*>(&(floatarr_batch[uii, 0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)             # <<<<<<<<<<<<<<
 *             reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 *             if reterr != kPglRetSuccess:
 */
    __pyx_t_5 = __pyx_v_uii;
    __pyx_t_6 = 0;
    __pyx_t_7 = -1;
    if (unlikely(__pyx_t_5 >= (size_t)__pyx_pybuffernd_floatarr_batch.diminfo[0].shape)) __pyx_t_7 = 0;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_pybuffernd_floatarr_batch.diminfo[1].shape;
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 1;
    } else if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_floatarr_batch.diminfo[1].shape)) __pyx_t_7 = 1;
    if (unlikely(__pyx_t_7 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_7);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    plink2::floats_to_dosage16(((float *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_floatarr_batch.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_floatarr_batch.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_floatarr_batch.diminfo[1].strides)))), (__pyx_v_self->_state_ptr[0]).pwc.sample_ct, 0x199A, __pyx_v_genovec, __pyx_v_dosage_present, __pyx_v_dosage_vals, (&__pyx_v_dosage_ct));

    /* "pgenlib.pyx":1349
 *         for uii in range(batch_size):
 *             floats_to_dosage16(<float*>(&(floatarr_batch[uii, 0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)
 *             reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)             # <<<<<<<<<<<<<<
 *             if reterr != kPglRetSuccess:
 *                 raise RuntimeError("append_dosages_batch() error " + str(reterr))
 */
    __pyx_v_reterr = plink2::spgw_append_biallelic_genovec_dosage16(__pyx_v_genovec, __pyx_v_dosage_present, __pyx_v_dosage_vals, __pyx_v_dosage_ct, __pyx_v_self->_state_ptr);

    /* "pgenlib.pyx":1350
 *             floats_to_dosage16(<float*>(&(floatarr_batch[uii, 0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)
 *             reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 *             if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("append_dosages_batch() error " + str(reterr))
 *         return
 */
    __pyx_t_8 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
    if (__pyx_t_8) {

      /* "pgenlib.pyx":1351
 *             reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 *             if reterr != kPglRetSuccess:
 *                 raise RuntimeError("append_dosages_batch() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         return
 * 
 */
      __pyx_t_9 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyNumber_Add(__pyx_kp_s_append_dosages_batch_error, __pyx_t_9); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":1350
 *             floats_to_dosage16(<float*>(&(floatarr_batch[uii, 0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)
 *             reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 *             if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("append_dosages_batch() error " + str(reterr))
 *         return
 */
    }
  }

  /* "pgenlib.pyx":1352
 *             if reterr != kPglRetSuccess:
 *                 raise RuntimeError("append_dosages_batch() error " + str(reterr))
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cdef append_dosages_batch_internal64(self, np.ndarray[np.float64_t,mode="c",ndim=2] doublearr_batch):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1339
 * 
 * 
 *     cdef append_dosages_batch_internal32(self, np.ndarray[np.float32_t,mode="c",ndim=2] floatarr_batch):             # <<<<<<<<<<<<<<
 *         cdef uint32_t batch_size = <uint32_t>floatarr_batch.shape[0]
 *         cdef uintptr_t* genovec = self._genovec
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_floatarr_batch.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_dosages_batch_internal32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_floatarr_batch.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1354
 *         return
 * 
 *     cdef append_dosages_batch_internal64(self, np.ndarray[np.float64_t,mode="c",ndim=2] doublearr_batch):             # <<<<<<<<<<<<<<
 *         cdef uint32_t batch_size = <uint32_t>doublearr_batch.shape[0]
 *         cdef uintptr_t* genovec = self._genovec
 */

static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_dosages_batch_internal64(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_doublearr_batch) {
  uint32_t __pyx_v_batch_size;
  uintptr_t *__pyx_v_genovec;
  uintptr_t *__pyx_v_dosage_present;
  uint16_t *__pyx_v_dosage_vals;
  uint32_t __pyx_v_dosage_ct;
  uint32_t __pyx_v_uii;
  plink2::pglerr_t __pyx_v_reterr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_doublearr_batch;
  __Pyx_Buffer __pyx_pybuffer_doublearr_batch;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uintptr_t *__pyx_t_1;
  uint16_t *__pyx_t_2;
  uint32_t __pyx_t_3;
  uint32_t __pyx_t_4;
  size_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_dosages_batch_internal64", 0);
  __pyx_pybuffer_doublearr_batch.pybuffer.buf = NULL;
  __pyx_pybuffer_doublearr_batch.refcount = 0;
  __pyx_pybuffernd_doublearr_batch.data = NULL;
  __pyx_pybuffernd_doublearr_batch.rcbuffer = &__pyx_pybuffer_doublearr_batch;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_doublearr_batch.rcbuffer->pybuffer, (PyObject*)__pyx_v_doublearr_batch, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_doublearr_batch.diminfo[0].strides = __pyx_pybuffernd_doublearr_batch.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_doublearr_batch.diminfo[0].shape = __pyx_pybuffernd_doublearr_batch.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_doublearr_batch.diminfo[1].strides = __pyx_pybuffernd_doublearr_batch.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_doublearr_batch.diminfo[1].shape = __pyx_pybuffernd_doublearr_batch.rcbuffer->pybuffer.shape[1];

  /* "pgenlib.pyx":1355
 * 
 *     cdef append_dosages_batch_internal64(self, np.ndarray[np.float64_t,mode="c",ndim=2] doublearr_batch):
 *         cdef uint32_t batch_size = <uint32_t>doublearr_batch.shape[0]             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* dosage_present = self._dosage_present
 */
  __pyx_v_batch_size = ((uint32_t)(__pyx_v_doublearr_batch->dimensions[0]));

  /* "pgenlib.pyx":1356
 *     cdef append_dosages_batch_internal64(self, np.ndarray[np.float64_t,mode="c",ndim=2] doublearr_batch):
 *         cdef uint32_t batch_size = <uint32_t>doublearr_batch.shape[0]
 *         cdef uintptr_t* genovec = self._genovec             # <<<<<<<<<<<<<<
 *         cdef uintptr_t* dosage_present = self._dosage_present
 *         cdef uint16_t* dosage_vals = self._dosage_vals
 */
  __pyx_t_1 = __pyx_v_self->_genovec;
  __pyx_v_genovec = __pyx_t_1;

  /* "pgenlib.pyx":1357
 *         cdef uint32_t batch_size = <uint32_t>doublearr_batch.shape[0]
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* dosage_present = self._dosage_present             # <<<<<<<<<<<<<<
 *         cdef uint16_t* dosage_vals = self._dosage_vals
 *         cdef uint32_t dosage_ct
 */
  __pyx_t_1 = __pyx_v_self->_dosage_present;
  __pyx_v_dosage_present = __pyx_t_1;

  /* "pgenlib.pyx":1358
 *         cdef uintptr_t* genovec = self._genovec
 *         cdef uintptr_t* dosage_present = self._dosage_present
 *         cdef uint16_t* dosage_vals = self._dosage_vals             # <<<<<<<<<<<<<<
 *         cdef uint32_t dosage_ct
 *         cdef uint32_t uii
 */
  __pyx_t_2 = __pyx_v_self->_dosage_vals;
  __pyx_v_dosage_vals = __pyx_t_2;

  /* "pgenlib.pyx":1362
 *         cdef uint32_t uii
 *         cdef pglerr_t reterr
 *         for uii in range(batch_size):             # <<<<<<<<<<<<<<
 *             doubles_to_dosage16(<double*>(&(doublearr_batch[uii, 0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)
 *             reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 */
  __pyx_t_3 = __pyx_v_batch_size;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_uii = __pyx_t_4;

    /* "pgenlib.pyx":1363
 *         cdef pglerr_t reterr
 *         for uii in range(batch_size):
 *             doubles_to_dosage16(<double*>(&(doublearr_batch[uii, 0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)             # <<<<<<<<<<<<<<
 *             reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 *             if reterr != kPglRetSuccess:
 */
    __pyx_t_5 = __pyx_v_uii;
    __pyx_t_6 = 0;
    __pyx_t_7 = -1;
    if (unlikely(__pyx_t_5 >= (size_t)__pyx_pybuffernd_doublearr_batch.diminfo[0].shape)) __pyx_t_7 = 0;
    if (__pyx_t_6 < 0) {
      __pyx_t_6 += __pyx_pybuffernd_doublearr_batch.diminfo[1].shape;
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 1;
    } else if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_doublearr_batch.diminfo[1].shape)) __pyx_t_7 = 1;
    if (unlikely(__pyx_t_7 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_7);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    plink2::doubles_to_dosage16(((double *)(&(*__Pyx_BufPtrCContig2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_doublearr_batch.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_doublearr_batch.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_doublearr_batch.diminfo[1].strides)))), (__pyx_v_self->_state_ptr[0]).pwc.sample_ct, 0x199A, __pyx_v_genovec, __pyx_v_dosage_present, __pyx_v_dosage_vals, (&__pyx_v_dosage_ct));

    /* "pgenlib.pyx":1364
 *         for uii in range(batch_size):
 *             doubles_to_dosage16(<double*>(&(doublearr_batch[uii, 0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)
 *             reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)             # <<<<<<<<<<<<<<
 *             if reterr != kPglRetSuccess:
 *                 raise RuntimeError("append_dosages_batch() error " + str(reterr))
 */
    __pyx_v_reterr = plink2::spgw_append_biallelic_genovec_dosage16(__pyx_v_genovec, __pyx_v_dosage_present, __pyx_v_dosage_vals, __pyx_v_dosage_ct, __pyx_v_self->_state_ptr);

    /* "pgenlib.pyx":1365
 *             doubles_to_dosage16(<double*>(&(doublearr_batch[uii, 0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)
 *             reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 *             if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("append_dosages_batch() error " + str(reterr))
 *         return
 */
    __pyx_t_8 = ((__pyx_v_reterr != plink2::kPglRetSuccess) != 0);
    if (__pyx_t_8) {

      /* "pgenlib.pyx":1366
 *             reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 *             if reterr != kPglRetSuccess:
 *                 raise RuntimeError("append_dosages_batch() error " + str(reterr))             # <<<<<<<<<<<<<<
 *         return
 * 
 */
      __pyx_t_9 = __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(__pyx_v_reterr); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyNumber_Add(__pyx_kp_s_append_dosages_batch_error, __pyx_t_9); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":1365
 *             doubles_to_dosage16(<double*>(&(doublearr_batch[uii, 0])), self._state_ptr[0].pwc.sample_ct, 6554, genovec, dosage_present, dosage_vals, &dosage_ct)
 *             reterr = spgw_append_biallelic_genovec_dosage16(genovec, dosage_present, dosage_vals, dosage_ct, self._state_ptr)
 *             if reterr != kPglRetSuccess:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("append_dosages_batch() error " + str(reterr))
 *         return
 */
    }
  }

  /* "pgenlib.pyx":1367
 *             if reterr != kPglRetSuccess:
 *                 raise RuntimeError("append_dosages_batch() error " + str(reterr))
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cpdef append_dosages_batch(self, np.ndarray floatarr_batch):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1354
 *         return
 * 
 *     cdef append_dosages_batch_internal64(self, np.ndarray[np.float64_t,mode="c",ndim=2] doublearr_batch):             # <<<<<<<<<<<<<<
 *         cdef uint32_t batch_size = <uint32_t>doublearr_batch.shape[0]
 *         cdef uintptr_t* genovec = self._genovec
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_doublearr_batch.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_dosages_batch_internal64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_doublearr_batch.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1369
 *         return
 * 
 *     cpdef append_dosages_batch(self, np.ndarray floatarr_batch):             # <<<<<<<<<<<<<<
 *         if floatarr_batch.dtype == np.float32:
 *             self.append_dosages_batch_internal32(floatarr_batch)
 */

static PyObject *__pyx_pw_7pgenlib_10PgenWriter_19append_dosages_batch(PyObject *__pyx_v_self, PyObject *__pyx_v_floatarr_batch); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_append_dosages_batch(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_floatarr_batch, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_dosages_batch", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_append_dosages_batch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_19append_dosages_batch)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_floatarr_batch)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_floatarr_batch));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_floatarr_batch));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_floatarr_batch));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1370
 * 
 *     cpdef append_dosages_batch(self, np.ndarray floatarr_batch):
 *         if floatarr_batch.dtype == np.float32:             # <<<<<<<<<<<<<<
 *             self.append_dosages_batch_internal32(floatarr_batch)
 *         elif floatarr_batch.dtype == np.float64:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_floatarr_batch), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "pgenlib.pyx":1371
 *     cpdef append_dosages_batch(self, np.ndarray floatarr_batch):
 *         if floatarr_batch.dtype == np.float32:
 *             self.append_dosages_batch_internal32(floatarr_batch)             # <<<<<<<<<<<<<<
 *         elif floatarr_batch.dtype == np.float64:
 *             self.append_dosages_batch_internal64(floatarr_batch)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7pgenlib_PgenWriter *)__pyx_v_self->__pyx_vtab)->append_dosages_batch_internal32(__pyx_v_self, ((PyArrayObject *)__pyx_v_floatarr_batch)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pgenlib.pyx":1370
 * 
 *     cpdef append_dosages_batch(self, np.ndarray floatarr_batch):
 *         if floatarr_batch.dtype == np.float32:             # <<<<<<<<<<<<<<
 *             self.append_dosages_batch_internal32(floatarr_batch)
 *         elif floatarr_batch.dtype == np.float64:
 */
    goto __pyx_L3;
  }

  /* "pgenlib.pyx":1372
 *         if floatarr_batch.dtype == np.float32:
 *             self.append_dosages_batch_internal32(floatarr_batch)
 *         elif floatarr_batch.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             self.append_dosages_batch_internal64(floatarr_batch)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_floatarr_batch), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {

    /* "pgenlib.pyx":1373
 *             self.append_dosages_batch_internal32(floatarr_batch)
 *         elif floatarr_batch.dtype == np.float64:
 *             self.append_dosages_batch_internal64(floatarr_batch)             # <<<<<<<<<<<<<<
 *         else:
 *             raise RuntimeError("Invalid append_dosages_batch() dosage array element type (float32 or float64 expected).")
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_7pgenlib_PgenWriter *)__pyx_v_self->__pyx_vtab)->append_dosages_batch_internal64(__pyx_v_self, ((PyArrayObject *)__pyx_v_floatarr_batch)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pgenlib.pyx":1372
 *         if floatarr_batch.dtype == np.float32:
 *             self.append_dosages_batch_internal32(floatarr_batch)
 *         elif floatarr_batch.dtype == np.float64:             # <<<<<<<<<<<<<<
 *             self.append_dosages_batch_internal64(floatarr_batch)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pgenlib.pyx":1375
 *             self.append_dosages_batch_internal64(floatarr_batch)
 *         else:
 *             raise RuntimeError("Invalid append_dosages_batch() dosage array element type (float32 or float64 expected).")             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "pgenlib.pyx":1376
 *         else:
 *             raise RuntimeError("Invalid append_dosages_batch() dosage array element type (float32 or float64 expected).")
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1369
 *         return
 * 
 *     cpdef append_dosages_batch(self, np.ndarray floatarr_batch):             # <<<<<<<<<<<<<<
 *         if floatarr_batch.dtype == np.float32:
 *             self.append_dosages_batch_internal32(floatarr_batch)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_dosages_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_19append_dosages_batch(PyObject *__pyx_v_self, PyObject *__pyx_v_floatarr_batch); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_19append_dosages_batch(PyObject *__pyx_v_self, PyObject *__pyx_v_floatarr_batch) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append_dosages_batch (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_floatarr_batch), __pyx_ptype_5numpy_ndarray, 1, "floatarr_batch", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7pgenlib_10PgenWriter_18append_dosages_batch(((struct __pyx_obj_7pgenlib_PgenWriter *)__pyx_v_self), ((PyArrayObject *)__pyx_v_floatarr_batch));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenWriter_18append_dosages_batch(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyArrayObject *__pyx_v_floatarr_batch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_dosages_batch", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenWriter_append_dosages_batch(__pyx_v_self, __pyx_v_floatarr_batch, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pgenlib.PgenWriter.append_dosages_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1379
 * 
 * 
 *     cpdef close(self):             # <<<<<<<<<<<<<<
 *         if self._state_ptr:
 *             if self._state_ptr[0].pwc.vidx != self._state_ptr[0].pwc.variant_ct:
 */

static PyObject *__pyx_pw_7pgenlib_10PgenWriter_21close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter_close(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_close); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_21close)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1380
 * 
 *     cpdef close(self):
 *         if self._state_ptr:             # <<<<<<<<<<<<<<
 *             if self._state_ptr[0].pwc.vidx != self._state_ptr[0].pwc.variant_ct:
 *                 raise RuntimeError("PgenWriter.close() called when number of written variants (" + str(self._state_ptr[0].pwc.vidx) + ") unequal to initially declared value (" + str(self._state_ptr[0].pwc.variant_ct) + ").")
 */
  __pyx_t_5 = (__pyx_v_self->_state_ptr != 0);
  if (__pyx_t_5) {

    /* "pgenlib.pyx":1381
 *     cpdef close(self):
 *         if self._state_ptr:
 *             if self._state_ptr[0].pwc.vidx != self._state_ptr[0].pwc.variant_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("PgenWriter.close() called when number of written variants (" + str(self._state_ptr[0].pwc.vidx) + ") unequal to initially declared value (" + str(self._state_ptr[0].pwc.variant_ct) + ").")
 *             spgw_finish(self._state_ptr)
 */
    __pyx_t_5 = (((__pyx_v_self->_state_ptr[0]).pwc.vidx != (__pyx_v_self->_state_ptr[0]).pwc.variant_ct) != 0);
    if (__pyx_t_5) {

      /* "pgenlib.pyx":1382
 *         if self._state_ptr:
 *             if self._state_ptr[0].pwc.vidx != self._state_ptr[0].pwc.variant_ct:
 *                 raise RuntimeError("PgenWriter.close() called when number of written variants (" + str(self._state_ptr[0].pwc.vidx) + ") unequal to initially declared value (" + str(self._state_ptr[0].pwc.variant_ct) + ").")             # <<<<<<<<<<<<<<
 *             spgw_finish(self._state_ptr)
 *             if self._nonref_flags:
 */
      __pyx_t_1 = __Pyx_PyInt_From_uint32_t((__pyx_v_self->_state_ptr[0]).pwc.vidx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_kp_s_PgenWriter_close_called_when_num, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_unequal_to_initially_declared_v); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_From_uint32_t((__pyx_v_self->_state_ptr[0]).pwc.variant_ct); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__15); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pgenlib.pyx":1381
 *     cpdef close(self):
 *         if self._state_ptr:
 *             if self._state_ptr[0].pwc.vidx != self._state_ptr[0].pwc.variant_ct:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("PgenWriter.close() called when number of written variants (" + str(self._state_ptr[0].pwc.vidx) + ") unequal to initially declared value (" + str(self._state_ptr[0].pwc.variant_ct) + ").")
 *             spgw_finish(self._state_ptr)
 */
    }

    /* "pgenlib.pyx":1383
 *             if self._state_ptr[0].pwc.vidx != self._state_ptr[0].pwc.variant_ct:
 *                 raise RuntimeError("PgenWriter.close() called when number of written variants (" + str(self._state_ptr[0].pwc.vidx) + ") unequal to initially declared value (" + str(self._state_ptr[0].pwc.variant_ct) + ").")
 *             spgw_finish(self._state_ptr)             # <<<<<<<<<<<<<<
 *             if self._nonref_flags:
 *                 aligned_free(self._nonref_flags)
 */
    plink2::spgw_finish(__pyx_v_self->_state_ptr);

    /* "pgenlib.pyx":1384
 *                 raise RuntimeError("PgenWriter.close() called when number of written variants (" + str(self._state_ptr[0].pwc.vidx) + ") unequal to initially declared value (" + str(self._state_ptr[0].pwc.variant_ct) + ").")
 *             spgw_finish(self._state_ptr)
 *             if self._nonref_flags:             # <<<<<<<<<<<<<<
 *                 aligned_free(self._nonref_flags)
 *             PyMem_Free(self._state_ptr)
 */
    __pyx_t_5 = (__pyx_v_self->_nonref_flags != 0);
    if (__pyx_t_5) {

      /* "pgenlib.pyx":1385
 *             spgw_finish(self._state_ptr)
 *             if self._nonref_flags:
 *                 aligned_free(self._nonref_flags)             # <<<<<<<<<<<<<<
 *             PyMem_Free(self._state_ptr)
 *             self._state_ptr = NULL
 */
      plink2::aligned_free(__pyx_v_self->_nonref_flags);

      /* "pgenlib.pyx":1384
 *                 raise RuntimeError("PgenWriter.close() called when number of written variants (" + str(self._state_ptr[0].pwc.vidx) + ") unequal to initially declared value (" + str(self._state_ptr[0].pwc.variant_ct) + ").")
 *             spgw_finish(self._state_ptr)
 *             if self._nonref_flags:             # <<<<<<<<<<<<<<
 *                 aligned_free(self._nonref_flags)
 *             PyMem_Free(self._state_ptr)
 */
    }

    /* "pgenlib.pyx":1386
 *             if self._nonref_flags:
 *                 aligned_free(self._nonref_flags)
 *             PyMem_Free(self._state_ptr)             # <<<<<<<<<<<<<<
 *             self._state_ptr = NULL
 *         return
 */
    PyMem_Free(__pyx_v_self->_state_ptr);

    /* "pgenlib.pyx":1387
 *                 aligned_free(self._nonref_flags)
 *             PyMem_Free(self._state_ptr)
 *             self._state_ptr = NULL             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_v_self->_state_ptr = NULL;

    /* "pgenlib.pyx":1380
 * 
 *     cpdef close(self):
 *         if self._state_ptr:             # <<<<<<<<<<<<<<
 *             if self._state_ptr[0].pwc.vidx != self._state_ptr[0].pwc.variant_ct:
 *                 raise RuntimeError("PgenWriter.close() called when number of written variants (" + str(self._state_ptr[0].pwc.vidx) + ") unequal to initially declared value (" + str(self._state_ptr[0].pwc.variant_ct) + ").")
 */
  }

  /* "pgenlib.pyx":1388
 *             PyMem_Free(self._state_ptr)
 *             self._state_ptr = NULL
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1379
 * 
 * 
 *     cpdef close(self):             # <<<<<<<<<<<<<<
 *         if self._state_ptr:
 *             if self._state_ptr[0].pwc.vidx != self._state_ptr[0].pwc.variant_ct:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pgenlib.PgenWriter.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_21close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_21close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  __pyx_r = __pyx_pf_7pgenlib_10PgenWriter_20close(((struct __pyx_obj_7pgenlib_PgenWriter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenWriter_20close(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenWriter_close(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pgenlib.PgenWriter.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1391
 * 
 * 
 *     cpdef __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.close()
 *         return
 */

static PyObject *__pyx_pw_7pgenlib_10PgenWriter_23__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7pgenlib_10PgenWriter___exit__(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_exit); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_23__exit__)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_exc_type);
      __Pyx_GIVEREF(__pyx_v_exc_type);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_exc_type);
      __Pyx_INCREF(__pyx_v_exc_val);
      __Pyx_GIVEREF(__pyx_v_exc_val);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_exc_val);
      __Pyx_INCREF(__pyx_v_exc_tb);
      __Pyx_GIVEREF(__pyx_v_exc_tb);
      PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_exc_tb);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pgenlib.pyx":1392
 * 
 *     cpdef __exit__(self, exc_type, exc_val, exc_tb):
 *         self.close()             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7pgenlib_PgenWriter *)__pyx_v_self->__pyx_vtab)->close(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pgenlib.pyx":1393
 *     cpdef __exit__(self, exc_type, exc_val, exc_tb):
 *         self.close()
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pgenlib.pyx":1391
 * 
 * 
 *     cpdef __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.close()
 *         return
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pgenlib.PgenWriter.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_23__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pgenlib_10PgenWriter_23__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_exc_type = 0;
  PyObject *__pyx_v_exc_val = 0;
  PyObject *__pyx_v_exc_tb = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc_type,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_tb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exc_type = values[0];
    __pyx_v_exc_val = values[1];
    __pyx_v_exc_tb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pgenlib.PgenWriter.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pgenlib_10PgenWriter_22__exit__(((struct __pyx_obj_7pgenlib_PgenWriter *)__pyx_v_self), __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pgenlib_10PgenWriter_22__exit__(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self, PyObject *__pyx_v_exc_type, PyObject *__pyx_v_exc_val, PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7pgenlib_10PgenWriter___exit__(__pyx_v_self, __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pgenlib.PgenWriter.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pgenlib.pyx":1396
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._state_ptr:
 *             if self._state_ptr[0].pwc.vidx == self._state_ptr[0].pwc.variant_ct:
 */

/* Python wrapper */
static void __pyx_pw_7pgenlib_10PgenWriter_25__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7pgenlib_10PgenWriter_25__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7pgenlib_10PgenWriter_24__dealloc__(((struct __pyx_obj_7pgenlib_PgenWriter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7pgenlib_10PgenWriter_24__dealloc__(struct __pyx_obj_7pgenlib_PgenWriter *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pgenlib.pyx":1397
 * 
 *     def __dealloc__(self):
 *         if self._state_ptr:             # <<<<<<<<<<<<<<
 *             if self._state_ptr[0].pwc.vidx == self._state_ptr[0].pwc.variant_ct:
 *                 spgw_finish(self._state_ptr)
 */
  __pyx_t_1 = (__pyx_v_self->_state_ptr != 0);
  if (__pyx_t_1) {

    /* "pgenlib.pyx":1398
 *     def __dealloc__(self):
 *         if self._state_ptr:
 *             if self._state_ptr[0].pwc.vidx == self._state_ptr[0].pwc.variant_ct:             # <<<<<<<<<<<<<<
 *                 spgw_finish(self._state_ptr)
 *             else:
 */
    __pyx_t_1 = (((__pyx_v_self->_state_ptr[0]).pwc.vidx == (__pyx_v_self->_state_ptr[0]).pwc.variant_ct) != 0);
    if (__pyx_t_1) {

      /* "pgenlib.pyx":1399
 *         if self._state_ptr:
 *             if self._state_ptr[0].pwc.vidx == self._state_ptr[0].pwc.variant_ct:
 *                 spgw_finish(self._state_ptr)             # <<<<<<<<<<<<<<
 *             else:
 *                 spgw_cleanup(self._state_ptr)
 */
      plink2::spgw_finish(__pyx_v_self->_state_ptr);

      /* "pgenlib.pyx":1398
 *     def __dealloc__(self):
 *         if self._state_ptr:
 *             if self._state_ptr[0].pwc.vidx == self._state_ptr[0].pwc.variant_ct:             # <<<<<<<<<<<<<<
 *                 spgw_finish(self._state_ptr)
 *             else:
 */
      goto __pyx_L4;
    }

    /* "pgenlib.pyx":1401
 *                 spgw_finish(self._state_ptr)
 *             else:
 *                 spgw_cleanup(self._state_ptr)             # <<<<<<<<<<<<<<
 *             if self._nonref_flags:
 *                 aligned_free(self._nonref_flags)
 */
    /*else*/ {
      plink2::spgw_cleanup(__pyx_v_self->_state_ptr);
    }
    __pyx_L4:;

    /* "pgenlib.pyx":1402
 *             else:
 *                 spgw_cleanup(self._state_ptr)
 *             if self._nonref_flags:             # <<<<<<<<<<<<<<
 *                 aligned_free(self._nonref_flags)
 *             PyMem_Free(self._state_ptr)
 */
    __pyx_t_1 = (__pyx_v_self->_nonref_flags != 0);
    if (__pyx_t_1) {

      /* "pgenlib.pyx":1403
 *                 spgw_cleanup(self._state_ptr)
 *             if self._nonref_flags:
 *                 aligned_free(self._nonref_flags)             # <<<<<<<<<<<<<<
 *             PyMem_Free(self._state_ptr)
 *         return
 */
      plink2::aligned_free(__pyx_v_self->_nonref_flags);

      /* "pgenlib.pyx":1402
 *             else:
 *                 spgw_cleanup(self._state_ptr)
 *             if self._nonref_flags:             # <<<<<<<<<<<<<<
 *                 aligned_free(self._nonref_flags)
 *             PyMem_Free(self._state_ptr)
 */
    }

    /* "pgenlib.pyx":1404
 *             if self._nonref_flags:
 *                 aligned_free(self._nonref_flags)
 *             PyMem_Free(self._state_ptr)             # <<<<<<<<<<<<<<
 *         return
 */
    PyMem_Free(__pyx_v_self->_state_ptr);

    /* "pgenlib.pyx":1397
 * 
 *     def __dealloc__(self):
 *         if self._state_ptr:             # <<<<<<<<<<<<<<
 *             if self._state_ptr[0].pwc.vidx == self._state_ptr[0].pwc.variant_ct:
 *                 spgw_finish(self._state_ptr)
 */
  }

  /* "pgenlib.pyx":1405
 *                 aligned_free(self._nonref_flags)
 *             PyMem_Free(self._state_ptr)
 *         return             # <<<<<<<<<<<<<<
 */
  goto __pyx_L0;

  /* "pgenlib.pyx":1396
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._state_ptr:
 *             if self._state_ptr[0].pwc.vidx == self._state_ptr[0].pwc.variant_ct:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":250
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":256
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":258
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":260
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_b;
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":261
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_B;
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_h;
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_H;
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_i;
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_I;
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_l;
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_L;
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_q;
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_Q;
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_f;
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_d;
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_g;
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_Zf;
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_Zd;
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_Zg;
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_O;
      break;
      default:

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":280
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)malloc(0xFF));

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":283
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_7;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":288
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":292
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 783; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":790
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L15:;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7pgenlib_PgenReader __pyx_vtable_7pgenlib_PgenReader;

static PyObject *__pyx_tp_new_7pgenlib_PgenReader(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7pgenlib_PgenReader *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7pgenlib_PgenReader *)o);
  p->__pyx_vtab = __pyx_vtabptr_7pgenlib_PgenReader;
  if (unlikely(__pyx_pw_7pgenlib_10PgenReader_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7pgenlib_PgenReader(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7pgenlib_10PgenReader_39__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7pgenlib_PgenReader[] = {
  {"__enter__", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_3__enter__, METH_NOARGS, 0},
  {"get_raw_sample_ct", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_5get_raw_sample_ct, METH_NOARGS, 0},
  {"get_variant_ct", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_7get_variant_ct, METH_NOARGS, 0},
  {"hardcall_phase_present", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_9hardcall_phase_present, METH_NOARGS, 0},
  {"read", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_11read, METH_VARARGS|METH_KEYWORDS, 0},
  {"read_dosages", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_13read_dosages, METH_VARARGS|METH_KEYWORDS, 0},
  {"read_alleles", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_15read_alleles, METH_VARARGS|METH_KEYWORDS, 0},
  {"read_alleles_and_phasepresent", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_17read_alleles_and_phasepresent, METH_VARARGS|METH_KEYWORDS, 0},
  {"read_range", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_19read_range, METH_VARARGS|METH_KEYWORDS, 0},
  {"read_list", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_21read_list, METH_VARARGS|METH_KEYWORDS, 0},
  {"read_alleles_range", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_23read_alleles_range, METH_VARARGS|METH_KEYWORDS, 0},
  {"read_alleles_list", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_25read_alleles_list, METH_VARARGS|METH_KEYWORDS, 0},
  {"read_alleles_and_phasepresent_range", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_27read_alleles_and_phasepresent_range, METH_VARARGS|METH_KEYWORDS, 0},
  {"read_alleles_and_phasepresent_list", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_29read_alleles_and_phasepresent_list, METH_VARARGS|METH_KEYWORDS, 0},
  {"count", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_31count, METH_VARARGS|METH_KEYWORDS, 0},
  {"change_sample_subset", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_33change_sample_subset, METH_VARARGS|METH_KEYWORDS, 0},
  {"close", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_35close, METH_NOARGS, 0},
  {"__exit__", (PyCFunction)__pyx_pw_7pgenlib_10PgenReader_37__exit__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7pgenlib_PgenReader = {
  PyVarObject_HEAD_INIT(0, 0)
  "pgenlib.PgenReader", /*tp_name*/
  sizeof(struct __pyx_obj_7pgenlib_PgenReader), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pgenlib_PgenReader, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7pgenlib_PgenReader, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pgenlib_PgenReader, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7pgenlib_PgenWriter __pyx_vtable_7pgenlib_PgenWriter;

static PyObject *__pyx_tp_new_7pgenlib_PgenWriter(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7pgenlib_PgenWriter *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7pgenlib_PgenWriter *)o);
  p->__pyx_vtab = __pyx_vtabptr_7pgenlib_PgenWriter;
  if (unlikely(__pyx_pw_7pgenlib_10PgenWriter_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7pgenlib_PgenWriter(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7pgenlib_10PgenWriter_25__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7pgenlib_PgenWriter[] = {
  {"__enter__", (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_3__enter__, METH_NOARGS, 0},
  {"append_biallelic", (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_5append_biallelic, METH_O, 0},
  {"append_alleles", (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_7append_alleles, METH_VARARGS|METH_KEYWORDS, 0},
  {"append_partially_phased", (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_9append_partially_phased, METH_VARARGS|METH_KEYWORDS, 0},
  {"append_dosages", (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_11append_dosages, METH_O, 0},
  {"append_biallelic_batch", (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_13append_biallelic_batch, METH_O, 0},
  {"append_alleles_batch", (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_15append_alleles_batch, METH_VARARGS|METH_KEYWORDS, 0},
  {"append_partially_phased_batch", (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_17append_partially_phased_batch, METH_VARARGS|METH_KEYWORDS, 0},
  {"append_dosages_batch", (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_19append_dosages_batch, METH_O, 0},
  {"close", (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_21close, METH_NOARGS, 0},
  {"__exit__", (PyCFunction)__pyx_pw_7pgenlib_10PgenWriter_23__exit__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7pgenlib_PgenWriter = {
  PyVarObject_HEAD_INIT(0, 0)
  "pgenlib.PgenWriter", /*tp_name*/
  sizeof(struct __pyx_obj_7pgenlib_PgenWriter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pgenlib_PgenWriter, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7pgenlib_PgenWriter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pgenlib_PgenWriter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "pgenlib",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_0_based_sample_idx_too_large, __pyx_k_0_based_sample_idx_too_large, sizeof(__pyx_k_0_based_sample_idx_too_large), 0, 0, 1, 0},
  {&__pyx_n_s_C_CONTIGUOUS, __pyx_k_C_CONTIGUOUS, sizeof(__pyx_k_C_CONTIGUOUS), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_sample_subset_is_not_curre, __pyx_k_Empty_sample_subset_is_not_curre, sizeof(__pyx_k_Empty_sample_subset_is_not_curre), 0, 0, 1, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_kp_s_Haplotype_major_read_alleles_lis, __pyx_k_Haplotype_major_read_alleles_lis, sizeof(__pyx_k_Haplotype_major_read_alleles_lis), 0, 0, 1, 0},
  {&__pyx_kp_s_Haplotype_major_read_alleles_lis_2, __pyx_k_Haplotype_major_read_alleles_lis_2, sizeof(__pyx_k_Haplotype_major_read_alleles_lis_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Haplotype_major_read_alleles_ran, __pyx_k_Haplotype_major_read_alleles_ran, sizeof(__pyx_k_Haplotype_major_read_alleles_ran), 0, 0, 1, 0},
  {&__pyx_kp_s_Haplotype_major_read_alleles_ran_2, __pyx_k_Haplotype_major_read_alleles_ran_2, sizeof(__pyx_k_Haplotype_major_read_alleles_ran_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_append_dosages_batch_dos, __pyx_k_Invalid_append_dosages_batch_dos, sizeof(__pyx_k_Invalid_append_dosages_batch_dos), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_append_dosages_dosage_ar, __pyx_k_Invalid_append_dosages_dosage_ar, sizeof(__pyx_k_Invalid_append_dosages_dosage_ar), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_arguments_for_PgenWriter, __pyx_k_Invalid_arguments_for_PgenWriter, sizeof(__pyx_k_Invalid_arguments_for_PgenWriter), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_read_dosages_floatarr_ou, __pyx_k_Invalid_read_dosages_floatarr_ou, sizeof(__pyx_k_Invalid_read_dosages_floatarr_ou), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_read_geno_int_out_array, __pyx_k_Invalid_read_geno_int_out_array, sizeof(__pyx_k_Invalid_read_geno_int_out_array), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_read_list_geno_int_out_a, __pyx_k_Invalid_read_list_geno_int_out_a, sizeof(__pyx_k_Invalid_read_list_geno_int_out_a), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_read_range_geno_int_out, __pyx_k_Invalid_read_range_geno_int_out, sizeof(__pyx_k_Invalid_read_range_geno_int_out), 0, 0, 1, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_Multiallelic_variants_aren_t_sup, __pyx_k_Multiallelic_variants_aren_t_sup, sizeof(__pyx_k_Multiallelic_variants_aren_t_sup), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_kp_s_PgenWriter_close_called_when_num, __pyx_k_PgenWriter_close_called_when_num, sizeof(__pyx_k_PgenWriter_close_called_when_num), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Sample_major_read_list_geno_int, __pyx_k_Sample_major_read_list_geno_int, sizeof(__pyx_k_Sample_major_read_list_geno_int), 0, 0, 1, 0},
  {&__pyx_kp_s_Sample_major_read_list_geno_int_2, __pyx_k_Sample_major_read_list_geno_int_2, sizeof(__pyx_k_Sample_major_read_list_geno_int_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Sample_major_read_range_geno_int, __pyx_k_Sample_major_read_range_geno_int, sizeof(__pyx_k_Sample_major_read_range_geno_int), 0, 0, 1, 0},
  {&__pyx_kp_s_Sample_major_read_range_geno_int_2, __pyx_k_Sample_major_read_range_geno_int_2, sizeof(__pyx_k_Sample_major_read_range_geno_int_2), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s_Variant_major_read_alleles_list, __pyx_k_Variant_major_read_alleles_list, sizeof(__pyx_k_Variant_major_read_alleles_list), 0, 0, 1, 0},
  {&__pyx_kp_s_Variant_major_read_alleles_list_2, __pyx_k_Variant_major_read_alleles_list_2, sizeof(__pyx_k_Variant_major_read_alleles_list_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Variant_major_read_alleles_range, __pyx_k_Variant_major_read_alleles_range, sizeof(__pyx_k_Variant_major_read_alleles_range), 0, 0, 1, 0},
  {&__pyx_kp_s_Variant_major_read_alleles_range_2, __pyx_k_Variant_major_read_alleles_range_2, sizeof(__pyx_k_Variant_major_read_alleles_range_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Variant_major_read_list_geno_int, __pyx_k_Variant_major_read_list_geno_int, sizeof(__pyx_k_Variant_major_read_list_geno_int), 0, 0, 1, 0},
  {&__pyx_kp_s_Variant_major_read_list_geno_int_2, __pyx_k_Variant_major_read_list_geno_int_2, sizeof(__pyx_k_Variant_major_read_list_geno_int_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Variant_major_read_range_geno_in, __pyx_k_Variant_major_read_range_geno_in, sizeof(__pyx_k_Variant_major_read_range_geno_in), 0, 0, 1, 0},
  {&__pyx_kp_s_Variant_major_read_range_geno_in_2, __pyx_k_Variant_major_read_range_geno_in_2, sizeof(__pyx_k_Variant_major_read_range_geno_in_2), 0, 0, 1, 0},
  {&__pyx_kp_s__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 0, 1, 0},
  {&__pyx_kp_s__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 0, 1, 0},
  {&__pyx_kp_s__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 0, 1, 0},
  {&__pyx_n_s_all_phased, __pyx_k_all_phased, sizeof(__pyx_k_all_phased), 0, 0, 1, 1},
  {&__pyx_n_s_allele_idx, __pyx_k_allele_idx, sizeof(__pyx_k_allele_idx), 0, 0, 1, 1},
  {&__pyx_n_s_allele_idx_offsets, __pyx_k_allele_idx_offsets, sizeof(__pyx_k_allele_idx_offsets), 0, 0, 1, 1},
  {&__pyx_n_s_allele_int32, __pyx_k_allele_int32, sizeof(__pyx_k_allele_int32), 0, 0, 1, 1},
  {&__pyx_n_s_allele_int32_batch, __pyx_k_allele_int32_batch, sizeof(__pyx_k_allele_int32_batch), 0, 0, 1, 1},
  {&__pyx_n_s_allele_int32_out, __pyx_k_allele_int32_out, sizeof(__pyx_k_allele_int32_out), 0, 0, 1, 1},
  {&__pyx_kp_s_and_column_count_should_be_twic, __pyx_k_and_column_count_should_be_twic, sizeof(__pyx_k_and_column_count_should_be_twic), 0, 0, 1, 0},
  {&__pyx_kp_s_and_row_count_should_be_twice_t, __pyx_k_and_row_count_should_be_twice_t, sizeof(__pyx_k_and_row_count_should_be_twice_t), 0, 0, 1, 0},
  {&__pyx_n_s_append_alleles, __pyx_k_append_alleles, sizeof(__pyx_k_append_alleles), 0, 0, 1, 1},
  {&__pyx_n_s_append_alleles_batch, __pyx_k_append_alleles_batch, sizeof(__pyx_k_append_alleles_batch), 0, 0, 1, 1},
  {&__pyx_kp_s_append_alleles_batch_error, __pyx_k_append_alleles_batch_error, sizeof(__pyx_k_append_alleles_batch_error), 0, 0, 1, 0},
  {&__pyx_kp_s_append_alleles_error, __pyx_k_append_alleles_error, sizeof(__pyx_k_append_alleles_error), 0, 0, 1, 0},
  {&__pyx_n_s_append_biallelic, __pyx_k_append_biallelic, sizeof(__pyx_k_append_biallelic), 0, 0, 1, 1},
  {&__pyx_n_s_append_biallelic_batch, __pyx_k_append_biallelic_batch, sizeof(__pyx_k_append_biallelic_batch), 0, 0, 1, 1},
  {&__pyx_kp_s_append_biallelic_batch_error, __pyx_k_append_biallelic_batch_error, sizeof(__pyx_k_append_biallelic_batch_error), 0, 0, 1, 0},
  {&__pyx_kp_s_append_biallelic_error, __pyx_k_append_biallelic_error, sizeof(__pyx_k_append_biallelic_error), 0, 0, 1, 0},
  {&__pyx_n_s_append_dosages, __pyx_k_append_dosages, sizeof(__pyx_k_append_dosages), 0, 0, 1, 1},
  {&__pyx_n_s_append_dosages_batch, __pyx_k_append_dosages_batch, sizeof(__pyx_k_append_dosages_batch), 0, 0, 1, 1},
  {&__pyx_kp_s_append_dosages_batch_error, __pyx_k_append_dosages_batch_error, sizeof(__pyx_k_append_dosages_batch_error), 0, 0, 1, 0},
  {&__pyx_kp_s_append_dosages_error, __pyx_k_append_dosages_error, sizeof(__pyx_k_append_dosages_error), 0, 0, 1, 0},
  {&__pyx_n_s_append_partially_phased, __pyx_k_append_partially_phased, sizeof(__pyx_k_append_partially_phased), 0, 0, 1, 1},
  {&__pyx_n_s_append_partially_phased_batch, __pyx_k_append_partially_phased_batch, sizeof(__pyx_k_append_partially_phased_batch), 0, 0, 1, 1},
  {&__pyx_kp_s_append_partially_phased_batch_er, __pyx_k_append_partially_phased_batch_er, sizeof(__pyx_k_append_partially_phased_batch_er), 0, 0, 1, 0},
  {&__pyx_kp_s_append_partially_phased_error, __pyx_k_append_partially_phased_error, sizeof(__pyx_k_append_partially_phased_error), 0, 0, 1, 0},
  {&__pyx_n_s_change_sample_subset, __pyx_k_change_sample_subset, sizeof(__pyx_k_change_sample_subset), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_kp_s_count_error, __pyx_k_count_error, sizeof(__pyx_k_count_error), 0, 0, 1, 0},
  {&__pyx_kp_s_current_sample_subset_has_size, __pyx_k_current_sample_subset_has_size, sizeof(__pyx_k_current_sample_subset_has_size), 0, 0, 1, 0},
  {&__pyx_n_s_dosage_phase_present, __pyx_k_dosage_phase_present, sizeof(__pyx_k_dosage_phase_present), 0, 0, 1, 1},
  {&__pyx_n_s_dosage_present, __pyx_k_dosage_present, sizeof(__pyx_k_dosage_present), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_exc_tb, __pyx_k_exc_tb, sizeof(__pyx_k_exc_tb), 0, 0, 1, 1},
  {&__pyx_n_s_exc_type, __pyx_k_exc_type, sizeof(__pyx_k_exc_type), 0, 0, 1, 1},
  {&__pyx_n_s_exc_val, __pyx_k_exc_val, sizeof(__pyx_k_exc_val), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_floatarr_out, __pyx_k_floatarr_out, sizeof(__pyx_k_floatarr_out), 0, 0, 1, 1},
  {&__pyx_n_s_geno_int_out, __pyx_k_geno_int_out, sizeof(__pyx_k_geno_int_out), 0, 0, 1, 1},
  {&__pyx_n_s_genocount_uint32_out, __pyx_k_genocount_uint32_out, sizeof(__pyx_k_genocount_uint32_out), 0, 0, 1, 1},
  {&__pyx_n_s_get_raw_sample_ct, __pyx_k_get_raw_sample_ct, sizeof(__pyx_k_get_raw_sample_ct), 0, 0, 1, 1},
  {&__pyx_n_s_get_variant_ct, __pyx_k_get_variant_ct, sizeof(__pyx_k_get_variant_ct), 0, 0, 1, 1},
  {&__pyx_n_s_hap_maj, __pyx_k_hap_maj, sizeof(__pyx_k_hap_maj), 0, 0, 1, 1},
  {&__pyx_n_s_hardcall_phase_present, __pyx_k_hardcall_phase_present, sizeof(__pyx_k_hardcall_phase_present), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_kp_s_in_file, __pyx_k_in_file, sizeof(__pyx_k_in_file), 0, 0, 1, 0},
  {&__pyx_kp_s_in_file_2, __pyx_k_in_file_2, sizeof(__pyx_k_in_file_2), 0, 0, 1, 0},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_int64, __pyx_k_int64, sizeof(__pyx_k_int64), 0, 0, 1, 1},
  {&__pyx_n_s_int8, __pyx_k_int8, sizeof(__pyx_k_int8), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_nonref_flags, __pyx_k_nonref_flags, sizeof(__pyx_k_nonref_flags), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_only, __pyx_k_only, sizeof(__pyx_k_only), 0, 0, 1, 0},
  {&__pyx_kp_s_pgl_init_error, __pyx_k_pgl_init_error, sizeof(__pyx_k_pgl_init_error), 0, 0, 1, 0},
  {&__pyx_n_s_phasepresent, __pyx_k_phasepresent, sizeof(__pyx_k_phasepresent), 0, 0, 1, 1},
  {&__pyx_n_s_phasepresent_batch, __pyx_k_phasepresent_batch, sizeof(__pyx_k_phasepresent_batch), 0, 0, 1, 1},
  {&__pyx_n_s_phasepresent_out, __pyx_k_phasepresent_out, sizeof(__pyx_k_phasepresent_out), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_raw_sample_ct, __pyx_k_raw_sample_ct, sizeof(__pyx_k_raw_sample_ct), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_read_alleles, __pyx_k_read_alleles, sizeof(__pyx_k_read_alleles), 0, 0, 1, 1},
  {&__pyx_n_s_read_alleles_and_phasepresent, __pyx_k_read_alleles_and_phasepresent, sizeof(__pyx_k_read_alleles_and_phasepresent), 0, 0, 1, 1},
  {&__pyx_kp_s_read_alleles_and_phasepresent_er, __pyx_k_read_alleles_and_phasepresent_er, sizeof(__pyx_k_read_alleles_and_phasepresent_er), 0, 0, 1, 0},
  {&__pyx_n_s_read_alleles_and_phasepresent_li, __pyx_k_read_alleles_and_phasepresent_li, sizeof(__pyx_k_read_alleles_and_phasepresent_li), 0, 0, 1, 1},
  {&__pyx_n_s_read_alleles_and_phasepresent_ra, __pyx_k_read_alleles_and_phasepresent_ra, sizeof(__pyx_k_read_alleles_and_phasepresent_ra), 0, 0, 1, 1},
  {&__pyx_kp_s_read_alleles_and_phasepresent_va, __pyx_k_read_alleles_and_phasepresent_va, sizeof(__pyx_k_read_alleles_and_phasepresent_va), 0, 0, 1, 0},
  {&__pyx_kp_s_read_alleles_error, __pyx_k_read_alleles_error, sizeof(__pyx_k_read_alleles_error), 0, 0, 1, 0},
  {&__pyx_n_s_read_alleles_list, __pyx_k_read_alleles_list, sizeof(__pyx_k_read_alleles_list), 0, 0, 1, 1},
  {&__pyx_kp_s_read_alleles_list_error, __pyx_k_read_alleles_list_error, sizeof(__pyx_k_read_alleles_list_error), 0, 0, 1, 0},
  {&__pyx_kp_s_read_alleles_list_variant_index, __pyx_k_read_alleles_list_variant_index, sizeof(__pyx_k_read_alleles_list_variant_index), 0, 0, 1, 0},
  {&__pyx_n_s_read_alleles_range, __pyx_k_read_alleles_range, sizeof(__pyx_k_read_alleles_range), 0, 0, 1, 1},
  {&__pyx_kp_s_read_alleles_range_error, __pyx_k_read_alleles_range_error, sizeof(__pyx_k_read_alleles_range_error), 0, 0, 1, 0},
  {&__pyx_kp_s_read_alleles_range_variant_idx_e, __pyx_k_read_alleles_range_variant_idx_e, sizeof(__pyx_k_read_alleles_range_variant_idx_e), 0, 0, 1, 0},
  {&__pyx_kp_s_read_alleles_range_variant_idx_s, __pyx_k_read_alleles_range_variant_idx_s, sizeof(__pyx_k_read_alleles_range_variant_idx_s), 0, 0, 1, 0},
  {&__pyx_kp_s_read_alleles_variant_idx_too_lar, __pyx_k_read_alleles_variant_idx_too_lar, sizeof(__pyx_k_read_alleles_variant_idx_too_lar), 0, 0, 1, 0},
  {&__pyx_n_s_read_dosages, __pyx_k_read_dosages, sizeof(__pyx_k_read_dosages), 0, 0, 1, 1},
  {&__pyx_kp_s_read_dosages_error, __pyx_k_read_dosages_error, sizeof(__pyx_k_read_dosages_error), 0, 0, 1, 0},
  {&__pyx_kp_s_read_dosages_requires_floatarr_o, __pyx_k_read_dosages_requires_floatarr_o, sizeof(__pyx_k_read_dosages_requires_floatarr_o), 0, 0, 1, 0},
  {&__pyx_kp_s_read_dosages_variant_idx_too_lar, __pyx_k_read_dosages_variant_idx_too_lar, sizeof(__pyx_k_read_dosages_variant_idx_too_lar), 0, 0, 1, 0},
  {&__pyx_kp_s_read_error, __pyx_k_read_error, sizeof(__pyx_k_read_error), 0, 0, 1, 0},
  {&__pyx_n_s_read_list, __pyx_k_read_list, sizeof(__pyx_k_read_list), 0, 0, 1, 1},
  {&__pyx_kp_s_read_list_error, __pyx_k_read_list_error, sizeof(__pyx_k_read_list_error), 0, 0, 1, 0},
  {&__pyx_kp_s_read_list_variant_index_too_larg, __pyx_k_read_list_variant_index_too_larg, sizeof(__pyx_k_read_list_variant_index_too_larg), 0, 0, 1, 0},
  {&__pyx_n_s_read_range, __pyx_k_read_range, sizeof(__pyx_k_read_range), 0, 0, 1, 1},
  {&__pyx_kp_s_read_range_error, __pyx_k_read_range_error, sizeof(__pyx_k_read_range_error), 0, 0, 1, 0},
  {&__pyx_kp_s_read_range_variant_idx_end_too_l, __pyx_k_read_range_variant_idx_end_too_l, sizeof(__pyx_k_read_range_variant_idx_end_too_l), 0, 0, 1, 0},
  {&__pyx_kp_s_read_range_variant_idx_start_var, __pyx_k_read_range_variant_idx_start_var, sizeof(__pyx_k_read_range_variant_idx_start_var), 0, 0, 1, 0},
  {&__pyx_kp_s_read_requires_geno_int_out_to_be, __pyx_k_read_requires_geno_int_out_to_be, sizeof(__pyx_k_read_requires_geno_int_out_to_be), 0, 0, 1, 0},
  {&__pyx_kp_s_read_variant_idx_too_large, __pyx_k_read_variant_idx_too_large, sizeof(__pyx_k_read_variant_idx_too_large), 0, 0, 1, 0},
  {&__pyx_n_s_sample_ct, __pyx_k_sample_ct, sizeof(__pyx_k_sample_ct), 0, 0, 1, 1},
  {&__pyx_n_s_sample_maj, __pyx_k_sample_maj, sizeof(__pyx_k_sample_maj), 0, 0, 1, 1},
  {&__pyx_n_s_sample_subset, __pyx_k_sample_subset, sizeof(__pyx_k_sample_subset), 0, 0, 1, 1},
  {&__pyx_kp_s_sample_subset_is_not_in_strictly, __pyx_k_sample_subset_is_not_in_strictly, sizeof(__pyx_k_sample_subset_is_not_in_strictly), 0, 0, 1, 0},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_kp_s_spgw_init_phase1_error, __pyx_k_spgw_init_phase1_error, sizeof(__pyx_k_spgw_init_phase1_error), 0, 0, 1, 0},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_unequal_to_initially_declared_v, __pyx_k_unequal_to_initially_declared_v, sizeof(__pyx_k_unequal_to_initially_declared_v), 0, 0, 1, 0},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_variant_ct, __pyx_k_variant_ct, sizeof(__pyx_k_variant_ct), 0, 0, 1, 1},
  {&__pyx_n_s_variant_idx, __pyx_k_variant_idx, sizeof(__pyx_k_variant_idx), 0, 0, 1, 1},
  {&__pyx_n_s_variant_idx_end, __pyx_k_variant_idx_end, sizeof(__pyx_k_variant_idx_end), 0, 0, 1, 1},
  {&__pyx_kp_s_variant_idx_end_variant_idx_sta, __pyx_k_variant_idx_end_variant_idx_sta, sizeof(__pyx_k_variant_idx_end_variant_idx_sta), 0, 0, 1, 0},
  {&__pyx_n_s_variant_idx_start, __pyx_k_variant_idx_start, sizeof(__pyx_k_variant_idx_start), 0, 0, 1, 1},
  {&__pyx_n_s_variant_idxs, __pyx_k_variant_idxs, sizeof(__pyx_k_variant_idxs), 0, 0, 1, 1},
  {&__pyx_kp_s_variant_idxs_length_is, __pyx_k_variant_idxs_length_is, sizeof(__pyx_k_variant_idxs_length_is), 0, 0, 1, 0},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pgenlib.pyx":196
 *         cdef uint32_t subset_size = sample_subset.size
 *         if subset_size == 0:
 *             raise RuntimeError("Empty sample_subset is not currently permitted.")             # <<<<<<<<<<<<<<
 *         cdef sample_uidx = sample_subset[0]
 *         cdef uint32_t idx = 0
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Empty_sample_subset_is_not_curre); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "pgenlib.pyx":212
 *             # to be returned in a different order
 *             if next_uidx <= sample_uidx:
 *                 raise RuntimeError("sample_subset is not in strictly increasing order.")             # <<<<<<<<<<<<<<
 * 
 *             sample_uidx = next_uidx
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_sample_subset_is_not_in_strictly); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "pgenlib.pyx":343
 *             raise RuntimeError("read() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         if not geno_int_out.flags["C_CONTIGUOUS"]:
 *             raise RuntimeError("read() requires geno_int_out to be C-contiguous.")             # <<<<<<<<<<<<<<
 *         # for full genotype info for multiallelic variants, use read_phased()
 *         # instead
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_read_requires_geno_int_out_to_be); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "pgenlib.pyx":362
 *             genoarr_to_int64s_minus9(self._genovec, self._subset_size, data64_ptr)
 *         else:
 *             raise RuntimeError("Invalid read() geno_int_out array element type (int8, int32, or int64 expected).")             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_Invalid_read_geno_int_out_array); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "pgenlib.pyx":370
 *             raise RuntimeError("read_dosages() variant_idx too large (" + str(variant_idx) + "; only " + str(self._info_ptr[0].raw_variant_ct) + " in file)")
 *         if not floatarr_out.flags["C_CONTIGUOUS"]:
 *             raise RuntimeError("read_dosages() requires floatarr_out to be C-contiguous.")             # <<<<<<<<<<<<<<
 *         # todo: change this when pgenlib_internal supports multiallelic
 *         # variants
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_read_dosages_requires_floatarr_o); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "pgenlib.pyx":391
 *             dosage16_to_doubles_minus9(self._genovec, self._dosage_present, self._dosage_vals, self._subset_size, dosage_ct, data64_ptr)
 *         else:
 *             raise RuntimeError("Invalid read_dosages() floatarr_out array element type (float32 or float64 expected).")             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Invalid_read_dosages_floatarr_ou); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "pgenlib.pyx":639
 *             self.read_range_internal64(variant_idx_start, variant_idx_end, geno_int_out, allele_idx, sample_maj)
 *         else:
 *             raise RuntimeError("Invalid read_range() geno_int_out array element type (int8, int32, or int64 expected).")             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Invalid_read_range_geno_int_out); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "pgenlib.pyx":867
 *             self.read_list_internal64(variant_idxs, geno_int_out, allele_idx, sample_maj)
 *         else:
 *             raise RuntimeError("Invalid read_list() geno_int_out array element type (int8, int32, or int64 expected).")             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Invalid_read_list_geno_int_out_a); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "pgenlib.pyx":1161
 *                   bint dosage_phase_present = False):
 *         if dosage_phase_present and not dosage_present:
 *             raise RuntimeError("Invalid arguments for PgenWriter constructor (dosage_phase_present true but dosage_present false).")             # <<<<<<<<<<<<<<
 *         if allele_idx_offsets is not None:
 *             for uii in range(variant_ct + 1):
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_Invalid_arguments_for_PgenWriter); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "pgenlib.pyx":1165
 *             for uii in range(variant_ct + 1):
 *                 if allele_idx_offsets[uii] != uii * 2:
 *                     raise RuntimeError("Multiallelic variants aren't supported by PgenWriter yet.")             # <<<<<<<<<<<<<<
 * 
 *         self._state_ptr = <st_pgen_writer_t*>PyMem_Malloc(sizeof(st_pgen_writer_t))
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_Multiallelic_variants_aren_t_sup); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "pgenlib.pyx":1279
 *             self.append_dosages_internal64(floatarr)
 *         else:
 *             raise RuntimeError("Invalid append_dosages() dosage array element type (float32 or float64 expected).")             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_Invalid_append_dosages_dosage_ar); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "pgenlib.pyx":1375
 *             self.append_dosages_batch_internal64(floatarr_batch)
 *         else:
 *             raise RuntimeError("Invalid append_dosages_batch() dosage array element type (float32 or float64 expected).")             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_Invalid_append_dosages_batch_dos); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__16)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__18)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__20)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initpgenlib(void); /*proto*/
PyMODINIT_FUNC initpgenlib(void)
#else
PyMODINIT_FUNC PyInit_pgenlib(void); /*proto*/
PyMODINIT_FUNC PyInit_pgenlib(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_pgenlib(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("pgenlib", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_pgenlib) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "pgenlib")) {
      if (unlikely(PyDict_SetItemString(modules, "pgenlib", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_7pgenlib_PgenReader = &__pyx_vtable_7pgenlib_PgenReader;
  __pyx_vtable_7pgenlib_PgenReader.set_sample_subset_internal = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, PyArrayObject *))__pyx_f_7pgenlib_10PgenReader_set_sample_subset_internal;
  __pyx_vtable_7pgenlib_PgenReader.__pyx___enter__ = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenReader___enter__;
  __pyx_vtable_7pgenlib_PgenReader.get_raw_sample_ct = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenReader_get_raw_sample_ct;
  __pyx_vtable_7pgenlib_PgenReader.get_variant_ct = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenReader_get_variant_ct;
  __pyx_vtable_7pgenlib_PgenReader.hardcall_phase_present = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenReader_hardcall_phase_present;
  __pyx_vtable_7pgenlib_PgenReader.read = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read *__pyx_optional_args))__pyx_f_7pgenlib_10PgenReader_read;
  __pyx_vtable_7pgenlib_PgenReader.read_dosages = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_dosages *__pyx_optional_args))__pyx_f_7pgenlib_10PgenReader_read_dosages;
  __pyx_vtable_7pgenlib_PgenReader.read_alleles = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, PyArrayObject *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenReader_read_alleles;
  __pyx_vtable_7pgenlib_PgenReader.read_alleles_and_phasepresent = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, PyArrayObject *, PyArrayObject *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenReader_read_alleles_and_phasepresent;
  __pyx_vtable_7pgenlib_PgenReader.read_range_internal8 = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, uint32_t, PyArrayObject *, struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal8 *__pyx_optional_args))__pyx_f_7pgenlib_10PgenReader_read_range_internal8;
  __pyx_vtable_7pgenlib_PgenReader.read_range_internal32 = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, uint32_t, PyArrayObject *, struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal32 *__pyx_optional_args))__pyx_f_7pgenlib_10PgenReader_read_range_internal32;
  __pyx_vtable_7pgenlib_PgenReader.read_range_internal64 = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, uint32_t, PyArrayObject *, struct __pyx_opt_args_7pgenlib_10PgenReader_read_range_internal64 *__pyx_optional_args))__pyx_f_7pgenlib_10PgenReader_read_range_internal64;
  __pyx_vtable_7pgenlib_PgenReader.read_range = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, uint32_t, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_range *__pyx_optional_args))__pyx_f_7pgenlib_10PgenReader_read_range;
  __pyx_vtable_7pgenlib_PgenReader.read_list_internal8 = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, PyArrayObject *, PyArrayObject *, struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal8 *__pyx_optional_args))__pyx_f_7pgenlib_10PgenReader_read_list_internal8;
  __pyx_vtable_7pgenlib_PgenReader.read_list_internal32 = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, PyArrayObject *, PyArrayObject *, struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal32 *__pyx_optional_args))__pyx_f_7pgenlib_10PgenReader_read_list_internal32;
  __pyx_vtable_7pgenlib_PgenReader.read_list_internal64 = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, PyArrayObject *, PyArrayObject *, struct __pyx_opt_args_7pgenlib_10PgenReader_read_list_internal64 *__pyx_optional_args))__pyx_f_7pgenlib_10PgenReader_read_list_internal64;
  __pyx_vtable_7pgenlib_PgenReader.read_list = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, PyArrayObject *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_list *__pyx_optional_args))__pyx_f_7pgenlib_10PgenReader_read_list;
  __pyx_vtable_7pgenlib_PgenReader.read_alleles_range = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, uint32_t, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_range *__pyx_optional_args))__pyx_f_7pgenlib_10PgenReader_read_alleles_range;
  __pyx_vtable_7pgenlib_PgenReader.read_alleles_list = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, PyArrayObject *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_list *__pyx_optional_args))__pyx_f_7pgenlib_10PgenReader_read_alleles_list;
  __pyx_vtable_7pgenlib_PgenReader.read_alleles_and_phasepresent_range = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, uint32_t, PyArrayObject *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_and_phasepresent_range *__pyx_optional_args))__pyx_f_7pgenlib_10PgenReader_read_alleles_and_phasepresent_range;
  __pyx_vtable_7pgenlib_PgenReader.read_alleles_and_phasepresent_list = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, PyArrayObject *, PyArrayObject *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_read_alleles_and_phasepresent_list *__pyx_optional_args))__pyx_f_7pgenlib_10PgenReader_read_alleles_and_phasepresent_list;
  __pyx_vtable_7pgenlib_PgenReader.count = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, uint32_t, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_count *__pyx_optional_args))__pyx_f_7pgenlib_10PgenReader_count;
  __pyx_vtable_7pgenlib_PgenReader.change_sample_subset = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenReader_change_sample_subset *__pyx_optional_args))__pyx_f_7pgenlib_10PgenReader_change_sample_subset;
  __pyx_vtable_7pgenlib_PgenReader.close = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenReader_close;
  __pyx_vtable_7pgenlib_PgenReader.__pyx___exit__ = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenReader *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenReader___exit__;
  if (PyType_Ready(&__pyx_type_7pgenlib_PgenReader) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7pgenlib_PgenReader.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7pgenlib_PgenReader.tp_dict, __pyx_vtabptr_7pgenlib_PgenReader) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "PgenReader", (PyObject *)&__pyx_type_7pgenlib_PgenReader) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7pgenlib_PgenReader = &__pyx_type_7pgenlib_PgenReader;
  __pyx_vtabptr_7pgenlib_PgenWriter = &__pyx_vtable_7pgenlib_PgenWriter;
  __pyx_vtable_7pgenlib_PgenWriter.__pyx___enter__ = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenWriter *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenWriter___enter__;
  __pyx_vtable_7pgenlib_PgenWriter.append_biallelic = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenWriter_append_biallelic;
  __pyx_vtable_7pgenlib_PgenWriter.append_alleles = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenWriter_append_alleles *__pyx_optional_args))__pyx_f_7pgenlib_10PgenWriter_append_alleles;
  __pyx_vtable_7pgenlib_PgenWriter.append_partially_phased = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *, PyArrayObject *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenWriter_append_partially_phased;
  __pyx_vtable_7pgenlib_PgenWriter.append_dosages_internal32 = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *))__pyx_f_7pgenlib_10PgenWriter_append_dosages_internal32;
  __pyx_vtable_7pgenlib_PgenWriter.append_dosages_internal64 = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *))__pyx_f_7pgenlib_10PgenWriter_append_dosages_internal64;
  __pyx_vtable_7pgenlib_PgenWriter.append_dosages = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenWriter_append_dosages;
  __pyx_vtable_7pgenlib_PgenWriter.append_biallelic_batch = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenWriter_append_biallelic_batch;
  __pyx_vtable_7pgenlib_PgenWriter.append_alleles_batch = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7pgenlib_10PgenWriter_append_alleles_batch *__pyx_optional_args))__pyx_f_7pgenlib_10PgenWriter_append_alleles_batch;
  __pyx_vtable_7pgenlib_PgenWriter.append_partially_phased_batch = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *, PyArrayObject *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenWriter_append_partially_phased_batch;
  __pyx_vtable_7pgenlib_PgenWriter.append_dosages_batch_internal32 = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *))__pyx_f_7pgenlib_10PgenWriter_append_dosages_batch_internal32;
  __pyx_vtable_7pgenlib_PgenWriter.append_dosages_batch_internal64 = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *))__pyx_f_7pgenlib_10PgenWriter_append_dosages_batch_internal64;
  __pyx_vtable_7pgenlib_PgenWriter.append_dosages_batch = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenWriter *, PyArrayObject *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenWriter_append_dosages_batch;
  __pyx_vtable_7pgenlib_PgenWriter.close = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenWriter *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenWriter_close;
  __pyx_vtable_7pgenlib_PgenWriter.__pyx___exit__ = (PyObject *(*)(struct __pyx_obj_7pgenlib_PgenWriter *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7pgenlib_10PgenWriter___exit__;
  if (PyType_Ready(&__pyx_type_7pgenlib_PgenWriter) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7pgenlib_PgenWriter.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7pgenlib_PgenWriter.tp_dict, __pyx_vtabptr_7pgenlib_PgenWriter) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "PgenWriter", (PyObject *)&__pyx_type_7pgenlib_PgenWriter) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7pgenlib_PgenWriter = &__pyx_type_7pgenlib_PgenWriter;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif

  /* "pgenlib.pyx":5
 * from cpython.mem cimport PyMem_Malloc, PyMem_Free
 * # from cpython.view cimport array as cvarray
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * import sys
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pgenlib.pyx":7
 * import numpy as np
 * cimport numpy as np
 * import sys             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "pgenlib_python_support.h":
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pgenlib.pyx":1
 * # from libc.stdlib cimport malloc, free             # <<<<<<<<<<<<<<
 * from libc.stdint cimport int64_t, uintptr_t, uint32_t, int32_t, uint16_t, uint8_t, int8_t
 * from cpython.mem cimport PyMem_Malloc, PyMem_Free
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pgenlib", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pgenlib");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif


          #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *x) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 2 * PyLong_SHIFT) {
                            return (uint32_t) (((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 3 * PyLong_SHIFT) {
                            return (uint32_t) (((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 4 * PyLong_SHIFT) {
                            return (uint32_t) (((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint32_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint32_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) ((((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, long, PyLong_AsLong(x))
            } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint32_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint32_t) -1;
        }
    } else {
        uint32_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (uint32_t) -1;
        val = __Pyx_PyInt_As_uint32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint32_t");
    return (uint32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint32_t");
    return (uint32_t) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_uint32(npy_uint32 value) {
    const npy_uint32 neg_one = (npy_uint32) -1, const_zero = (npy_uint32) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_uint32) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_uint32) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(npy_uint32) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(npy_uint32) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_uint32) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(npy_uint32),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(uint32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint32_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_plink2_3a__3a_pglerr_t(plink2::pglerr_t value) {
    const plink2::pglerr_t neg_one = (plink2::pglerr_t) -1, const_zero = (plink2::pglerr_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(plink2::pglerr_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(plink2::pglerr_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(plink2::pglerr_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(plink2::pglerr_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(plink2::pglerr_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(plink2::pglerr_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(Py_intptr_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
